
MP_LEDS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c18  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  08007d58  08007d58  00017d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008028  08008028  00018028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008030  08008030  00018030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008034  08008034  00018034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  08008038  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002448  20000014  08008044  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000245c  08008044  0002245c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ad46  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003375  00000000  00000000  0003adcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001b88  00000000  00000000  0003e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001547  00000000  00000000  0003fcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023b28  00000000  00000000  00041217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a507  00000000  00000000  00064d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ea571  00000000  00000000  0007f246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007998  00000000  00000000  001697b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00171150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08007d40 	.word	0x08007d40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08007d40 	.word	0x08007d40

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__gedf2>:
 800091c:	f04f 3cff 	mov.w	ip, #4294967295
 8000920:	e006      	b.n	8000930 <__cmpdf2+0x4>
 8000922:	bf00      	nop

08000924 <__ledf2>:
 8000924:	f04f 0c01 	mov.w	ip, #1
 8000928:	e002      	b.n	8000930 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__cmpdf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800093c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000946:	d01b      	beq.n	8000980 <__cmpdf2+0x54>
 8000948:	b001      	add	sp, #4
 800094a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800094e:	bf0c      	ite	eq
 8000950:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000954:	ea91 0f03 	teqne	r1, r3
 8000958:	bf02      	ittt	eq
 800095a:	ea90 0f02 	teqeq	r0, r2
 800095e:	2000      	moveq	r0, #0
 8000960:	4770      	bxeq	lr
 8000962:	f110 0f00 	cmn.w	r0, #0
 8000966:	ea91 0f03 	teq	r1, r3
 800096a:	bf58      	it	pl
 800096c:	4299      	cmppl	r1, r3
 800096e:	bf08      	it	eq
 8000970:	4290      	cmpeq	r0, r2
 8000972:	bf2c      	ite	cs
 8000974:	17d8      	asrcs	r0, r3, #31
 8000976:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800097a:	f040 0001 	orr.w	r0, r0, #1
 800097e:	4770      	bx	lr
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	d102      	bne.n	8000990 <__cmpdf2+0x64>
 800098a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800098e:	d107      	bne.n	80009a0 <__cmpdf2+0x74>
 8000990:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d1d6      	bne.n	8000948 <__cmpdf2+0x1c>
 800099a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800099e:	d0d3      	beq.n	8000948 <__cmpdf2+0x1c>
 80009a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop

080009a8 <__aeabi_cdrcmple>:
 80009a8:	4684      	mov	ip, r0
 80009aa:	4610      	mov	r0, r2
 80009ac:	4662      	mov	r2, ip
 80009ae:	468c      	mov	ip, r1
 80009b0:	4619      	mov	r1, r3
 80009b2:	4663      	mov	r3, ip
 80009b4:	e000      	b.n	80009b8 <__aeabi_cdcmpeq>
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdcmpeq>:
 80009b8:	b501      	push	{r0, lr}
 80009ba:	f7ff ffb7 	bl	800092c <__cmpdf2>
 80009be:	2800      	cmp	r0, #0
 80009c0:	bf48      	it	mi
 80009c2:	f110 0f00 	cmnmi.w	r0, #0
 80009c6:	bd01      	pop	{r0, pc}

080009c8 <__aeabi_dcmpeq>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff fff4 	bl	80009b8 <__aeabi_cdcmpeq>
 80009d0:	bf0c      	ite	eq
 80009d2:	2001      	moveq	r0, #1
 80009d4:	2000      	movne	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmplt>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffea 	bl	80009b8 <__aeabi_cdcmpeq>
 80009e4:	bf34      	ite	cc
 80009e6:	2001      	movcc	r0, #1
 80009e8:	2000      	movcs	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmple>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffe0 	bl	80009b8 <__aeabi_cdcmpeq>
 80009f8:	bf94      	ite	ls
 80009fa:	2001      	movls	r0, #1
 80009fc:	2000      	movhi	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpge>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffce 	bl	80009a8 <__aeabi_cdrcmple>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpgt>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffc4 	bl	80009a8 <__aeabi_cdrcmple>
 8000a20:	bf34      	ite	cc
 8000a22:	2001      	movcc	r0, #1
 8000a24:	2000      	movcs	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_d2iz>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d215      	bcs.n	8000a62 <__aeabi_d2iz+0x36>
 8000a36:	d511      	bpl.n	8000a5c <__aeabi_d2iz+0x30>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d912      	bls.n	8000a68 <__aeabi_d2iz+0x3c>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a52:	fa23 f002 	lsr.w	r0, r3, r2
 8000a56:	bf18      	it	ne
 8000a58:	4240      	negne	r0, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a66:	d105      	bne.n	8000a74 <__aeabi_d2iz+0x48>
 8000a68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	bf08      	it	eq
 8000a6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2uiz>:
 8000a7c:	004a      	lsls	r2, r1, #1
 8000a7e:	d211      	bcs.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d211      	bcs.n	8000aaa <__aeabi_d2uiz+0x2e>
 8000a86:	d50d      	bpl.n	8000aa4 <__aeabi_d2uiz+0x28>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d40e      	bmi.n	8000ab0 <__aeabi_d2uiz+0x34>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_d2uiz+0x3a>
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b970 	b.w	8000e54 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	460d      	mov	r5, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	460f      	mov	r7, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4694      	mov	ip, r2
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0xe2>
 8000ba2:	fab2 f382 	clz	r3, r2
 8000ba6:	b143      	cbz	r3, 8000bba <__udivmoddi4+0x2e>
 8000ba8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bac:	f1c3 0220 	rsb	r2, r3, #32
 8000bb0:	409f      	lsls	r7, r3
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4317      	orrs	r7, r2
 8000bb8:	409c      	lsls	r4, r3
 8000bba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bbe:	fa1f f58c 	uxth.w	r5, ip
 8000bc2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc6:	0c22      	lsrs	r2, r4, #16
 8000bc8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bcc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd0:	fb01 f005 	mul.w	r0, r1, r5
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	d90a      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bd8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bdc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be0:	f080 811c 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000be4:	4290      	cmp	r0, r2
 8000be6:	f240 8119 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000bea:	3902      	subs	r1, #2
 8000bec:	4462      	add	r2, ip
 8000bee:	1a12      	subs	r2, r2, r0
 8000bf0:	b2a4      	uxth	r4, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfe:	fb00 f505 	mul.w	r5, r0, r5
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x90>
 8000c06:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0e:	f080 8107 	bcs.w	8000e20 <__udivmoddi4+0x294>
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	f240 8104 	bls.w	8000e20 <__udivmoddi4+0x294>
 8000c18:	4464      	add	r4, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c20:	1b64      	subs	r4, r4, r5
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11e      	cbz	r6, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40dc      	lsrs	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0xbc>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80ed 	beq.w	8000e16 <__udivmoddi4+0x28a>
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c42:	4608      	mov	r0, r1
 8000c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c48:	fab3 f183 	clz	r1, r3
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	d149      	bne.n	8000ce4 <__udivmoddi4+0x158>
 8000c50:	42ab      	cmp	r3, r5
 8000c52:	d302      	bcc.n	8000c5a <__udivmoddi4+0xce>
 8000c54:	4282      	cmp	r2, r0
 8000c56:	f200 80f8 	bhi.w	8000e4a <__udivmoddi4+0x2be>
 8000c5a:	1a84      	subs	r4, r0, r2
 8000c5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c60:	2001      	movs	r0, #1
 8000c62:	4617      	mov	r7, r2
 8000c64:	2e00      	cmp	r6, #0
 8000c66:	d0e2      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	e9c6 4700 	strd	r4, r7, [r6]
 8000c6c:	e7df      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xe6>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f382 	clz	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f040 8090 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7c:	1a8a      	subs	r2, r1, r2
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2101      	movs	r1, #1
 8000c88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c90:	0c22      	lsrs	r2, r4, #16
 8000c92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c96:	fb0e f005 	mul.w	r0, lr, r5
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000c9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2b8>
 8000cae:	4645      	mov	r5, r8
 8000cb0:	1a12      	subs	r2, r2, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x14e>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x14c>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2c2>
 8000cd8:	4610      	mov	r0, r2
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ce2:	e79f      	b.n	8000c24 <__udivmoddi4+0x98>
 8000ce4:	f1c1 0720 	rsb	r7, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cfa:	40fd      	lsrs	r5, r7
 8000cfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d00:	4323      	orrs	r3, r4
 8000d02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0e:	0c1c      	lsrs	r4, r3, #16
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb08 f50e 	mul.w	r5, r8, lr
 8000d18:	42a5      	cmp	r5, r4
 8000d1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2b4>
 8000d30:	42a5      	cmp	r5, r4
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2b4>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4464      	add	r4, ip
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	b29d      	uxth	r5, r3
 8000d40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d44:	fb09 4413 	mls	r4, r9, r3, r4
 8000d48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2ac>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2ac>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	4464      	add	r4, ip
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	42ac      	cmp	r4, r5
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46ae      	mov	lr, r5
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x29c>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x298>
 8000d7c:	b156      	cbz	r6, 8000d94 <__udivmoddi4+0x208>
 8000d7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d82:	eb64 040e 	sbc.w	r4, r4, lr
 8000d86:	fa04 f707 	lsl.w	r7, r4, r7
 8000d8a:	40ca      	lsrs	r2, r1
 8000d8c:	40cc      	lsrs	r4, r1
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	e9c6 7400 	strd	r7, r4, [r6]
 8000d94:	4618      	mov	r0, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9c:	f1c3 0120 	rsb	r1, r3, #32
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	fa20 f201 	lsr.w	r2, r0, r1
 8000da8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dac:	409d      	lsls	r5, r3
 8000dae:	432a      	orrs	r2, r5
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc0:	0c11      	lsrs	r1, r2, #16
 8000dc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dca:	428d      	cmp	r5, r1
 8000dcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x258>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b0>
 8000ddc:	428d      	cmp	r5, r1
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b0>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4461      	add	r1, ip
 8000de4:	1b49      	subs	r1, r1, r5
 8000de6:	b292      	uxth	r2, r2
 8000de8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dec:	fb07 1115 	mls	r1, r7, r5, r1
 8000df0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df4:	fb05 f10e 	mul.w	r1, r5, lr
 8000df8:	4291      	cmp	r1, r2
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x282>
 8000dfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000e00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2a8>
 8000e06:	4291      	cmp	r1, r2
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2a8>
 8000e0a:	3d02      	subs	r5, #2
 8000e0c:	4462      	add	r2, ip
 8000e0e:	1a52      	subs	r2, r2, r1
 8000e10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0xfc>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000e1c:	4639      	mov	r1, r7
 8000e1e:	e6e6      	b.n	8000bee <__udivmoddi4+0x62>
 8000e20:	4610      	mov	r0, r2
 8000e22:	e6fb      	b.n	8000c1c <__udivmoddi4+0x90>
 8000e24:	4548      	cmp	r0, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e30:	3b01      	subs	r3, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e34:	4645      	mov	r5, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e38:	462b      	mov	r3, r5
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x258>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e44:	3d02      	subs	r5, #2
 8000e46:	4462      	add	r2, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e70a      	b.n	8000c64 <__udivmoddi4+0xd8>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x14e>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b085      	sub	sp, #20
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Data[LED_MAX][4];
uint8_t LED_Mod[LED_MAX][4]; //for brightness requirements

int datasentflag = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000ec8:	f003 feec 	bl	8004ca4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000054 	.word	0x20000054
 8000ee0:	200008f0 	.word	0x200008f0

08000ee4 <set_LED>:

void set_LED(int led_num, int Green, int Red, int Blue){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
	LED_Data[led_num][0]=led_num;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	4a11      	ldr	r2, [pc, #68]	; (8000f3c <set_LED+0x58>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[led_num][1]=Green;
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	b2d9      	uxtb	r1, r3
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <set_LED+0x58>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	4413      	add	r3, r2
 8000f0a:	460a      	mov	r2, r1
 8000f0c:	705a      	strb	r2, [r3, #1]
	LED_Data[led_num][2]=Red;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	b2d9      	uxtb	r1, r3
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <set_LED+0x58>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	460a      	mov	r2, r1
 8000f1c:	709a      	strb	r2, [r3, #2]
	LED_Data[led_num][3]=Blue;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2d9      	uxtb	r1, r3
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <set_LED+0x58>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	460a      	mov	r2, r1
 8000f2c:	70da      	strb	r2, [r3, #3]
}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000470 	.word	0x20000470

08000f40 <set_brightness>:

#define PI 3.14159265

void set_brightness(int brightness){  //we can set it from 0 to 45
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
#if(USE_BRIGHTNESS)
		if(brightness>45) brightness=45;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b2d      	cmp	r3, #45	; 0x2d
 8000f4c:	dd01      	ble.n	8000f52 <set_brightness+0x12>
 8000f4e:	232d      	movs	r3, #45	; 0x2d
 8000f50:	607b      	str	r3, [r7, #4]
		for(int i=0;i<LED_MAX;i++){
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e060      	b.n	800101a <set_brightness+0xda>
			LED_Mod[i][0] = LED_Data[i][0];
 8000f58:	4a37      	ldr	r2, [pc, #220]	; (8001038 <set_brightness+0xf8>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8000f60:	4a36      	ldr	r2, [pc, #216]	; (800103c <set_brightness+0xfc>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			for(int j=1;j<4;j++){
 8000f68:	2301      	movs	r3, #1
 8000f6a:	613b      	str	r3, [r7, #16]
 8000f6c:	e04f      	b.n	800100e <set_brightness+0xce>
				float angle = 90 - brightness;  //in degrees
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8000f74:	ee07 3a90 	vmov	s15, r3
 8000f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7c:	edc7 7a03 	vstr	s15, [r7, #12]
				angle = angle*PI/180; //in radian
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f7ff fa61 	bl	8000448 <__aeabi_f2d>
 8000f86:	a32a      	add	r3, pc, #168	; (adr r3, 8001030 <set_brightness+0xf0>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fab4 	bl	80004f8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <set_brightness+0x100>)
 8000f9e:	f7ff fbd5 	bl	800074c <__aeabi_ddiv>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f7ff fd87 	bl	8000abc <__aeabi_d2f>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	60fb      	str	r3, [r7, #12]
				LED_Mod[i][j] = (LED_Data[i][j]/tan(angle));
 8000fb2:	4a21      	ldr	r2, [pc, #132]	; (8001038 <set_brightness+0xf8>)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	441a      	add	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fa2f 	bl	8000424 <__aeabi_i2d>
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	460d      	mov	r5, r1
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f7ff fa3c 	bl	8000448 <__aeabi_f2d>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	ec43 2b10 	vmov	d0, r2, r3
 8000fd8:	f005 fe12 	bl	8006c00 <tan>
 8000fdc:	ec53 2b10 	vmov	r2, r3, d0
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	f7ff fbb2 	bl	800074c <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fd44 	bl	8000a7c <__aeabi_d2uiz>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b2d9      	uxtb	r1, r3
 8000ff8:	4a10      	ldr	r2, [pc, #64]	; (800103c <set_brightness+0xfc>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	441a      	add	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4413      	add	r3, r2
 8001004:	460a      	mov	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
			for(int j=1;j<4;j++){
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	3301      	adds	r3, #1
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2b03      	cmp	r3, #3
 8001012:	ddac      	ble.n	8000f6e <set_brightness+0x2e>
		for(int i=0;i<LED_MAX;i++){
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3301      	adds	r3, #1
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2b8f      	cmp	r3, #143	; 0x8f
 800101e:	dd9b      	ble.n	8000f58 <set_brightness+0x18>

			}
		}
#endif
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bdb0      	pop	{r4, r5, r7, pc}
 800102a:	bf00      	nop
 800102c:	f3af 8000 	nop.w
 8001030:	53c8d4f1 	.word	0x53c8d4f1
 8001034:	400921fb 	.word	0x400921fb
 8001038:	20000470 	.word	0x20000470
 800103c:	200006b0 	.word	0x200006b0
 8001040:	40668000 	.word	0x40668000

08001044 <wS2812_Send>:

uint16_t pwmData[(24*LED_MAX)+50];

void wS2812_Send(void){
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
	uint32_t idx=0;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
	/*for(int i=0;i<50;i++){
		pmwData[idx] = 0;
		idx++;
	}*/

	for(int i = 0; i<LED_MAX; i++){
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	e036      	b.n	80010c2 <wS2812_Send+0x7e>
		color=((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | LED_Mod[i][3]);
 8001054:	4a2e      	ldr	r2, [pc, #184]	; (8001110 <wS2812_Send+0xcc>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	041a      	lsls	r2, r3, #16
 8001060:	492b      	ldr	r1, [pc, #172]	; (8001110 <wS2812_Send+0xcc>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	431a      	orrs	r2, r3
 800106e:	4928      	ldr	r1, [pc, #160]	; (8001110 <wS2812_Send+0xcc>)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	78db      	ldrb	r3, [r3, #3]
 8001078:	4313      	orrs	r3, r2
 800107a:	607b      	str	r3, [r7, #4]
		for(int i=23;i>=0;i--){
 800107c:	2317      	movs	r3, #23
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e019      	b.n	80010b6 <wS2812_Send+0x72>
			if(color&(1<<i)) pwmData[idx] = 60; //to send a 1, two third of the signal must be high (two third of the reload value)
 8001082:	2201      	movs	r2, #1
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	461a      	mov	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4013      	ands	r3, r2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <wS2812_Send+0x5c>
 8001094:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <wS2812_Send+0xd0>)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	213c      	movs	r1, #60	; 0x3c
 800109a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800109e:	e004      	b.n	80010aa <wS2812_Send+0x66>
			else pwmData[idx] = 30; //1 third of the reload value
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <wS2812_Send+0xd0>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	211e      	movs	r1, #30
 80010a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			idx++;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	3301      	adds	r3, #1
 80010ae:	617b      	str	r3, [r7, #20]
		for(int i=23;i>=0;i--){
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dae2      	bge.n	8001082 <wS2812_Send+0x3e>
	for(int i = 0; i<LED_MAX; i++){
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3301      	adds	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b8f      	cmp	r3, #143	; 0x8f
 80010c6:	ddc5      	ble.n	8001054 <wS2812_Send+0x10>
		}
	}

	for(int i=0;i<50;i++){   //see in the dataset, reset value, to advertise that another sat of data is coming next
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	e00a      	b.n	80010e4 <wS2812_Send+0xa0>
		pwmData[idx] = 0;
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <wS2812_Send+0xd0>)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2100      	movs	r1, #0
 80010d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		idx++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	3301      	adds	r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
	for(int i=0;i<50;i++){   //see in the dataset, reset value, to advertise that another sat of data is coming next
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	2b31      	cmp	r3, #49	; 0x31
 80010e8:	ddf1      	ble.n	80010ce <wS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, 24);
 80010ea:	2318      	movs	r3, #24
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <wS2812_Send+0xd0>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <wS2812_Send+0xd4>)
 80010f2:	f003 fbe5 	bl	80048c0 <HAL_TIM_PWM_Start_DMA>
	while(datasentflag){};  //when is finished, it means that DMA stops
 80010f6:	bf00      	nop
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <wS2812_Send+0xd8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1fb      	bne.n	80010f8 <wS2812_Send+0xb4>
	datasentflag=0;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <wS2812_Send+0xd8>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200006b0 	.word	0x200006b0
 8001114:	200008f4 	.word	0x200008f4
 8001118:	20000054 	.word	0x20000054
 800111c:	200008f0 	.word	0x200008f0

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f000 fd21 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 f845 	bl	80011b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800112e:	f000 f8b7 	bl	80012a0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 fa31 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f000 fa1d 	bl	8001574 <MX_DMA_Init>
  MX_TIM1_Init();
 800113a:	f000 f8f7 	bl	800132c <MX_TIM1_Init>
  MX_RTC_Init();
 800113e:	f000 f8cd 	bl	80012dc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001142:	f000 f9a3 	bl	800148c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8001146:	f000 f9ed 	bl	8001524 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  for(int i=0;i<144;i++){
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e008      	b.n	8001162 <main+0x42>
	  set_LED(i, 255, 0, 0);
 8001150:	2300      	movs	r3, #0
 8001152:	2200      	movs	r2, #0
 8001154:	21ff      	movs	r1, #255	; 0xff
 8001156:	68f8      	ldr	r0, [r7, #12]
 8001158:	f7ff fec4 	bl	8000ee4 <set_LED>
  for(int i=0;i<144;i++){
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b8f      	cmp	r3, #143	; 0x8f
 8001166:	ddf3      	ble.n	8001150 <main+0x30>
  }

  set_brightness(100);
 8001168:	2064      	movs	r0, #100	; 0x64
 800116a:	f7ff fee9 	bl	8000f40 <set_brightness>
  //set_brightness(0);  //leds don't turn on
  wS2812_Send();
 800116e:	f7ff ff69 	bl	8001044 <wS2812_Send>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  for(int i =0;i<46;i++){
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	e00a      	b.n	800118e <main+0x6e>
		  set_brightness(i);
 8001178:	68b8      	ldr	r0, [r7, #8]
 800117a:	f7ff fee1 	bl	8000f40 <set_brightness>
		  wS2812_Send();
 800117e:	f7ff ff61 	bl	8001044 <wS2812_Send>
		  HAL_Delay(50);
 8001182:	2032      	movs	r0, #50	; 0x32
 8001184:	f000 fd78 	bl	8001c78 <HAL_Delay>
	  for(int i =0;i<46;i++){
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3301      	adds	r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	2b2d      	cmp	r3, #45	; 0x2d
 8001192:	ddf1      	ble.n	8001178 <main+0x58>
	  }

	  for(int i=45;i>=0;i--){
 8001194:	232d      	movs	r3, #45	; 0x2d
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	e00a      	b.n	80011b0 <main+0x90>
	  		  set_brightness(i);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fed0 	bl	8000f40 <set_brightness>
	  		  wS2812_Send();
 80011a0:	f7ff ff50 	bl	8001044 <wS2812_Send>
	  		  HAL_Delay(50);
 80011a4:	2032      	movs	r0, #50	; 0x32
 80011a6:	f000 fd67 	bl	8001c78 <HAL_Delay>
	  for(int i=45;i>=0;i--){
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	daf1      	bge.n	800119a <main+0x7a>
	  for(int i =0;i<46;i++){
 80011b6:	e7dc      	b.n	8001172 <main+0x52>

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b09a      	sub	sp, #104	; 0x68
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2248      	movs	r2, #72	; 0x48
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f005 fced 	bl	8006ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
 80011da:	615a      	str	r2, [r3, #20]
 80011dc:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80011de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011ec:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80011ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f023 0303 	bic.w	r3, r3, #3
 80011f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	60d3      	str	r3, [r2, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <SystemClock_Config+0xe4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800120a:	4a24      	ldr	r2, [pc, #144]	; (800129c <SystemClock_Config+0xe4>)
 800120c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b22      	ldr	r3, [pc, #136]	; (800129c <SystemClock_Config+0xe4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800121e:	232f      	movs	r3, #47	; 0x2f
 8001220:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001232:	2301      	movs	r3, #1
 8001234:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001236:	2340      	movs	r3, #64	; 0x40
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800123a:	2300      	movs	r3, #0
 800123c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800123e:	2360      	movs	r3, #96	; 0x60
 8001240:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001242:	2305      	movs	r3, #5
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001246:	2300      	movs	r3, #0
 8001248:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4618      	mov	r0, r3
 8001250:	f001 ff2e 	bl	80030b0 <HAL_RCC_OscConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800125a:	f000 f9e5 	bl	8001628 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800125e:	236f      	movs	r3, #111	; 0x6f
 8001260:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fa8a 	bl	8003798 <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800128a:	f000 f9cd 	bl	8001628 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800128e:	f003 f847 	bl	8004320 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001292:	bf00      	nop
 8001294:	3768      	adds	r7, #104	; 0x68
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	58000400 	.word	0x58000400

080012a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b094      	sub	sp, #80	; 0x50
 80012a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a6:	463b      	mov	r3, r7
 80012a8:	2250      	movs	r2, #80	; 0x50
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f005 fc7a 	bl	8006ba6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80012b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80012bc:	2310      	movs	r3, #16
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 feb6 	bl	8004034 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80012ce:	f000 f9ab 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80012d2:	bf00      	nop
 80012d4:	3750      	adds	r7, #80	; 0x50
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_RTC_Init+0x48>)
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <MX_RTC_Init+0x4c>)
 80012e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012e6:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_RTC_Init+0x48>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <MX_RTC_Init+0x48>)
 80012ee:	227f      	movs	r2, #127	; 0x7f
 80012f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012f2:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_RTC_Init+0x48>)
 80012f4:	22ff      	movs	r2, #255	; 0xff
 80012f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_RTC_Init+0x48>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_RTC_Init+0x48>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_RTC_Init+0x48>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_RTC_Init+0x48>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_RTC_Init+0x48>)
 8001312:	f003 f91d 	bl	8004550 <HAL_RTC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800131c:	f000 f984 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000030 	.word	0x20000030
 8001328:	40002800 	.word	0x40002800

0800132c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09c      	sub	sp, #112	; 0x70
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001332:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	2234      	movs	r2, #52	; 0x34
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f005 fc1d 	bl	8006ba6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <MX_TIM1_Init+0x158>)
 800136e:	4a46      	ldr	r2, [pc, #280]	; (8001488 <MX_TIM1_Init+0x15c>)
 8001370:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <MX_TIM1_Init+0x158>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <MX_TIM1_Init+0x158>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 80;
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <MX_TIM1_Init+0x158>)
 8001380:	2250      	movs	r2, #80	; 0x50
 8001382:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001384:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <MX_TIM1_Init+0x158>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800138a:	4b3e      	ldr	r3, [pc, #248]	; (8001484 <MX_TIM1_Init+0x158>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001390:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <MX_TIM1_Init+0x158>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001396:	483b      	ldr	r0, [pc, #236]	; (8001484 <MX_TIM1_Init+0x158>)
 8001398:	f003 f9da 	bl	8004750 <HAL_TIM_Base_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013a2:	f000 f941 	bl	8001628 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013b0:	4619      	mov	r1, r3
 80013b2:	4834      	ldr	r0, [pc, #208]	; (8001484 <MX_TIM1_Init+0x158>)
 80013b4:	f003 ff7a 	bl	80052ac <HAL_TIM_ConfigClockSource>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013be:	f000 f933 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013c2:	4830      	ldr	r0, [pc, #192]	; (8001484 <MX_TIM1_Init+0x158>)
 80013c4:	f003 fa1b 	bl	80047fe <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ce:	f000 f92b 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e2:	4619      	mov	r1, r3
 80013e4:	4827      	ldr	r0, [pc, #156]	; (8001484 <MX_TIM1_Init+0x158>)
 80013e6:	f004 fce7 	bl	8005db8 <HAL_TIMEx_MasterConfigSynchronization>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80013f0:	f000 f91a 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f4:	2360      	movs	r3, #96	; 0x60
 80013f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fc:	2300      	movs	r3, #0
 80013fe:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001400:	2300      	movs	r3, #0
 8001402:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001410:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	481a      	ldr	r0, [pc, #104]	; (8001484 <MX_TIM1_Init+0x158>)
 800141a:	f003 fe33 	bl	8005084 <HAL_TIM_PWM_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001424:	f000 f900 	bl	8001628 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001440:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800144e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM1_Init+0x158>)
 8001466:	f004 fd07 	bl	8005e78 <HAL_TIMEx_ConfigBreakDeadTime>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8001470:	f000 f8da 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM1_Init+0x158>)
 8001476:	f000 f9c5 	bl	8001804 <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3770      	adds	r7, #112	; 0x70
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000054 	.word	0x20000054
 8001488:	40012c00 	.word	0x40012c00

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <MX_USART1_UART_Init+0x90>)
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <MX_USART1_UART_Init+0x94>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_USART1_UART_Init+0x90>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014d4:	4811      	ldr	r0, [pc, #68]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014d6:	f004 fd93 	bl	8006000 <HAL_UART_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014e0:	f000 f8a2 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014e8:	f005 fa5a 	bl	80069a0 <HAL_UARTEx_SetTxFifoThreshold>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014f2:	f000 f899 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_USART1_UART_Init+0x90>)
 80014fa:	f005 fa8f 	bl	8006a1c <HAL_UARTEx_SetRxFifoThreshold>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 f890 	bl	8001628 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <MX_USART1_UART_Init+0x90>)
 800150a:	f005 fa10 	bl	800692e <HAL_UARTEx_DisableFifoMode>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001514:	f000 f888 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20000100 	.word	0x20000100
 8001520:	40013800 	.word	0x40013800

08001524 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USB_PCD_Init+0x48>)
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <MX_USB_PCD_Init+0x4c>)
 800152c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_USB_PCD_Init+0x48>)
 8001530:	2208      	movs	r2, #8
 8001532:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_USB_PCD_Init+0x48>)
 8001536:	2202      	movs	r2, #2
 8001538:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USB_PCD_Init+0x48>)
 800153c:	2202      	movs	r2, #2
 800153e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_USB_PCD_Init+0x48>)
 8001542:	2200      	movs	r2, #0
 8001544:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USB_PCD_Init+0x48>)
 8001548:	2200      	movs	r2, #0
 800154a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_USB_PCD_Init+0x48>)
 800154e:	2200      	movs	r2, #0
 8001550:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USB_PCD_Init+0x48>)
 8001554:	2200      	movs	r2, #0
 8001556:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_USB_PCD_Init+0x48>)
 800155a:	f001 f91d 	bl	8002798 <HAL_PCD_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001564:	f000 f860 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000194 	.word	0x20000194
 8001570:	40006800 	.word	0x40006800

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001578:	2004      	movs	r0, #4
 800157a:	f7ff fc6d 	bl	8000e58 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fc6a 	bl	8000e58 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	200b      	movs	r0, #11
 800158a:	f000 fc74 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800158e:	200b      	movs	r0, #11
 8001590:	f000 fc8b 	bl	8001eaa <HAL_NVIC_EnableIRQ>

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2004      	movs	r0, #4
 80015ae:	f7ff fc6c 	bl	8000e8a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fc69 	bl	8000e8a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	2002      	movs	r0, #2
 80015ba:	f7ff fc66 	bl	8000e8a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	2008      	movs	r0, #8
 80015c0:	f7ff fc63 	bl	8000e8a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2123      	movs	r1, #35	; 0x23
 80015c8:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_GPIO_Init+0x84>)
 80015ca:	f001 f8cd 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015ce:	2310      	movs	r3, #16
 80015d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4619      	mov	r1, r3
 80015de:	4810      	ldr	r0, [pc, #64]	; (8001620 <MX_GPIO_Init+0x88>)
 80015e0:	f000 ff52 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 80015e4:	2323      	movs	r3, #35	; 0x23
 80015e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4808      	ldr	r0, [pc, #32]	; (800161c <MX_GPIO_Init+0x84>)
 80015fa:	f000 ff45 	bl	8002488 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80015fe:	2303      	movs	r3, #3
 8001600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_GPIO_Init+0x8c>)
 8001610:	f000 ff3a 	bl	8002488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	48000400 	.word	0x48000400
 8001620:	48000800 	.word	0x48000800
 8001624:	48000c00 	.word	0x48000c00

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>

08001632 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_AHB2_GRP1_EnableClock>:
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001662:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800166c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001670:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001678:	68fb      	ldr	r3, [r7, #12]
}
 800167a:	bf00      	nop
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001686:	b480      	push	{r7}
 8001688:	b085      	sub	sp, #20
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800168e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001692:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4313      	orrs	r3, r2
 800169c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016dc:	68fb      	ldr	r3, [r7, #12]
}
 80016de:	bf00      	nop
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2005      	movs	r0, #5
 80016f4:	f000 fbbf 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016f8:	2005      	movs	r0, #5
 80016fa:	f000 fbd6 	bl	8001eaa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	2250      	movs	r2, #80	; 0x50
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f005 fa46 	bl	8006ba6 <memset>
  if(hrtc->Instance==RTC)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a0f      	ldr	r2, [pc, #60]	; (800175c <HAL_RTC_MspInit+0x58>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d117      	bne.n	8001754 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8001724:	f001 f930 	bl	8002988 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800172c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800172e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001734:	f107 0308 	add.w	r3, r7, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fc7b 	bl	8004034 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8001744:	f7ff ff70 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001748:	f7ff ff73 	bl	8001632 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800174c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001750:	f7ff ff99 	bl	8001686 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001754:	bf00      	nop
 8001756:	3758      	adds	r7, #88	; 0x58
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40002800 	.word	0x40002800

08001760 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_TIM_Base_MspInit+0x98>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d13e      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001772:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001776:	f7ff ff9f 	bl	80016b8 <LL_APB2_GRP1_EnableClock>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel1;
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 800177c:	4a20      	ldr	r2, [pc, #128]	; (8001800 <HAL_TIM_Base_MspInit+0xa0>)
 800177e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8001780:	4b1e      	ldr	r3, [pc, #120]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 8001782:	2215      	movs	r2, #21
 8001784:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 8001788:	2210      	movs	r2, #16
 800178a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 8001794:	2280      	movs	r2, #128	; 0x80
 8001796:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 800179a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800179e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80017b4:	4811      	ldr	r0, [pc, #68]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 80017b6:	f000 fb93 	bl	8001ee0 <HAL_DMA_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <HAL_TIM_Base_MspInit+0x64>
    {
      Error_Handler();
 80017c0:	f7ff ff32 	bl	8001628 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <HAL_TIM_Base_MspInit+0x9c>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2019      	movs	r0, #25
 80017d6:	f000 fb4e 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017da:	2019      	movs	r0, #25
 80017dc:	f000 fb65 	bl	8001eaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	201b      	movs	r0, #27
 80017e6:	f000 fb46 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017ea:	201b      	movs	r0, #27
 80017ec:	f000 fb5d 	bl	8001eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	200000a0 	.word	0x200000a0
 8001800:	40020008 	.word	0x40020008

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_TIM_MspPostInit+0x54>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d114      	bne.n	8001850 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff ff14 	bl	8001654 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800182c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001830:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800183e:	2301      	movs	r3, #1
 8001840:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	4619      	mov	r1, r3
 8001848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184c:	f000 fe1c 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40012c00 	.word	0x40012c00

0800185c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b09c      	sub	sp, #112	; 0x70
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2250      	movs	r2, #80	; 0x50
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f005 f992 	bl	8006ba6 <memset>
  if(huart->Instance==USART1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a1e      	ldr	r2, [pc, #120]	; (8001900 <HAL_UART_MspInit+0xa4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d134      	bne.n	80018f6 <HAL_UART_MspInit+0x9a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800188c:	2301      	movs	r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	4618      	mov	r0, r3
 800189a:	f002 fbcb 	bl	8004034 <HAL_RCCEx_PeriphCLKConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018a4:	f7ff fec0 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80018ac:	f7ff ff04 	bl	80016b8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fecf 	bl	8001654 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin;
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018be:	2301      	movs	r3, #1
 80018c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018c6:	2307      	movs	r3, #7
 80018c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(STLINK_RX_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	; (8001904 <HAL_UART_MspInit+0xa8>)
 80018d2:	f000 fdd9 	bl	8002488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018e6:	2307      	movs	r3, #7
 80018e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ee:	4619      	mov	r1, r3
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <HAL_UART_MspInit+0xa8>)
 80018f2:	f000 fdc9 	bl	8002488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3770      	adds	r7, #112	; 0x70
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40013800 	.word	0x40013800
 8001904:	48000400 	.word	0x48000400

08001908 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b09c      	sub	sp, #112	; 0x70
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2250      	movs	r2, #80	; 0x50
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f005 f93c 	bl	8006ba6 <memset>
  if(hpcd->Instance==USB)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <HAL_PCD_MspInit+0xa8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d136      	bne.n	80019a6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 8;
 800193e:	2308      	movs	r3, #8
 8001940:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001946:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001948:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800194c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800194e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001952:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001958:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800195a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800195e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fb65 	bl	8004034 <HAL_RCCEx_PeriphCLKConfig>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001970:	f7ff fe5a 	bl	8001628 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fe6d 	bl	8001654 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800197a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800197e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001988:	2300      	movs	r3, #0
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800198c:	230a      	movs	r3, #10
 800198e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001990:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001994:	4619      	mov	r1, r3
 8001996:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199a:	f000 fd75 	bl	8002488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800199e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80019a2:	f7ff fe70 	bl	8001686 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80019a6:	bf00      	nop
 80019a8:	3770      	adds	r7, #112	; 0x70
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40006800 	.word	0x40006800

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b8:	e7fe      	b.n	80019b8 <NMI_Handler+0x4>

080019ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <MemManage_Handler+0x4>

080019c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a00:	f000 f90e 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA1_Channel1_IRQHandler+0x10>)
 8001a1e:	f000 fbe1 	bl	80021e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200000a0 	.word	0x200000a0

08001a2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a32:	f003 fa1f 	bl	8004e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000054 	.word	0x20000054

08001a40 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <TIM1_CC_IRQHandler+0x10>)
 8001a46:	f003 fa15 	bl	8004e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000054 	.word	0x20000054

08001a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <SystemInit+0x98>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <SystemInit+0x98>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a80:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <SystemInit+0x9c>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a9e:	f023 0305 	bic.w	r3, r3, #5
 8001aa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	4a0d      	ldr	r2, [pc, #52]	; (8001af4 <SystemInit+0xa0>)
 8001ac0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <SystemInit+0xa0>)
 8001ac8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ade:	2200      	movs	r2, #0
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	faf6fefb 	.word	0xfaf6fefb
 8001af4:	22041000 	.word	0x22041000

08001af8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001af8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afc:	3304      	adds	r3, #4

08001afe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b00:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001b02:	d3f9      	bcc.n	8001af8 <CopyDataInit>
  bx lr
 8001b04:	4770      	bx	lr

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001b06:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001b08:	3004      	adds	r0, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001b0a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>
  bx lr
 8001b0e:	4770      	bx	lr

08001b10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b12:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b14:	f7ff ff9e 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <LoopForever+0x6>)
 8001b1a:	490c      	ldr	r1, [pc, #48]	; (8001b4c <LoopForever+0xa>)
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <LoopForever+0xe>)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f7ff ffed 	bl	8001afe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001b24:	480b      	ldr	r0, [pc, #44]	; (8001b54 <LoopForever+0x12>)
 8001b26:	490c      	ldr	r1, [pc, #48]	; (8001b58 <LoopForever+0x16>)
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <LoopForever+0x1a>)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f7ff ffe7 	bl	8001afe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b30:	480b      	ldr	r0, [pc, #44]	; (8001b60 <LoopForever+0x1e>)
 8001b32:	490c      	ldr	r1, [pc, #48]	; (8001b64 <LoopForever+0x22>)
 8001b34:	2300      	movs	r3, #0
 8001b36:	f7ff ffe8 	bl	8001b0a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b3a:	f005 f83d 	bl	8006bb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001b3e:	f7ff faef 	bl	8001120 <main>

08001b42 <LoopForever>:

LoopForever:
  b LoopForever
 8001b42:	e7fe      	b.n	8001b42 <LoopForever>
  ldr   r0, =_estack
 8001b44:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000014 	.word	0x20000014
 8001b50:	08008038 	.word	0x08008038
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001b54:	20030000 	.word	0x20030000
 8001b58:	20030000 	.word	0x20030000
 8001b5c:	08008044 	.word	0x08008044
  INIT_BSS _sbss, _ebss
 8001b60:	20000014 	.word	0x20000014
 8001b64:	2000245c 	.word	0x2000245c

08001b68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_Init+0x3c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_Init+0x3c>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b82:	2003      	movs	r0, #3
 8001b84:	f000 f96c 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f000 f80f 	bl	8001bac <HAL_InitTick>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	71fb      	strb	r3, [r7, #7]
 8001b98:	e001      	b.n	8001b9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b9a:	f7ff fda6 	bl	80016ea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	58004000 	.word	0x58004000

08001bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001bb8:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d024      	beq.n	8001c0a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bc0:	f001 ff98 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	4b14      	ldr	r3, [pc, #80]	; (8001c18 <HAL_InitTick+0x6c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f974 	bl	8001ec6 <HAL_SYSTICK_Config>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10f      	bne.n	8001c04 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	d809      	bhi.n	8001bfe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bea:	2200      	movs	r2, #0
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf2:	f000 f940 	bl	8001e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_InitTick+0x70>)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e007      	b.n	8001c0e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
 8001c02:	e004      	b.n	8001c0e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	e001      	b.n	8001c0e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000010 	.word	0x20000010
 8001c1c:	2000000c 	.word	0x2000000c

08001c20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000010 	.word	0x20000010
 8001c44:	20002458 	.word	0x20002458

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20002458 	.word	0x20002458

08001c60 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_GetTickPrio+0x14>)
 8001c66:	681b      	ldr	r3, [r3, #0]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000000c 	.word	0x2000000c

08001c78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c80:	f7ff ffe2 	bl	8001c48 <HAL_GetTick>
 8001c84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c90:	d005      	beq.n	8001c9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c92:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_Delay+0x44>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c9e:	bf00      	nop
 8001ca0:	f7ff ffd2 	bl	8001c48 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d8f7      	bhi.n	8001ca0 <HAL_Delay+0x28>
  {
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000010 	.word	0x20000010

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff29 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e84:	f7ff ff40 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	6978      	ldr	r0, [r7, #20]
 8001e90:	f7ff ff90 	bl	8001db4 <NVIC_EncodePriority>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4611      	mov	r1, r2
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff5f 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff33 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f7ff ffa4 	bl	8001e1c <SysTick_Config>
 8001ed4:	4603      	mov	r3, r0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e08e      	b.n	8002010 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_DMA_Init+0x138>)
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d80f      	bhi.n	8001f1e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b45      	ldr	r3, [pc, #276]	; (800201c <HAL_DMA_Init+0x13c>)
 8001f06:	4413      	add	r3, r2
 8001f08:	4a45      	ldr	r2, [pc, #276]	; (8002020 <HAL_DMA_Init+0x140>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a42      	ldr	r2, [pc, #264]	; (8002024 <HAL_DMA_Init+0x144>)
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8001f1c:	e00e      	b.n	8001f3c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_DMA_Init+0x148>)
 8001f26:	4413      	add	r3, r2
 8001f28:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <HAL_DMA_Init+0x140>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	009a      	lsls	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a3c      	ldr	r2, [pc, #240]	; (800202c <HAL_DMA_Init+0x14c>)
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa16 	bl	80023c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f9c:	d102      	bne.n	8001fa4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001fb0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d010      	beq.n	8001fe6 <HAL_DMA_Init+0x106>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d80c      	bhi.n	8001fe6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fa35 	bl	800243c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	e008      	b.n	8001ff8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40020407 	.word	0x40020407
 800201c:	bffdfff8 	.word	0xbffdfff8
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	40020000 	.word	0x40020000
 8002028:	bffdfbf8 	.word	0xbffdfbf8
 800202c:	40020400 	.word	0x40020400

08002030 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_DMA_Start_IT+0x20>
 800204c:	2302      	movs	r3, #2
 800204e:	e066      	b.n	800211e <HAL_DMA_Start_IT+0xee>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d155      	bne.n	8002110 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0201 	bic.w	r2, r2, #1
 8002080:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f000 f95a 	bl	8002342 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 020e 	orr.w	r2, r2, #14
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e00f      	b.n	80020c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0204 	bic.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 020a 	orr.w	r2, r2, #10
 80020c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0201 	orr.w	r2, r2, #1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	e005      	b.n	800211c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002118:	2302      	movs	r3, #2
 800211a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800211c:	7dfb      	ldrb	r3, [r7, #23]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d005      	beq.n	800214a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2204      	movs	r2, #4
 8002142:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e047      	b.n	80021da <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 020e 	bic.w	r2, r2, #14
 8002158:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0201 	bic.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002178:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	f003 021c 	and.w	r2, r3, #28
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f202 	lsl.w	r2, r1, r2
 800218c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002196:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00c      	beq.n	80021ba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80021b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	4798      	blx	r3
    }
  }
  return status;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002200:	f003 031c 	and.w	r3, r3, #28
 8002204:	2204      	movs	r2, #4
 8002206:	409a      	lsls	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d026      	beq.n	800225e <HAL_DMA_IRQHandler+0x7a>
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d021      	beq.n	800225e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d107      	bne.n	8002238 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0204 	bic.w	r2, r2, #4
 8002236:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223c:	f003 021c 	and.w	r2, r3, #28
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	2104      	movs	r1, #4
 8002246:	fa01 f202 	lsl.w	r2, r1, r2
 800224a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002250:	2b00      	cmp	r3, #0
 8002252:	d071      	beq.n	8002338 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800225c:	e06c      	b.n	8002338 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f003 031c 	and.w	r3, r3, #28
 8002266:	2202      	movs	r2, #2
 8002268:	409a      	lsls	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d02e      	beq.n	80022d0 <HAL_DMA_IRQHandler+0xec>
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d029      	beq.n	80022d0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0320 	and.w	r3, r3, #32
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10b      	bne.n	80022a2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 020a 	bic.w	r2, r2, #10
 8002298:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	f003 021c 	and.w	r2, r3, #28
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	2102      	movs	r1, #2
 80022b0:	fa01 f202 	lsl.w	r2, r1, r2
 80022b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d038      	beq.n	8002338 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80022ce:	e033      	b.n	8002338 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f003 031c 	and.w	r3, r3, #28
 80022d8:	2208      	movs	r2, #8
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d02a      	beq.n	800233a <HAL_DMA_IRQHandler+0x156>
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d025      	beq.n	800233a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 020e 	bic.w	r2, r2, #14
 80022fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f003 021c 	and.w	r2, r3, #28
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002338:	bf00      	nop
 800233a:	bf00      	nop
}
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002358:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800236a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f003 021c 	and.w	r2, r3, #28
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	2101      	movs	r1, #1
 800237a:	fa01 f202 	lsl.w	r2, r1, r2
 800237e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b10      	cmp	r3, #16
 800238e:	d108      	bne.n	80023a2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80023a0:	e007      	b.n	80023b2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	60da      	str	r2, [r3, #12]
}
 80023b2:	bf00      	nop
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b17      	ldr	r3, [pc, #92]	; (800242c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d80a      	bhi.n	80023ea <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d8:	089b      	lsrs	r3, r3, #2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023e0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6493      	str	r3, [r2, #72]	; 0x48
 80023e8:	e007      	b.n	80023fa <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	009a      	lsls	r2, r3, #2
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80023f4:	4413      	add	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3b08      	subs	r3, #8
 8002402:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f003 031f 	and.w	r3, r3, #31
 8002418:	2201      	movs	r2, #1
 800241a:	409a      	lsls	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40020407 	.word	0x40020407
 8002430:	4002081c 	.word	0x4002081c
 8002434:	cccccccd 	.word	0xcccccccd
 8002438:	40020880 	.word	0x40020880

0800243c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800244c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	461a      	mov	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a09      	ldr	r2, [pc, #36]	; (8002484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002460:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3b01      	subs	r3, #1
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2201      	movs	r2, #1
 800246c:	409a      	lsls	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002472:	bf00      	nop
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	1000823f 	.word	0x1000823f
 8002484:	40020940 	.word	0x40020940

08002488 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002496:	e14c      	b.n	8002732 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2101      	movs	r1, #1
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa01 f303 	lsl.w	r3, r1, r3
 80024a4:	4013      	ands	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 813e 	beq.w	800272c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d005      	beq.n	80024c8 <HAL_GPIO_Init+0x40>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d130      	bne.n	800252a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024fe:	2201      	movs	r2, #1
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4013      	ands	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 0201 	and.w	r2, r3, #1
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b03      	cmp	r3, #3
 8002534:	d017      	beq.n	8002566 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	2203      	movs	r2, #3
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4013      	ands	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d123      	bne.n	80025ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3208      	adds	r2, #8
 800257a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	220f      	movs	r2, #15
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	08da      	lsrs	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3208      	adds	r2, #8
 80025b4:	6939      	ldr	r1, [r7, #16]
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	2203      	movs	r2, #3
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0203 	and.w	r2, r3, #3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8098 	beq.w	800272c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80025fc:	4a54      	ldr	r2, [pc, #336]	; (8002750 <HAL_GPIO_Init+0x2c8>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002608:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002626:	d019      	beq.n	800265c <HAL_GPIO_Init+0x1d4>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <HAL_GPIO_Init+0x2cc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_GPIO_Init+0x1d0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a49      	ldr	r2, [pc, #292]	; (8002758 <HAL_GPIO_Init+0x2d0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00d      	beq.n	8002654 <HAL_GPIO_Init+0x1cc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a48      	ldr	r2, [pc, #288]	; (800275c <HAL_GPIO_Init+0x2d4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <HAL_GPIO_Init+0x1c8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_GPIO_Init+0x2d8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_GPIO_Init+0x1c4>
 8002648:	2304      	movs	r3, #4
 800264a:	e008      	b.n	800265e <HAL_GPIO_Init+0x1d6>
 800264c:	2307      	movs	r3, #7
 800264e:	e006      	b.n	800265e <HAL_GPIO_Init+0x1d6>
 8002650:	2303      	movs	r3, #3
 8002652:	e004      	b.n	800265e <HAL_GPIO_Init+0x1d6>
 8002654:	2302      	movs	r3, #2
 8002656:	e002      	b.n	800265e <HAL_GPIO_Init+0x1d6>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_GPIO_Init+0x1d6>
 800265c:	2300      	movs	r3, #0
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	f002 0203 	and.w	r2, r2, #3
 8002664:	0092      	lsls	r2, r2, #2
 8002666:	4093      	lsls	r3, r2
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800266e:	4938      	ldr	r1, [pc, #224]	; (8002750 <HAL_GPIO_Init+0x2c8>)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	089b      	lsrs	r3, r3, #2
 8002674:	3302      	adds	r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	43db      	mvns	r3, r3
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026a0:	4a30      	ldr	r2, [pc, #192]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43db      	mvns	r3, r3
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026ca:	4a26      	ldr	r2, [pc, #152]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 80026d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	43db      	mvns	r3, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4013      	ands	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026f6:	4a1b      	ldr	r2, [pc, #108]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80026fe:	4b19      	ldr	r3, [pc, #100]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 8002700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002724:	4a0f      	ldr	r2, [pc, #60]	; (8002764 <HAL_GPIO_Init+0x2dc>)
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	3301      	adds	r3, #1
 8002730:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	f47f aeab 	bne.w	8002498 <HAL_GPIO_Init+0x10>
  }
}
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	40010000 	.word	0x40010000
 8002754:	48000400 	.word	0x48000400
 8002758:	48000800 	.word	0x48000800
 800275c:	48000c00 	.word	0x48000c00
 8002760:	48001000 	.word	0x48001000
 8002764:	58000800 	.word	0x58000800

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002784:	e002      	b.n	800278c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e0c0      	b.n	800292c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff f8a2 	bl	8001908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2203      	movs	r2, #3
 80027c8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 f9af 	bl	8006b34 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e03e      	b.n	800285a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3311      	adds	r3, #17
 80027ec:	2201      	movs	r2, #1
 80027ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3310      	adds	r3, #16
 8002800:	7bfa      	ldrb	r2, [r7, #15]
 8002802:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002804:	7bfa      	ldrb	r2, [r7, #15]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3313      	adds	r3, #19
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	3320      	adds	r3, #32
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	3324      	adds	r3, #36	; 0x24
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	440b      	add	r3, r1
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	3301      	adds	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	791b      	ldrb	r3, [r3, #4]
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	429a      	cmp	r2, r3
 8002862:	d3bb      	bcc.n	80027dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
 8002868:	e044      	b.n	80028f4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800286a:	7bfa      	ldrb	r2, [r7, #15]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	440b      	add	r3, r1
 8002878:	f203 1351 	addw	r3, r3, #337	; 0x151
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002880:	7bfa      	ldrb	r2, [r7, #15]
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	440b      	add	r3, r1
 800288e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002896:	7bfa      	ldrb	r2, [r7, #15]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	f203 1353 	addw	r3, r3, #339	; 0x153
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	440b      	add	r3, r1
 80028d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028d8:	7bfa      	ldrb	r2, [r7, #15]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	440b      	add	r3, r1
 80028e6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	3301      	adds	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	791b      	ldrb	r3, [r3, #4]
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d3b5      	bcc.n	800286a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3304      	adds	r3, #4
 8002906:	e893 0006 	ldmia.w	r3, {r1, r2}
 800290a:	f004 f92e 	bl	8006b6a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7a9b      	ldrb	r3, [r3, #10]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d102      	bne.n	800292a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f805 	bl	8002934 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002958:	b29b      	uxth	r3, r3
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800296c:	b29b      	uxth	r3, r3
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a04      	ldr	r2, [pc, #16]	; (80029a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	58000400 	.word	0x58000400

080029a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	58000400 	.word	0x58000400

080029c4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d6:	d101      	bne.n	80029dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_RCC_HSE_Enable>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_RCC_HSE_Disable>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <LL_RCC_HSE_IsReady>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a36:	d101      	bne.n	8002a3c <LL_RCC_HSE_IsReady+0x18>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <LL_RCC_HSE_IsReady+0x1a>
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_HSI_Enable>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6013      	str	r3, [r2, #0]
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_RCC_HSI_Disable>:
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_RCC_HSI_IsReady>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a96:	d101      	bne.n	8002a9c <LL_RCC_HSI_IsReady+0x18>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <LL_RCC_HSI_IsReady+0x1a>
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	604b      	str	r3, [r1, #4]
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <LL_RCC_HSI48_Enable>:
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_RCC_HSI48_Disable>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <LL_RCC_HSI48_IsReady>:
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d101      	bne.n	8002b2e <LL_RCC_HSI48_IsReady+0x18>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <LL_RCC_HSI48_IsReady+0x1a>
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_RCC_LSE_Enable>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4a:	f043 0301 	orr.w	r3, r3, #1
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b52:	bf00      	nop
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_RCC_LSE_Disable>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6c:	f023 0301 	bic.w	r3, r3, #1
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b74:	bf00      	nop
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <LL_RCC_LSE_EnableBypass>:
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_LSE_DisableBypass>:
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <LL_RCC_LSE_IsReady>:
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d101      	bne.n	8002bda <LL_RCC_LSE_IsReady+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_RCC_LSE_IsReady+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_RCC_LSI1_Enable>:
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bf6:	f043 0301 	orr.w	r3, r3, #1
 8002bfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bfe:	bf00      	nop
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_LSI1_Disable>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	f023 0301 	bic.w	r3, r3, #1
 8002c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c20:	bf00      	nop
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_RCC_LSI1_IsReady>:
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d101      	bne.n	8002c42 <LL_RCC_LSI1_IsReady+0x18>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_RCC_LSI1_IsReady+0x1a>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_LSI2_Enable>:
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c5e:	f043 0304 	orr.w	r3, r3, #4
 8002c62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c66:	bf00      	nop
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_RCC_LSI2_Disable>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_LSI2_IsReady>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b08      	cmp	r3, #8
 8002ca4:	d101      	bne.n	8002caa <LL_RCC_LSI2_IsReady+0x18>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_RCC_LSI2_IsReady+0x1a>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_LSI2_SetTrimming>:
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_MSI_Enable>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_MSI_Disable>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_MSI_IsReady>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d101      	bne.n	8002d36 <LL_RCC_MSI_IsReady+0x16>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <LL_RCC_MSI_IsReady+0x18>
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_MSI_SetRange>:
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <LL_RCC_MSI_GetRange>:
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d80:	d901      	bls.n	8002d86 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002d82:	23b0      	movs	r3, #176	; 0xb0
 8002d84:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dae:	4313      	orrs	r3, r2
 8002db0:	604b      	str	r3, [r1, #4]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_SetSysClkSource>:
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 0203 	bic.w	r2, r3, #3
 8002dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <LL_RCC_GetSysClkSource>:
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 030c 	and.w	r3, r3, #12
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <LL_RCC_SetAHBPrescaler>:
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e32:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <LL_RCC_SetAHB4Prescaler>:
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e62:	f023 020f 	bic.w	r2, r3, #15
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_RCC_SetAPB1Prescaler>:
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	608b      	str	r3, [r1, #8]
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_SetAPB2Prescaler>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_RCC_GetAHBPrescaler>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <LL_RCC_GetAHB4Prescaler>:
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_GetAPB1Prescaler>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_RCC_GetAPB2Prescaler>:
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f64:	6013      	str	r3, [r2, #0]
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f82:	d101      	bne.n	8002f88 <LL_RCC_PLL_IsReady+0x18>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <LL_RCC_PLL_IsReady+0x1a>
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d101      	bne.n	800300e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800301e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003022:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800302e:	d101      	bne.n	8003034 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003030:	2301      	movs	r3, #1
 8003032:	e000      	b.n	8003036 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800304c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d101      	bne.n	800305a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003078:	d101      	bne.n	800307e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800308e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003098:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800309c:	d101      	bne.n	80030a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800309e:	2301      	movs	r3, #1
 80030a0:	e000      	b.n	80030a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b08d      	sub	sp, #52	; 0x34
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e363      	b.n	800378a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 808d 	beq.w	80031ea <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d0:	f7ff fe89 	bl	8002de6 <LL_RCC_GetSysClkSource>
 80030d4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d6:	f7ff ff82 	bl	8002fde <LL_RCC_PLL_GetMainSource>
 80030da:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_RCC_OscConfig+0x3e>
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	2b0c      	cmp	r3, #12
 80030e6:	d147      	bne.n	8003178 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80030e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d144      	bne.n	8003178 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e347      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80030fe:	f7ff fe34 	bl	8002d6a <LL_RCC_MSI_GetRange>
 8003102:	4603      	mov	r3, r0
 8003104:	429c      	cmp	r4, r3
 8003106:	d914      	bls.n	8003132 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	4618      	mov	r0, r3
 800310e:	f000 fd31 	bl	8003b74 <RCC_SetFlashLatencyFromMSIRange>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e336      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe0e 	bl	8002d42 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fe32 	bl	8002d94 <LL_RCC_MSI_SetCalibTrimming>
 8003130:	e013      	b.n	800315a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fe03 	bl	8002d42 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fe27 	bl	8002d94 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fd12 	bl	8003b74 <RCC_SetFlashLatencyFromMSIRange>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e317      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800315a:	f000 fccb 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 800315e:	4603      	mov	r3, r0
 8003160:	4aa4      	ldr	r2, [pc, #656]	; (80033f4 <HAL_RCC_OscConfig+0x344>)
 8003162:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003164:	4ba4      	ldr	r3, [pc, #656]	; (80033f8 <HAL_RCC_OscConfig+0x348>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fd1f 	bl	8001bac <HAL_InitTick>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d039      	beq.n	80031e8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e308      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01e      	beq.n	80031be <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003180:	f7ff fdb0 	bl	8002ce4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003184:	f7fe fd60 	bl	8001c48 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800318c:	f7fe fd5c 	bl	8001c48 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e2f5      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800319e:	f7ff fdbf 	bl	8002d20 <LL_RCC_MSI_IsReady>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f1      	beq.n	800318c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fdc8 	bl	8002d42 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fdec 	bl	8002d94 <LL_RCC_MSI_SetCalibTrimming>
 80031bc:	e015      	b.n	80031ea <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031be:	f7ff fda0 	bl	8002d02 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fd41 	bl	8001c48 <HAL_GetTick>
 80031c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031ca:	f7fe fd3d 	bl	8001c48 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e2d6      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031dc:	f7ff fda0 	bl	8002d20 <LL_RCC_MSI_IsReady>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f1      	bne.n	80031ca <HAL_RCC_OscConfig+0x11a>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031e8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d047      	beq.n	8003286 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031f6:	f7ff fdf6 	bl	8002de6 <LL_RCC_GetSysClkSource>
 80031fa:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031fc:	f7ff feef 	bl	8002fde <LL_RCC_PLL_GetMainSource>
 8003200:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003202:	6a3b      	ldr	r3, [r7, #32]
 8003204:	2b08      	cmp	r3, #8
 8003206:	d005      	beq.n	8003214 <HAL_RCC_OscConfig+0x164>
 8003208:	6a3b      	ldr	r3, [r7, #32]
 800320a:	2b0c      	cmp	r3, #12
 800320c:	d108      	bne.n	8003220 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d105      	bne.n	8003220 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d134      	bne.n	8003286 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e2b4      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003228:	d102      	bne.n	8003230 <HAL_RCC_OscConfig+0x180>
 800322a:	f7ff fbdd 	bl	80029e8 <LL_RCC_HSE_Enable>
 800322e:	e001      	b.n	8003234 <HAL_RCC_OscConfig+0x184>
 8003230:	f7ff fbe9 	bl	8002a06 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d012      	beq.n	8003262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fd04 	bl	8001c48 <HAL_GetTick>
 8003240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003244:	f7fe fd00 	bl	8001c48 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b64      	cmp	r3, #100	; 0x64
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e299      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003256:	f7ff fbe5 	bl	8002a24 <LL_RCC_HSE_IsReady>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d0f1      	beq.n	8003244 <HAL_RCC_OscConfig+0x194>
 8003260:	e011      	b.n	8003286 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fe fcf1 	bl	8001c48 <HAL_GetTick>
 8003266:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326a:	f7fe fced 	bl	8001c48 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	; 0x64
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e286      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800327c:	f7ff fbd2 	bl	8002a24 <LL_RCC_HSE_IsReady>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f1      	bne.n	800326a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d04c      	beq.n	800332c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003292:	f7ff fda8 	bl	8002de6 <LL_RCC_GetSysClkSource>
 8003296:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003298:	f7ff fea1 	bl	8002fde <LL_RCC_PLL_GetMainSource>
 800329c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_OscConfig+0x200>
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d10e      	bne.n	80032c8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d10b      	bne.n	80032c8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e266      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fbf1 	bl	8002aa8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032c6:	e031      	b.n	800332c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d019      	beq.n	8003304 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	f7ff fbba 	bl	8002a48 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fcb8 	bl	8001c48 <HAL_GetTick>
 80032d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fe fcb4 	bl	8001c48 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e24d      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032ee:	f7ff fbc9 	bl	8002a84 <LL_RCC_HSI_IsReady>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f1      	beq.n	80032dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fbd3 	bl	8002aa8 <LL_RCC_HSI_SetCalibTrimming>
 8003302:	e013      	b.n	800332c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003304:	f7ff fbaf 	bl	8002a66 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fc9e 	bl	8001c48 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003310:	f7fe fc9a 	bl	8001c48 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e233      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003322:	f7ff fbaf 	bl	8002a84 <LL_RCC_HSI_IsReady>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f1      	bne.n	8003310 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80a3 	beq.w	800348c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d076      	beq.n	800343c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	d046      	beq.n	80033e8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800335a:	f7ff fc66 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d113      	bne.n	800338c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003364:	f7ff fc3f 	bl	8002be6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003368:	f7fe fc6e 	bl	8001c48 <HAL_GetTick>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003370:	f7fe fc6a 	bl	8001c48 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e203      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003382:	f7ff fc52 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0f1      	beq.n	8003370 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800338c:	f7ff fc5f 	bl	8002c4e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fe fc5a 	bl	8001c48 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003398:	f7fe fc56 	bl	8001c48 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e1ef      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80033aa:	f7ff fc72 	bl	8002c92 <LL_RCC_LSI2_IsReady>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f1      	beq.n	8003398 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fc7c 	bl	8002cb6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80033be:	f7ff fc23 	bl	8002c08 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c2:	f7fe fc41 	bl	8001c48 <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033ca:	f7fe fc3d 	bl	8001c48 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1d6      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80033dc:	f7ff fc25 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f1      	bne.n	80033ca <HAL_RCC_OscConfig+0x31a>
 80033e6:	e051      	b.n	800348c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80033e8:	f7ff fbfd 	bl	8002be6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe fc2c 	bl	8001c48 <HAL_GetTick>
 80033f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80033f2:	e00c      	b.n	800340e <HAL_RCC_OscConfig+0x35e>
 80033f4:	20000008 	.word	0x20000008
 80033f8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80033fc:	f7fe fc24 	bl	8001c48 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e1bd      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800340e:	f7ff fc0c 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f1      	beq.n	80033fc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003418:	f7ff fc2a 	bl	8002c70 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800341e:	f7fe fc13 	bl	8001c48 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b03      	cmp	r3, #3
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e1ac      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003430:	f7ff fc2f 	bl	8002c92 <LL_RCC_LSI2_IsReady>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f1      	bne.n	800341e <HAL_RCC_OscConfig+0x36e>
 800343a:	e027      	b.n	800348c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800343c:	f7ff fc18 	bl	8002c70 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003440:	f7fe fc02 	bl	8001c48 <HAL_GetTick>
 8003444:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003448:	f7fe fbfe 	bl	8001c48 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b03      	cmp	r3, #3
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e197      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800345a:	f7ff fc1a 	bl	8002c92 <LL_RCC_LSI2_IsReady>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f1      	bne.n	8003448 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003464:	f7ff fbd0 	bl	8002c08 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fe fbee 	bl	8001c48 <HAL_GetTick>
 800346c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003470:	f7fe fbea 	bl	8001c48 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e183      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003482:	f7ff fbd2 	bl	8002c2a <LL_RCC_LSI1_IsReady>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f1      	bne.n	8003470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d05b      	beq.n	8003550 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003498:	4ba7      	ldr	r3, [pc, #668]	; (8003738 <HAL_RCC_OscConfig+0x688>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d114      	bne.n	80034ce <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80034a4:	f7ff fa70 	bl	8002988 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a8:	f7fe fbce 	bl	8001c48 <HAL_GetTick>
 80034ac:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b0:	f7fe fbca 	bl	8001c48 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e163      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c2:	4b9d      	ldr	r3, [pc, #628]	; (8003738 <HAL_RCC_OscConfig+0x688>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_RCC_OscConfig+0x42c>
 80034d6:	f7ff fb30 	bl	8002b3a <LL_RCC_LSE_Enable>
 80034da:	e00c      	b.n	80034f6 <HAL_RCC_OscConfig+0x446>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d104      	bne.n	80034ee <HAL_RCC_OscConfig+0x43e>
 80034e4:	f7ff fb4b 	bl	8002b7e <LL_RCC_LSE_EnableBypass>
 80034e8:	f7ff fb27 	bl	8002b3a <LL_RCC_LSE_Enable>
 80034ec:	e003      	b.n	80034f6 <HAL_RCC_OscConfig+0x446>
 80034ee:	f7ff fb35 	bl	8002b5c <LL_RCC_LSE_Disable>
 80034f2:	f7ff fb55 	bl	8002ba0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d014      	beq.n	8003528 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe fba3 	bl	8001c48 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fe fb9f 	bl	8001c48 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	; 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e136      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800351c:	f7ff fb51 	bl	8002bc2 <LL_RCC_LSE_IsReady>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0ef      	beq.n	8003506 <HAL_RCC_OscConfig+0x456>
 8003526:	e013      	b.n	8003550 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003528:	f7fe fb8e 	bl	8001c48 <HAL_GetTick>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800352e:	e00a      	b.n	8003546 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003530:	f7fe fb8a 	bl	8001c48 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e121      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003546:	f7ff fb3c 	bl	8002bc2 <LL_RCC_LSE_IsReady>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ef      	bne.n	8003530 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b00      	cmp	r3, #0
 800355a:	d02c      	beq.n	80035b6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	d014      	beq.n	800358e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003564:	f7ff fab5 	bl	8002ad2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fe fb6e 	bl	8001c48 <HAL_GetTick>
 800356c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003570:	f7fe fb6a 	bl	8001c48 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e103      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003582:	f7ff fac8 	bl	8002b16 <LL_RCC_HSI48_IsReady>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0f1      	beq.n	8003570 <HAL_RCC_OscConfig+0x4c0>
 800358c:	e013      	b.n	80035b6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800358e:	f7ff fab1 	bl	8002af4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003592:	f7fe fb59 	bl	8001c48 <HAL_GetTick>
 8003596:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800359a:	f7fe fb55 	bl	8001c48 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e0ee      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80035ac:	f7ff fab3 	bl	8002b16 <LL_RCC_HSI48_IsReady>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d1f1      	bne.n	800359a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80e4 	beq.w	8003788 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035c0:	f7ff fc11 	bl	8002de6 <LL_RCC_GetSysClkSource>
 80035c4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	f040 80b4 	bne.w	8003740 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0203 	and.w	r2, r3, #3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d123      	bne.n	800362e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d11c      	bne.n	800362e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d114      	bne.n	800362e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800360e:	429a      	cmp	r2, r3
 8003610:	d10d      	bne.n	800362e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d05d      	beq.n	80036ea <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d058      	beq.n	80036e6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0a1      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003646:	f7ff fc84 	bl	8002f52 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800364a:	f7fe fafd 	bl	8001c48 <HAL_GetTick>
 800364e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003652:	f7fe faf9 	bl	8001c48 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e092      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1ef      	bne.n	8003652 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <HAL_RCC_OscConfig+0x68c>)
 800367a:	4013      	ands	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003684:	4311      	orrs	r1, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800368a:	0212      	lsls	r2, r2, #8
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003692:	4311      	orrs	r1, r2
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003698:	4311      	orrs	r1, r2
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800369e:	430a      	orrs	r2, r1
 80036a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036a8:	f7ff fc44 	bl	8002f34 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036bc:	f7fe fac4 	bl	8001c48 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fe fac0 	bl	8001c48 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e059      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ef      	beq.n	80036c4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e4:	e050      	b.n	8003788 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e04f      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d147      	bne.n	8003788 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036f8:	f7ff fc1c 	bl	8002f34 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800370c:	f7fe fa9c 	bl	8001c48 <HAL_GetTick>
 8003710:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fa98 	bl	8001c48 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e031      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ef      	beq.n	8003714 <HAL_RCC_OscConfig+0x664>
 8003734:	e028      	b.n	8003788 <HAL_RCC_OscConfig+0x6d8>
 8003736:	bf00      	nop
 8003738:	58000400 	.word	0x58000400
 800373c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d01e      	beq.n	8003784 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003746:	f7ff fc04 	bl	8002f52 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374a:	f7fe fa7d 	bl	8001c48 <HAL_GetTick>
 800374e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe fa79 	bl	8001c48 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e012      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1ef      	bne.n	8003752 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_OscConfig+0x6e4>)
 800377e:	4013      	ands	r3, r2
 8003780:	60cb      	str	r3, [r1, #12]
 8003782:	e001      	b.n	8003788 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3734      	adds	r7, #52	; 0x34
 800378e:	46bd      	mov	sp, r7
 8003790:	bd90      	pop	{r4, r7, pc}
 8003792:	bf00      	nop
 8003794:	eefefffc 	.word	0xeefefffc

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e12d      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b98      	ldr	r3, [pc, #608]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d91b      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b95      	ldr	r3, [pc, #596]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 0207 	bic.w	r2, r3, #7
 80037c2:	4993      	ldr	r1, [pc, #588]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ca:	f7fe fa3d 	bl	8001c48 <HAL_GetTick>
 80037ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80037d2:	f7fe fa39 	bl	8001c48 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e111      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e4:	4b8a      	ldr	r3, [pc, #552]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d1ef      	bne.n	80037d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d016      	beq.n	800382c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fafb 	bl	8002dfe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003808:	f7fe fa1e 	bl	8001c48 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003810:	f7fe fa1a 	bl	8001c48 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0f2      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003822:	f7ff fbe8 	bl	8002ff6 <LL_RCC_IsActiveFlag_HPRE>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f1      	beq.n	8003810 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0320 	and.w	r3, r3, #32
 8003834:	2b00      	cmp	r3, #0
 8003836:	d016      	beq.n	8003866 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff faf2 	bl	8002e26 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003842:	f7fe fa01 	bl	8001c48 <HAL_GetTick>
 8003846:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800384a:	f7fe f9fd 	bl	8001c48 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e0d5      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800385c:	f7ff fbdd 	bl	800301a <LL_RCC_IsActiveFlag_C2HPRE>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f1      	beq.n	800384a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff faeb 	bl	8002e52 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800387c:	f7fe f9e4 	bl	8001c48 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003882:	e008      	b.n	8003896 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003884:	f7fe f9e0 	bl	8001c48 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e0b8      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003896:	f7ff fbd3 	bl	8003040 <LL_RCC_IsActiveFlag_SHDHPRE>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f1      	beq.n	8003884 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d016      	beq.n	80038da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fae5 	bl	8002e80 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038b6:	f7fe f9c7 	bl	8001c48 <HAL_GetTick>
 80038ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038be:	f7fe f9c3 	bl	8001c48 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e09b      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80038d0:	f7ff fbc9 	bl	8003066 <LL_RCC_IsActiveFlag_PPRE1>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f1      	beq.n	80038be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d017      	beq.n	8003916 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fadb 	bl	8002ea8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038f2:	f7fe f9a9 	bl	8001c48 <HAL_GetTick>
 80038f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038fa:	f7fe f9a5 	bl	8001c48 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e07d      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800390c:	f7ff fbbd 	bl	800308a <LL_RCC_IsActiveFlag_PPRE2>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f1      	beq.n	80038fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d043      	beq.n	80039aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d106      	bne.n	8003938 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800392a:	f7ff f87b 	bl	8002a24 <LL_RCC_HSE_IsReady>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11e      	bne.n	8003972 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e067      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d106      	bne.n	800394e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003940:	f7ff fb16 	bl	8002f70 <LL_RCC_PLL_IsReady>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e05c      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003956:	f7ff f9e3 	bl	8002d20 <LL_RCC_MSI_IsReady>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e051      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003964:	f7ff f88e 	bl	8002a84 <LL_RCC_HSI_IsReady>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e04a      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fa21 	bl	8002dbe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397c:	f7fe f964 	bl	8001c48 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	e00a      	b.n	800399a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003984:	f7fe f960 	bl	8001c48 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e036      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	f7ff fa24 	bl	8002de6 <LL_RCC_GetSysClkSource>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d1ec      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039aa:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d21b      	bcs.n	80039f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b8:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f023 0207 	bic.w	r2, r3, #7
 80039c0:	4913      	ldr	r1, [pc, #76]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c8:	f7fe f93e 	bl	8001c48 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80039d0:	f7fe f93a 	bl	8001c48 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e012      	b.n	8003a08 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x278>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1ef      	bne.n	80039d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039f0:	f000 f880 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_RCC_ClockConfig+0x27c>)
 80039f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80039fa:	f7fe f931 	bl	8001c60 <HAL_GetTickPrio>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7fe f8d3 	bl	8001bac <HAL_InitTick>
 8003a06:	4603      	mov	r3, r0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	58004000 	.word	0x58004000
 8003a14:	20000008 	.word	0x20000008

08003a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1e:	f7ff f9e2 	bl	8002de6 <LL_RCC_GetSysClkSource>
 8003a22:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a2a:	f7ff f99e 	bl	8002d6a <LL_RCC_MSI_GetRange>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	4a2b      	ldr	r2, [pc, #172]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e04b      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a46:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	e045      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d10a      	bne.n	8003a68 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a52:	f7fe ffb7 	bl	80029c4 <LL_RCC_HSE_IsEnabledDiv2>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d102      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a5c:	4b23      	ldr	r3, [pc, #140]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	e03a      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a62:	4b23      	ldr	r3, [pc, #140]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e037      	b.n	8003ad8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a68:	f7ff fab9 	bl	8002fde <LL_RCC_PLL_GetMainSource>
 8003a6c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d003      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x64>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x6a>
 8003a7a:	e00d      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003a7e:	60bb      	str	r3, [r7, #8]
        break;
 8003a80:	e015      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a82:	f7fe ff9f 	bl	80029c4 <LL_RCC_HSE_IsEnabledDiv2>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d102      	bne.n	8003a92 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_RCC_GetSysClockFreq+0xd4>)
 8003a8e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a90:	e00d      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003a92:	4b17      	ldr	r3, [pc, #92]	; (8003af0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003a94:	60bb      	str	r3, [r7, #8]
        break;
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003a98:	f7ff f967 	bl	8002d6a <LL_RCC_MSI_GetRange>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	60bb      	str	r3, [r7, #8]
        break;
 8003aac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003aae:	f7ff fa71 	bl	8002f94 <LL_RCC_PLL_GetN>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	fb03 f402 	mul.w	r4, r3, r2
 8003aba:	f7ff fa84 	bl	8002fc6 <LL_RCC_PLL_GetDivider>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ac8:	f7ff fa71 	bl	8002fae <LL_RCC_PLL_GetR>
 8003acc:	4603      	mov	r3, r0
 8003ace:	0f5b      	lsrs	r3, r3, #29
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	fbb4 f3f3 	udiv	r3, r4, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	08007de4 	.word	0x08007de4
 8003ae8:	00f42400 	.word	0x00f42400
 8003aec:	003d0900 	.word	0x003d0900
 8003af0:	007a1200 	.word	0x007a1200

08003af4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af4:	b598      	push	{r3, r4, r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003af8:	f7ff ff8e 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8003afc:	4604      	mov	r4, r0
 8003afe:	f7ff f9e7 	bl	8002ed0 <LL_RCC_GetAHBPrescaler>
 8003b02:	4603      	mov	r3, r0
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	4a03      	ldr	r2, [pc, #12]	; (8003b18 <HAL_RCC_GetHCLKFreq+0x24>)
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd98      	pop	{r3, r4, r7, pc}
 8003b18:	08007d84 	.word	0x08007d84

08003b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b1c:	b598      	push	{r3, r4, r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b20:	f7ff ffe8 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b24:	4604      	mov	r4, r0
 8003b26:	f7ff f9ed 	bl	8002f04 <LL_RCC_GetAPB1Prescaler>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd98      	pop	{r3, r4, r7, pc}
 8003b44:	08007dc4 	.word	0x08007dc4

08003b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b48:	b598      	push	{r3, r4, r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b4c:	f7ff ffd2 	bl	8003af4 <HAL_RCC_GetHCLKFreq>
 8003b50:	4604      	mov	r4, r0
 8003b52:	f7ff f9e3 	bl	8002f1c <LL_RCC_GetAPB2Prescaler>
 8003b56:	4603      	mov	r3, r0
 8003b58:	0adb      	lsrs	r3, r3, #11
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd98      	pop	{r3, r4, r7, pc}
 8003b70:	08007dc4 	.word	0x08007dc4

08003b74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b74:	b590      	push	{r4, r7, lr}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2bb0      	cmp	r3, #176	; 0xb0
 8003b80:	d903      	bls.n	8003b8a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e007      	b.n	8003b9a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	4a11      	ldr	r2, [pc, #68]	; (8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003b9a:	f7ff f9a5 	bl	8002ee8 <LL_RCC_GetAHB4Prescaler>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4a0d      	ldr	r2, [pc, #52]	; (8003bdc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbc:	0c9c      	lsrs	r4, r3, #18
 8003bbe:	f7fe fef3 	bl	80029a8 <HAL_PWREx_GetVoltageRange>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	f000 f80c 	bl	8003be4 <RCC_SetFlashLatency>
 8003bcc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd90      	pop	{r4, r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	08007de4 	.word	0x08007de4
 8003bdc:	08007d84 	.word	0x08007d84
 8003be0:	431bde83 	.word	0x431bde83

08003be4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b093      	sub	sp, #76	; 0x4c
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003bee:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <RCC_SetFlashLatency+0xe8>)
 8003bf0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003bf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003bfa:	4a35      	ldr	r2, [pc, #212]	; (8003cd0 <RCC_SetFlashLatency+0xec>)
 8003bfc:	f107 031c 	add.w	r3, r7, #28
 8003c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003c06:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <RCC_SetFlashLatency+0xf0>)
 8003c08:	f107 040c 	add.w	r4, r7, #12
 8003c0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003c12:	2300      	movs	r3, #0
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c1c:	d11a      	bne.n	8003c54 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c1e:	2300      	movs	r3, #0
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
 8003c22:	e013      	b.n	8003c4c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3348      	adds	r3, #72	; 0x48
 8003c2a:	443b      	add	r3, r7
 8003c2c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d807      	bhi.n	8003c46 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	3348      	adds	r3, #72	; 0x48
 8003c3c:	443b      	add	r3, r7
 8003c3e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c42:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c44:	e020      	b.n	8003c88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c48:	3301      	adds	r3, #1
 8003c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d9e8      	bls.n	8003c24 <RCC_SetFlashLatency+0x40>
 8003c52:	e019      	b.n	8003c88 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	e013      	b.n	8003c82 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	3348      	adds	r3, #72	; 0x48
 8003c60:	443b      	add	r3, r7
 8003c62:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d807      	bhi.n	8003c7c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	3348      	adds	r3, #72	; 0x48
 8003c72:	443b      	add	r3, r7
 8003c74:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003c78:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003c7a:	e005      	b.n	8003c88 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7e:	3301      	adds	r3, #1
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d9e8      	bls.n	8003c5a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <RCC_SetFlashLatency+0xf4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f023 0207 	bic.w	r2, r3, #7
 8003c90:	4911      	ldr	r1, [pc, #68]	; (8003cd8 <RCC_SetFlashLatency+0xf4>)
 8003c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c98:	f7fd ffd6 	bl	8001c48 <HAL_GetTick>
 8003c9c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c9e:	e008      	b.n	8003cb2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ca0:	f7fd ffd2 	bl	8001c48 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e007      	b.n	8003cc2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003cb2:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <RCC_SetFlashLatency+0xf4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1ef      	bne.n	8003ca0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	374c      	adds	r7, #76	; 0x4c
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd90      	pop	{r4, r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	08007d58 	.word	0x08007d58
 8003cd0:	08007d68 	.word	0x08007d68
 8003cd4:	08007d74 	.word	0x08007d74
 8003cd8:	58004000 	.word	0x58004000

08003cdc <LL_RCC_LSE_IsEnabled>:
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <LL_RCC_LSE_IsEnabled+0x18>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <LL_RCC_LSE_IsEnabled+0x1a>
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_RCC_LSE_IsReady>:
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d101      	bne.n	8003d18 <LL_RCC_LSE_IsReady+0x18>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <LL_RCC_LSE_IsReady+0x1a>
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_RCC_MSI_EnablePLLMode>:
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_SetRFWKPClockSource>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d52:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <LL_RCC_SetSMPSClockSource>:
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	f023 0203 	bic.w	r2, r3, #3
 8003d80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_SetSMPSPrescaler>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003da8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <LL_RCC_SetUSARTClockSource>:
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <LL_RCC_SetLPUARTClockSource>:
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_SetI2CClockSource>:
{
 8003e16:	b480      	push	{r7}
 8003e18:	b083      	sub	sp, #12
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e22:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	401a      	ands	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_SetLPTIMClockSource>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	43db      	mvns	r3, r3
 8003e68:	401a      	ands	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <LL_RCC_SetSAIClockSource>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_RCC_SetRNGClockSource>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_RCC_SetCLK48ClockSource>:
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ef0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <LL_RCC_SetUSBClockSource>:
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ffe3 	bl	8003edc <LL_RCC_SetCLK48ClockSource>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <LL_RCC_SetADCClockSource>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b083      	sub	sp, #12
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_SetRTCClockSource>:
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_RCC_GetRTCClockSource>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_RCC_ForceBackupDomainReset>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003fb2:	b480      	push	{r7}
 8003fb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fca:	bf00      	nop
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_PLLSAI1_Enable>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_PLLSAI1_Disable>:
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004004:	6013      	str	r3, [r2, #0]
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_RCC_PLLSAI1_IsReady>:
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004022:	d101      	bne.n	8004028 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800403c:	2300      	movs	r3, #0
 800403e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004040:	2300      	movs	r3, #0
 8004042:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d034      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004058:	d021      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800405a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800405e:	d81b      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004060:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004064:	d01d      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800406a:	d815      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00b      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004074:	d110      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004086:	e00d      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4618      	mov	r0, r3
 800408e:	f000 f94d 	bl	800432c <RCCEx_PLLSAI1_ConfigNP>
 8004092:	4603      	mov	r3, r0
 8004094:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004096:	e005      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	77fb      	strb	r3, [r7, #31]
        break;
 800409c:	e002      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800409e:	bf00      	nop
 80040a0:	e000      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80040a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a4:	7ffb      	ldrb	r3, [r7, #31]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fee8 	bl	8003e84 <LL_RCC_SetSAIClockSource>
 80040b4:	e001      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d046      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80040c6:	f7ff ff56 	bl	8003f76 <LL_RCC_GetRTCClockSource>
 80040ca:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d03c      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040d6:	f7fe fc57 	bl	8002988 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff30 	bl	8003f4a <LL_RCC_SetRTCClockSource>
 80040ea:	e02e      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80040ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040f6:	f7ff ff4b 	bl	8003f90 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040fa:	f7ff ff5a 	bl	8003fb2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800410c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004116:	f7ff fde1 	bl	8003cdc <LL_RCC_LSE_IsEnabled>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d114      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004120:	f7fd fd92 	bl	8001c48 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004126:	e00b      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004128:	f7fd fd8e 	bl	8001c48 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	; 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d902      	bls.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	77fb      	strb	r3, [r7, #31]
              break;
 800413e:	e004      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004140:	f7ff fdde 	bl	8003d00 <LL_RCC_LSE_IsReady>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d1ee      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800414a:	7ffb      	ldrb	r3, [r7, #31]
 800414c:	77bb      	strb	r3, [r7, #30]
 800414e:	e001      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d004      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fe2a 	bl	8003dbe <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fe35 	bl	8003dea <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b00      	cmp	r3, #0
 800418a:	d004      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fe5d 	bl	8003e50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d004      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fe52 	bl	8003e50 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d004      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff fe2a 	bl	8003e16 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fe1f 	bl	8003e16 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d022      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff fe8d 	bl	8003f08 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041f6:	d107      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004206:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004210:	d10b      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f8e3 	bl	80043e2 <RCCEx_PLLSAI1_ConfigNQ>
 800421c:	4603      	mov	r3, r0
 800421e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004220:	7ffb      	ldrb	r3, [r7, #31]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004226:	7ffb      	ldrb	r3, [r7, #31]
 8004228:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004232:	2b00      	cmp	r3, #0
 8004234:	d02b      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	2b00      	cmp	r3, #0
 8004250:	d105      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fe2a 	bl	8003eb0 <LL_RCC_SetRNGClockSource>
 800425c:	e00a      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004266:	60fb      	str	r3, [r7, #12]
 8004268:	2000      	movs	r0, #0
 800426a:	f7ff fe21 	bl	8003eb0 <LL_RCC_SetRNGClockSource>
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff fe34 	bl	8003edc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800427c:	d107      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800428c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004296:	2b00      	cmp	r3, #0
 8004298:	d022      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fe3d 	bl	8003f1e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ac:	d107      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 f8e3 	bl	8004498 <RCCEx_PLLSAI1_ConfigNR>
 80042d2:	4603      	mov	r3, r0
 80042d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042d6:	7ffb      	ldrb	r3, [r7, #31]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80042dc:	7ffb      	ldrb	r3, [r7, #31]
 80042de:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d004      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff fd26 	bl	8003d42 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff fd45 	bl	8003d96 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff fd2c 	bl	8003d6e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004316:	7fbb      	ldrb	r3, [r7, #30]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004324:	f7ff fcfe 	bl	8003d24 <LL_RCC_MSI_EnablePLLMode>
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}

0800432c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004338:	f7ff fe5b 	bl	8003ff2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800433c:	f7fd fc84 	bl	8001c48 <HAL_GetTick>
 8004340:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004342:	e009      	b.n	8004358 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004344:	f7fd fc80 	bl	8001c48 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d902      	bls.n	8004358 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	73fb      	strb	r3, [r7, #15]
      break;
 8004356:	e004      	b.n	8004362 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004358:	f7ff fe5a 	bl	8004010 <LL_RCC_PLLSAI1_IsReady>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d137      	bne.n	80043d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800437c:	4313      	orrs	r3, r2
 800437e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004392:	4313      	orrs	r3, r2
 8004394:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004396:	f7ff fe1d 	bl	8003fd4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800439a:	f7fd fc55 	bl	8001c48 <HAL_GetTick>
 800439e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043a0:	e009      	b.n	80043b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043a2:	f7fd fc51 	bl	8001c48 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d902      	bls.n	80043b6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	73fb      	strb	r3, [r7, #15]
        break;
 80043b4:	e004      	b.n	80043c0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043b6:	f7ff fe2b 	bl	8004010 <LL_RCC_PLLSAI1_IsReady>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d1f0      	bne.n	80043a2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d108      	bne.n	80043d8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d4:	4313      	orrs	r3, r2
 80043d6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043ee:	f7ff fe00 	bl	8003ff2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043f2:	f7fd fc29 	bl	8001c48 <HAL_GetTick>
 80043f6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043f8:	e009      	b.n	800440e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043fa:	f7fd fc25 	bl	8001c48 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d902      	bls.n	800440e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	73fb      	strb	r3, [r7, #15]
      break;
 800440c:	e004      	b.n	8004418 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800440e:	f7ff fdff 	bl	8004010 <LL_RCC_PLLSAI1_IsReady>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1f0      	bne.n	80043fa <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d137      	bne.n	800448e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800441e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	021b      	lsls	r3, r3, #8
 800442e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004432:	4313      	orrs	r3, r2
 8004434:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004448:	4313      	orrs	r3, r2
 800444a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800444c:	f7ff fdc2 	bl	8003fd4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004450:	f7fd fbfa 	bl	8001c48 <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004456:	e009      	b.n	800446c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004458:	f7fd fbf6 	bl	8001c48 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d902      	bls.n	800446c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	73fb      	strb	r3, [r7, #15]
        break;
 800446a:	e004      	b.n	8004476 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800446c:	f7ff fdd0 	bl	8004010 <LL_RCC_PLLSAI1_IsReady>
 8004470:	4603      	mov	r3, r0
 8004472:	2b01      	cmp	r3, #1
 8004474:	d1f0      	bne.n	8004458 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004476:	7bfb      	ldrb	r3, [r7, #15]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d108      	bne.n	800448e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800447c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800448e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80044a4:	f7ff fda5 	bl	8003ff2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80044a8:	f7fd fbce 	bl	8001c48 <HAL_GetTick>
 80044ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044ae:	e009      	b.n	80044c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044b0:	f7fd fbca 	bl	8001c48 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d902      	bls.n	80044c4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	73fb      	strb	r3, [r7, #15]
      break;
 80044c2:	e004      	b.n	80044ce <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80044c4:	f7ff fda4 	bl	8004010 <LL_RCC_PLLSAI1_IsReady>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d137      	bne.n	8004544 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80044d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044e8:	4313      	orrs	r3, r2
 80044ea:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80044ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044fe:	4313      	orrs	r3, r2
 8004500:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004502:	f7ff fd67 	bl	8003fd4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004506:	f7fd fb9f 	bl	8001c48 <HAL_GetTick>
 800450a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800450c:	e009      	b.n	8004522 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800450e:	f7fd fb9b 	bl	8001c48 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d902      	bls.n	8004522 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	73fb      	strb	r3, [r7, #15]
        break;
 8004520:	e004      	b.n	800452c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004522:	f7ff fd75 	bl	8004010 <LL_RCC_PLLSAI1_IsReady>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d1f0      	bne.n	800450e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004540:	4313      	orrs	r3, r2
 8004542:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004544:	7bfb      	ldrb	r3, [r7, #15]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e09f      	b.n	80046a2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d106      	bne.n	800457c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fd f8c4 	bl	8001704 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004584:	4b49      	ldr	r3, [pc, #292]	; (80046ac <HAL_RTC_Init+0x15c>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	2b10      	cmp	r3, #16
 800458e:	d07e      	beq.n	800468e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	22ca      	movs	r2, #202	; 0xca
 8004596:	625a      	str	r2, [r3, #36]	; 0x24
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2253      	movs	r2, #83	; 0x53
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f8ab 	bl	80046fc <RTC_EnterInitMode>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	22ff      	movs	r2, #255	; 0xff
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2204      	movs	r2, #4
 80045b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
 80045c0:	e067      	b.n	8004692 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80045d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6899      	ldr	r1, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	68d2      	ldr	r2, [r2, #12]
 80045fc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6919      	ldr	r1, [r3, #16]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	041a      	lsls	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004620:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0203 	bic.w	r2, r2, #3
 8004630:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	431a      	orrs	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d113      	bne.n	8004680 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f829 	bl	80046b0 <HAL_RTC_WaitForSynchro>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00d      	beq.n	8004680 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2204      	movs	r2, #4
 8004670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e010      	b.n	80046a2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e001      	b.n	8004692 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40002800 	.word	0x40002800

080046b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046c6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80046c8:	f7fd fabe 	bl	8001c48 <HAL_GetTick>
 80046cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046ce:	e009      	b.n	80046e4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046d0:	f7fd faba 	bl	8001c48 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046de:	d901      	bls.n	80046e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e007      	b.n	80046f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0320 	and.w	r3, r3, #32
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0ee      	beq.n	80046d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470e:	2b00      	cmp	r3, #0
 8004710:	d119      	bne.n	8004746 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f04f 32ff 	mov.w	r2, #4294967295
 800471a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800471c:	f7fd fa94 	bl	8001c48 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004722:	e009      	b.n	8004738 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004724:	f7fd fa90 	bl	8001c48 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004732:	d901      	bls.n	8004738 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e007      	b.n	8004748 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0ee      	beq.n	8004724 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e049      	b.n	80047f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fc fff2 	bl	8001760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f000 ff62 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e049      	b.n	80048a4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f841 	bl	80048ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 ff0b 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <HAL_TIM_PWM_Start_DMA+0x2c>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e03c      	b.n	8004966 <HAL_TIM_PWM_Start_DMA+0xa6>
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d109      	bne.n	8004906 <HAL_TIM_PWM_Start_DMA+0x46>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e02f      	b.n	8004966 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d109      	bne.n	8004920 <HAL_TIM_PWM_Start_DMA+0x60>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	e022      	b.n	8004966 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b0c      	cmp	r3, #12
 8004924:	d109      	bne.n	800493a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	e015      	b.n	8004966 <HAL_TIM_PWM_Start_DMA+0xa6>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b10      	cmp	r3, #16
 800493e:	d109      	bne.n	8004954 <HAL_TIM_PWM_Start_DMA+0x94>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	e008      	b.n	8004966 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
 800496c:	e188      	b.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d109      	bne.n	8004988 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	bf0c      	ite	eq
 8004980:	2301      	moveq	r3, #1
 8004982:	2300      	movne	r3, #0
 8004984:	b2db      	uxtb	r3, r3
 8004986:	e03c      	b.n	8004a02 <HAL_TIM_PWM_Start_DMA+0x142>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d109      	bne.n	80049a2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b01      	cmp	r3, #1
 8004998:	bf0c      	ite	eq
 800499a:	2301      	moveq	r3, #1
 800499c:	2300      	movne	r3, #0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	e02f      	b.n	8004a02 <HAL_TIM_PWM_Start_DMA+0x142>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b08      	cmp	r3, #8
 80049a6:	d109      	bne.n	80049bc <HAL_TIM_PWM_Start_DMA+0xfc>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	bf0c      	ite	eq
 80049b4:	2301      	moveq	r3, #1
 80049b6:	2300      	movne	r3, #0
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	e022      	b.n	8004a02 <HAL_TIM_PWM_Start_DMA+0x142>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b0c      	cmp	r3, #12
 80049c0:	d109      	bne.n	80049d6 <HAL_TIM_PWM_Start_DMA+0x116>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	e015      	b.n	8004a02 <HAL_TIM_PWM_Start_DMA+0x142>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d109      	bne.n	80049f0 <HAL_TIM_PWM_Start_DMA+0x130>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf0c      	ite	eq
 80049e8:	2301      	moveq	r3, #1
 80049ea:	2300      	movne	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e008      	b.n	8004a02 <HAL_TIM_PWM_Start_DMA+0x142>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	bf0c      	ite	eq
 80049fc:	2301      	moveq	r3, #1
 80049fe:	2300      	movne	r3, #0
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d034      	beq.n	8004a70 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_TIM_PWM_Start_DMA+0x152>
 8004a0c:	887b      	ldrh	r3, [r7, #2]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e134      	b.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x3c0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start_DMA+0x166>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a24:	e026      	b.n	8004a74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start_DMA+0x176>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a34:	e01e      	b.n	8004a74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b08      	cmp	r3, #8
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x186>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a44:	e016      	b.n	8004a74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x196>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a54:	e00e      	b.n	8004a74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d104      	bne.n	8004a66 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a64:	e006      	b.n	8004a74 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a6e:	e001      	b.n	8004a74 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e105      	b.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x3c0>
  }

  switch (Channel)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b0c      	cmp	r3, #12
 8004a78:	f200 80ae 	bhi.w	8004bd8 <HAL_TIM_PWM_Start_DMA+0x318>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004ab9 	.word	0x08004ab9
 8004a88:	08004bd9 	.word	0x08004bd9
 8004a8c:	08004bd9 	.word	0x08004bd9
 8004a90:	08004bd9 	.word	0x08004bd9
 8004a94:	08004b01 	.word	0x08004b01
 8004a98:	08004bd9 	.word	0x08004bd9
 8004a9c:	08004bd9 	.word	0x08004bd9
 8004aa0:	08004bd9 	.word	0x08004bd9
 8004aa4:	08004b49 	.word	0x08004b49
 8004aa8:	08004bd9 	.word	0x08004bd9
 8004aac:	08004bd9 	.word	0x08004bd9
 8004ab0:	08004bd9 	.word	0x08004bd9
 8004ab4:	08004b91 	.word	0x08004b91
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	4a72      	ldr	r2, [pc, #456]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8004abe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	4a71      	ldr	r2, [pc, #452]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	4a70      	ldr	r2, [pc, #448]	; (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3334      	adds	r3, #52	; 0x34
 8004adc:	461a      	mov	r2, r3
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	f7fd faa6 	bl	8002030 <HAL_DMA_Start_IT>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0c8      	b.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004afc:	60da      	str	r2, [r3, #12]
      break;
 8004afe:	e06e      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	4a60      	ldr	r2, [pc, #384]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8004b06:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	4a5f      	ldr	r2, [pc, #380]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b14:	4a5e      	ldr	r2, [pc, #376]	; (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8004b16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3338      	adds	r3, #56	; 0x38
 8004b24:	461a      	mov	r2, r3
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	f7fd fa82 	bl	8002030 <HAL_DMA_Start_IT>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0a4      	b.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b44:	60da      	str	r2, [r3, #12]
      break;
 8004b46:	e04a      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a4e      	ldr	r2, [pc, #312]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8004b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b54:	4a4d      	ldr	r2, [pc, #308]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004b56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4a4c      	ldr	r2, [pc, #304]	; (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8004b5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	333c      	adds	r3, #60	; 0x3c
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	f7fd fa5e 	bl	8002030 <HAL_DMA_Start_IT>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e080      	b.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8c:	60da      	str	r2, [r3, #12]
      break;
 8004b8e:	e026      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	4a3c      	ldr	r2, [pc, #240]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8004b96:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8004b9e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	4a3a      	ldr	r2, [pc, #232]	; (8004c90 <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8004ba6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3340      	adds	r3, #64	; 0x40
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	887b      	ldrh	r3, [r7, #2]
 8004bb8:	f7fd fa3a 	bl	8002030 <HAL_DMA_Start_IT>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e05c      	b.n	8004c80 <HAL_TIM_PWM_Start_DMA+0x3c0>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bd4:	60da      	str	r2, [r3, #12]
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	75fb      	strb	r3, [r7, #23]
      break;
 8004bdc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d14c      	bne.n	8004c7e <HAL_TIM_PWM_Start_DMA+0x3be>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	68b9      	ldr	r1, [r7, #8]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 f8bd 	bl	8005d6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a27      	ldr	r2, [pc, #156]	; (8004c94 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d009      	beq.n	8004c10 <HAL_TIM_PWM_Start_DMA+0x350>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d004      	beq.n	8004c10 <HAL_TIM_PWM_Start_DMA+0x350>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIM_PWM_Start_DMA+0x354>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c14:	2300      	movs	r3, #0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d004      	beq.n	8004c3e <HAL_TIM_PWM_Start_DMA+0x37e>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3c:	d115      	bne.n	8004c6a <HAL_TIM_PWM_Start_DMA+0x3aa>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b06      	cmp	r3, #6
 8004c4e:	d015      	beq.n	8004c7c <HAL_TIM_PWM_Start_DMA+0x3bc>
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c56:	d011      	beq.n	8004c7c <HAL_TIM_PWM_Start_DMA+0x3bc>
      {
        __HAL_TIM_ENABLE(htim);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	e008      	b.n	8004c7c <HAL_TIM_PWM_Start_DMA+0x3bc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0201 	orr.w	r2, r2, #1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	e000      	b.n	8004c7e <HAL_TIM_PWM_Start_DMA+0x3be>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	08005549 	.word	0x08005549
 8004c8c:	080055f1 	.word	0x080055f1
 8004c90:	080054b7 	.word	0x080054b7
 8004c94:	40012c00 	.word	0x40012c00
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800
 8004ca0:	00010007 	.word	0x00010007

08004ca4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b0c      	cmp	r3, #12
 8004cb6:	d855      	bhi.n	8004d64 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cf5 	.word	0x08004cf5
 8004cc4:	08004d65 	.word	0x08004d65
 8004cc8:	08004d65 	.word	0x08004d65
 8004ccc:	08004d65 	.word	0x08004d65
 8004cd0:	08004d11 	.word	0x08004d11
 8004cd4:	08004d65 	.word	0x08004d65
 8004cd8:	08004d65 	.word	0x08004d65
 8004cdc:	08004d65 	.word	0x08004d65
 8004ce0:	08004d2d 	.word	0x08004d2d
 8004ce4:	08004d65 	.word	0x08004d65
 8004ce8:	08004d65 	.word	0x08004d65
 8004cec:	08004d65 	.word	0x08004d65
 8004cf0:	08004d49 	.word	0x08004d49
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7fd fa0c 	bl	8002126 <HAL_DMA_Abort_IT>
      break;
 8004d0e:	e02c      	b.n	8004d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fd f9fe 	bl	8002126 <HAL_DMA_Abort_IT>
      break;
 8004d2a:	e01e      	b.n	8004d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fd f9f0 	bl	8002126 <HAL_DMA_Abort_IT>
      break;
 8004d46:	e010      	b.n	8004d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d56:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fd f9e2 	bl	8002126 <HAL_DMA_Abort_IT>
      break;
 8004d62:	e002      	b.n	8004d6a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      break;
 8004d68:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d176      	bne.n	8004e5e <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2200      	movs	r2, #0
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fff7 	bl	8005d6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a39      	ldr	r2, [pc, #228]	; (8004e68 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d009      	beq.n	8004d9c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a37      	ldr	r2, [pc, #220]	; (8004e6c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_PWM_Stop_DMA+0xfc>
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_TIM_PWM_Stop_DMA+0xfe>
 8004da0:	2300      	movs	r3, #0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d017      	beq.n	8004dd6 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a1a      	ldr	r2, [r3, #32]
 8004dac:	f241 1311 	movw	r3, #4369	; 0x1111
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10f      	bne.n	8004dd6 <HAL_TIM_PWM_Stop_DMA+0x132>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6a1a      	ldr	r2, [r3, #32]
 8004dbc:	f240 4344 	movw	r3, #1092	; 0x444
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d107      	bne.n	8004dd6 <HAL_TIM_PWM_Stop_DMA+0x132>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6a1a      	ldr	r2, [r3, #32]
 8004ddc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10f      	bne.n	8004e06 <HAL_TIM_PWM_Stop_DMA+0x162>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1a      	ldr	r2, [r3, #32]
 8004dec:	f240 4344 	movw	r3, #1092	; 0x444
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d107      	bne.n	8004e06 <HAL_TIM_PWM_Stop_DMA+0x162>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0201 	bic.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_PWM_Stop_DMA+0x172>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e14:	e023      	b.n	8004e5e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b04      	cmp	r3, #4
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_PWM_Stop_DMA+0x182>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e24:	e01b      	b.n	8004e5e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_PWM_Stop_DMA+0x192>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	e013      	b.n	8004e5e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b0c      	cmp	r3, #12
 8004e3a:	d104      	bne.n	8004e46 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e44:	e00b      	b.n	8004e5e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b10      	cmp	r3, #16
 8004e4a:	d104      	bne.n	8004e56 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e54:	e003      	b.n	8004e5e <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40014400 	.word	0x40014400
 8004e70:	40014800 	.word	0x40014800

08004e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01b      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0202 	mvn.w	r2, #2
 8004ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fad1 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 fac3 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7fb fff5 	bl	8000ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0304 	and.w	r3, r3, #4
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d020      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0204 	mvn.w	r2, #4
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 faab 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fa9d 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f7fb ffcf 	bl	8000ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d020      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01b      	beq.n	8004f70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0208 	mvn.w	r2, #8
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2204      	movs	r2, #4
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f003 0303 	and.w	r3, r3, #3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fa85 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa77 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fb ffa9 	bl	8000ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d020      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01b      	beq.n	8004fbc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0210 	mvn.w	r2, #16
 8004f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2208      	movs	r2, #8
 8004f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fa5f 	bl	8005466 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fa51 	bl	8005452 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fb ff83 	bl	8000ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f06f 0201 	mvn.w	r2, #1
 8004fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa2f 	bl	800543e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00c      	beq.n	800500e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8005006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 ffc5 	bl	8005f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00c      	beq.n	8005032 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800502a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 ffbd 	bl	8005fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00c      	beq.n	8005056 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800504e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa1c 	bl	800548e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0220 	mvn.w	r2, #32
 8005072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 ff85 	bl	8005f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507a:	bf00      	nop
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005090:	2300      	movs	r3, #0
 8005092:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e0ff      	b.n	80052a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b14      	cmp	r3, #20
 80050ae:	f200 80f0 	bhi.w	8005292 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	08005293 	.word	0x08005293
 80050c0:	08005293 	.word	0x08005293
 80050c4:	08005293 	.word	0x08005293
 80050c8:	0800514d 	.word	0x0800514d
 80050cc:	08005293 	.word	0x08005293
 80050d0:	08005293 	.word	0x08005293
 80050d4:	08005293 	.word	0x08005293
 80050d8:	0800518f 	.word	0x0800518f
 80050dc:	08005293 	.word	0x08005293
 80050e0:	08005293 	.word	0x08005293
 80050e4:	08005293 	.word	0x08005293
 80050e8:	080051cf 	.word	0x080051cf
 80050ec:	08005293 	.word	0x08005293
 80050f0:	08005293 	.word	0x08005293
 80050f4:	08005293 	.word	0x08005293
 80050f8:	08005211 	.word	0x08005211
 80050fc:	08005293 	.word	0x08005293
 8005100:	08005293 	.word	0x08005293
 8005104:	08005293 	.word	0x08005293
 8005108:	08005251 	.word	0x08005251
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fb10 	bl	8005738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	619a      	str	r2, [r3, #24]
      break;
 800514a:	e0a5      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fb6c 	bl	8005830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6999      	ldr	r1, [r3, #24]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	619a      	str	r2, [r3, #24]
      break;
 800518c:	e084      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fbc5 	bl	8005924 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0208 	orr.w	r2, r2, #8
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0204 	bic.w	r2, r2, #4
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	61da      	str	r2, [r3, #28]
      break;
 80051cc:	e064      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fc1d 	bl	8005a14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69d9      	ldr	r1, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	021a      	lsls	r2, r3, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	61da      	str	r2, [r3, #28]
      break;
 800520e:	e043      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fc5a 	bl	8005ad0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0204 	bic.w	r2, r2, #4
 800523a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800524e:	e023      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 fc92 	bl	8005b80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	021a      	lsls	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005290:	e002      	b.n	8005298 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
      break;
 8005296:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop

080052ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_ConfigClockSource+0x1c>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e0b6      	b.n	8005436 <HAL_TIM_ConfigClockSource+0x18a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80052e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005304:	d03e      	beq.n	8005384 <HAL_TIM_ConfigClockSource+0xd8>
 8005306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530a:	f200 8087 	bhi.w	800541c <HAL_TIM_ConfigClockSource+0x170>
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005312:	f000 8086 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x176>
 8005316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531a:	d87f      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800531c:	2b70      	cmp	r3, #112	; 0x70
 800531e:	d01a      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0xaa>
 8005320:	2b70      	cmp	r3, #112	; 0x70
 8005322:	d87b      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 8005324:	2b60      	cmp	r3, #96	; 0x60
 8005326:	d050      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x11e>
 8005328:	2b60      	cmp	r3, #96	; 0x60
 800532a:	d877      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800532c:	2b50      	cmp	r3, #80	; 0x50
 800532e:	d03c      	beq.n	80053aa <HAL_TIM_ConfigClockSource+0xfe>
 8005330:	2b50      	cmp	r3, #80	; 0x50
 8005332:	d873      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d058      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0x13e>
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d86f      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800533c:	2b30      	cmp	r3, #48	; 0x30
 800533e:	d064      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005340:	2b30      	cmp	r3, #48	; 0x30
 8005342:	d86b      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 8005344:	2b20      	cmp	r3, #32
 8005346:	d060      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005348:	2b20      	cmp	r3, #32
 800534a:	d867      	bhi.n	800541c <HAL_TIM_ConfigClockSource+0x170>
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05c      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005350:	2b10      	cmp	r3, #16
 8005352:	d05a      	beq.n	800540a <HAL_TIM_ConfigClockSource+0x15e>
 8005354:	e062      	b.n	800541c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005366:	f000 fce1 	bl	8005d2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005378:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	609a      	str	r2, [r3, #8]
      break;
 8005382:	e04f      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005394:	f000 fcca 	bl	8005d2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053a6:	609a      	str	r2, [r3, #8]
      break;
 80053a8:	e03c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053b6:	461a      	mov	r2, r3
 80053b8:	f000 fc3c 	bl	8005c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2150      	movs	r1, #80	; 0x50
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 fc95 	bl	8005cf2 <TIM_ITRx_SetConfig>
      break;
 80053c8:	e02c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053d6:	461a      	mov	r2, r3
 80053d8:	f000 fc5b 	bl	8005c92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2160      	movs	r1, #96	; 0x60
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fc85 	bl	8005cf2 <TIM_ITRx_SetConfig>
      break;
 80053e8:	e01c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f6:	461a      	mov	r2, r3
 80053f8:	f000 fc1c 	bl	8005c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2140      	movs	r1, #64	; 0x40
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fc75 	bl	8005cf2 <TIM_ITRx_SetConfig>
      break;
 8005408:	e00c      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4619      	mov	r1, r3
 8005414:	4610      	mov	r0, r2
 8005416:	f000 fc6c 	bl	8005cf2 <TIM_ITRx_SetConfig>
      break;
 800541a:	e003      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	73fb      	strb	r3, [r7, #15]
      break;
 8005420:	e000      	b.n	8005424 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005422:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005434:	7bfb      	ldrb	r3, [r7, #15]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d107      	bne.n	80054de <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2201      	movs	r2, #1
 80054d2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054dc:	e02a      	b.n	8005534 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d107      	bne.n	80054f8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2202      	movs	r2, #2
 80054ec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f6:	e01d      	b.n	8005534 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d107      	bne.n	8005512 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005510:	e010      	b.n	8005534 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	d107      	bne.n	800552c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2208      	movs	r2, #8
 8005520:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800552a:	e003      	b.n	8005534 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f7ff ffb4 	bl	80054a2 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	771a      	strb	r2, [r3, #28]
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d10b      	bne.n	8005578 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d136      	bne.n	80055dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005576:	e031      	b.n	80055dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	429a      	cmp	r2, r3
 8005580:	d10b      	bne.n	800559a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2202      	movs	r2, #2
 8005586:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d125      	bne.n	80055dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005598:	e020      	b.n	80055dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d10b      	bne.n	80055bc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2204      	movs	r2, #4
 80055a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d114      	bne.n	80055dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ba:	e00f      	b.n	80055dc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d10a      	bne.n	80055dc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2208      	movs	r2, #8
 80055ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d103      	bne.n	80055dc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7fb fc6d 	bl	8000ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d103      	bne.n	8005610 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	771a      	strb	r2, [r3, #28]
 800560e:	e019      	b.n	8005644 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d103      	bne.n	8005622 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2202      	movs	r2, #2
 800561e:	771a      	strb	r2, [r3, #28]
 8005620:	e010      	b.n	8005644 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d103      	bne.n	8005634 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2204      	movs	r2, #4
 8005630:	771a      	strb	r2, [r3, #28]
 8005632:	e007      	b.n	8005644 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d102      	bne.n	8005644 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2208      	movs	r2, #8
 8005642:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f7ff ff18 	bl	800547a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a30      	ldr	r2, [pc, #192]	; (800572c <TIM_Base_SetConfig+0xd4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x20>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a27      	ldr	r2, [pc, #156]	; (800572c <TIM_Base_SetConfig+0xd4>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0x52>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0x52>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a24      	ldr	r2, [pc, #144]	; (8005730 <TIM_Base_SetConfig+0xd8>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0x52>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a23      	ldr	r2, [pc, #140]	; (8005734 <TIM_Base_SetConfig+0xdc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a12      	ldr	r2, [pc, #72]	; (800572c <TIM_Base_SetConfig+0xd4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_Base_SetConfig+0xa0>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a11      	ldr	r2, [pc, #68]	; (8005730 <TIM_Base_SetConfig+0xd8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_Base_SetConfig+0xa0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a10      	ldr	r2, [pc, #64]	; (8005734 <TIM_Base_SetConfig+0xdc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d103      	bne.n	8005700 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d105      	bne.n	800571e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	611a      	str	r2, [r3, #16]
  }
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f023 0201 	bic.w	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 0302 	bic.w	r3, r3, #2
 8005784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a24      	ldr	r2, [pc, #144]	; (8005824 <TIM_OC1_SetConfig+0xec>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d007      	beq.n	80057a8 <TIM_OC1_SetConfig+0x70>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a23      	ldr	r2, [pc, #140]	; (8005828 <TIM_OC1_SetConfig+0xf0>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC1_SetConfig+0x70>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a22      	ldr	r2, [pc, #136]	; (800582c <TIM_OC1_SetConfig+0xf4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10c      	bne.n	80057c2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0308 	bic.w	r3, r3, #8
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a17      	ldr	r2, [pc, #92]	; (8005824 <TIM_OC1_SetConfig+0xec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d007      	beq.n	80057da <TIM_OC1_SetConfig+0xa2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a17      	ldr	r2, [pc, #92]	; (800582c <TIM_OC1_SetConfig+0xf4>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d003      	beq.n	80057da <TIM_OC1_SetConfig+0xa2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <TIM_OC1_SetConfig+0xf0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d111      	bne.n	80057fe <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	621a      	str	r2, [r3, #32]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40012c00 	.word	0x40012c00
 8005828:	40014800 	.word	0x40014800
 800582c:	40014400 	.word	0x40014400

08005830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005830:	b480      	push	{r7}
 8005832:	b087      	sub	sp, #28
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	f023 0210 	bic.w	r2, r3, #16
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800585e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	021b      	lsls	r3, r3, #8
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	4313      	orrs	r3, r2
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f023 0320 	bic.w	r3, r3, #32
 800587e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a22      	ldr	r2, [pc, #136]	; (8005918 <TIM_OC2_SetConfig+0xe8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d10d      	bne.n	80058b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	011b      	lsls	r3, r3, #4
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a19      	ldr	r2, [pc, #100]	; (8005918 <TIM_OC2_SetConfig+0xe8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d007      	beq.n	80058c8 <TIM_OC2_SetConfig+0x98>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a18      	ldr	r2, [pc, #96]	; (800591c <TIM_OC2_SetConfig+0xec>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC2_SetConfig+0x98>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a17      	ldr	r2, [pc, #92]	; (8005920 <TIM_OC2_SetConfig+0xf0>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d113      	bne.n	80058f0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	699b      	ldr	r3, [r3, #24]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	621a      	str	r2, [r3, #32]
}
 800590a:	bf00      	nop
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	40012c00 	.word	0x40012c00
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800

08005924 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f023 0303 	bic.w	r3, r3, #3
 800595e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <TIM_OC3_SetConfig+0xe4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800598c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <TIM_OC3_SetConfig+0xe4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d007      	beq.n	80059ba <TIM_OC3_SetConfig+0x96>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <TIM_OC3_SetConfig+0xe8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_OC3_SetConfig+0x96>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <TIM_OC3_SetConfig+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d113      	bne.n	80059e2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	621a      	str	r2, [r3, #32]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800

08005a14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b087      	sub	sp, #28
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a14      	ldr	r2, [pc, #80]	; (8005ac4 <TIM_OC4_SetConfig+0xb0>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_OC4_SetConfig+0x74>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a13      	ldr	r2, [pc, #76]	; (8005ac8 <TIM_OC4_SetConfig+0xb4>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_OC4_SetConfig+0x74>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a12      	ldr	r2, [pc, #72]	; (8005acc <TIM_OC4_SetConfig+0xb8>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d109      	bne.n	8005a9c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	019b      	lsls	r3, r3, #6
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	40012c00 	.word	0x40012c00
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800

08005ad0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a13      	ldr	r2, [pc, #76]	; (8005b74 <TIM_OC5_SetConfig+0xa4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <TIM_OC5_SetConfig+0x6a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a12      	ldr	r2, [pc, #72]	; (8005b78 <TIM_OC5_SetConfig+0xa8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_OC5_SetConfig+0x6a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a11      	ldr	r2, [pc, #68]	; (8005b7c <TIM_OC5_SetConfig+0xac>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d109      	bne.n	8005b4e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	621a      	str	r2, [r3, #32]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	40012c00 	.word	0x40012c00
 8005b78:	40014400 	.word	0x40014400
 8005b7c:	40014800 	.word	0x40014800

08005b80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	051b      	lsls	r3, r3, #20
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <TIM_OC6_SetConfig+0xa8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d007      	beq.n	8005bec <TIM_OC6_SetConfig+0x6c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a13      	ldr	r2, [pc, #76]	; (8005c2c <TIM_OC6_SetConfig+0xac>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d003      	beq.n	8005bec <TIM_OC6_SetConfig+0x6c>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a12      	ldr	r2, [pc, #72]	; (8005c30 <TIM_OC6_SetConfig+0xb0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d109      	bne.n	8005c00 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	029b      	lsls	r3, r3, #10
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	621a      	str	r2, [r3, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40012c00 	.word	0x40012c00
 8005c2c:	40014400 	.word	0x40014400
 8005c30:	40014800 	.word	0x40014800

08005c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	f023 0201 	bic.w	r2, r3, #1
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f023 030a 	bic.w	r3, r3, #10
 8005c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	621a      	str	r2, [r3, #32]
}
 8005c86:	bf00      	nop
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b087      	sub	sp, #28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f023 0210 	bic.w	r2, r3, #16
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	031b      	lsls	r3, r3, #12
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	693a      	ldr	r2, [r7, #16]
 8005cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b085      	sub	sp, #20
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f043 0307 	orr.w	r3, r3, #7
 8005d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	609a      	str	r2, [r3, #8]
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
 8005d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	609a      	str	r2, [r3, #8]
}
 8005d60:	bf00      	nop
 8005d62:	371c      	adds	r7, #28
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2201      	movs	r2, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1a      	ldr	r2, [r3, #32]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	401a      	ands	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1a      	ldr	r2, [r3, #32]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	fa01 f303 	lsl.w	r3, r1, r3
 8005da4:	431a      	orrs	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d101      	bne.n	8005dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e04a      	b.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d108      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a12      	ldr	r2, [pc, #72]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d10c      	bne.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40012c00 	.word	0x40012c00

08005e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d101      	bne.n	8005e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e90:	2302      	movs	r3, #2
 8005e92:	e06e      	b.n	8005f72 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	041b      	lsls	r3, r3, #16
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d11c      	bne.n	8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	051b      	lsls	r3, r3, #20
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40012c00 	.word	0x40012c00

08005f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <LL_RCC_GetUSARTClockSource>:
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8005fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fcc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4013      	ands	r3, r2
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <LL_RCC_GetLPUARTClockSource>:
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4013      	ands	r3, r2
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d101      	bne.n	8006012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e042      	b.n	8006098 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fb fc19 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2224      	movs	r2, #36	; 0x24
 800602e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0201 	bic.w	r2, r2, #1
 8006040:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa50 	bl	80064f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f825 	bl	80060a0 <UART_SetConfig>
 8006056:	4603      	mov	r3, r0
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e01b      	b.n	8006098 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800606e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800607e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 facf 	bl	8006634 <UART_CheckIdleState>
 8006096:	4603      	mov	r3, r0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a4:	b08c      	sub	sp, #48	; 0x30
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	431a      	orrs	r2, r3
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	431a      	orrs	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	4baf      	ldr	r3, [pc, #700]	; (800638c <UART_SetConfig+0x2ec>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060d8:	430b      	orrs	r3, r1
 80060da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	68da      	ldr	r2, [r3, #12]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4aa4      	ldr	r2, [pc, #656]	; (8006390 <UART_SetConfig+0x2f0>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006108:	4313      	orrs	r3, r2
 800610a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006116:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006120:	430b      	orrs	r3, r1
 8006122:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	f023 010f 	bic.w	r1, r3, #15
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a95      	ldr	r2, [pc, #596]	; (8006394 <UART_SetConfig+0x2f4>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d125      	bne.n	8006190 <UART_SetConfig+0xf0>
 8006144:	2003      	movs	r0, #3
 8006146:	f7ff ff3b 	bl	8005fc0 <LL_RCC_GetUSARTClockSource>
 800614a:	4603      	mov	r3, r0
 800614c:	2b03      	cmp	r3, #3
 800614e:	d81b      	bhi.n	8006188 <UART_SetConfig+0xe8>
 8006150:	a201      	add	r2, pc, #4	; (adr r2, 8006158 <UART_SetConfig+0xb8>)
 8006152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006156:	bf00      	nop
 8006158:	08006169 	.word	0x08006169
 800615c:	08006179 	.word	0x08006179
 8006160:	08006171 	.word	0x08006171
 8006164:	08006181 	.word	0x08006181
 8006168:	2301      	movs	r3, #1
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800616e:	e042      	b.n	80061f6 <UART_SetConfig+0x156>
 8006170:	2302      	movs	r3, #2
 8006172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006176:	e03e      	b.n	80061f6 <UART_SetConfig+0x156>
 8006178:	2304      	movs	r3, #4
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617e:	e03a      	b.n	80061f6 <UART_SetConfig+0x156>
 8006180:	2308      	movs	r3, #8
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006186:	e036      	b.n	80061f6 <UART_SetConfig+0x156>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618e:	e032      	b.n	80061f6 <UART_SetConfig+0x156>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a7e      	ldr	r2, [pc, #504]	; (8006390 <UART_SetConfig+0x2f0>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d12a      	bne.n	80061f0 <UART_SetConfig+0x150>
 800619a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800619e:	f7ff ff1f 	bl	8005fe0 <LL_RCC_GetLPUARTClockSource>
 80061a2:	4603      	mov	r3, r0
 80061a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a8:	d01a      	beq.n	80061e0 <UART_SetConfig+0x140>
 80061aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061ae:	d81b      	bhi.n	80061e8 <UART_SetConfig+0x148>
 80061b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b4:	d00c      	beq.n	80061d0 <UART_SetConfig+0x130>
 80061b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ba:	d815      	bhi.n	80061e8 <UART_SetConfig+0x148>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <UART_SetConfig+0x128>
 80061c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061c4:	d008      	beq.n	80061d8 <UART_SetConfig+0x138>
 80061c6:	e00f      	b.n	80061e8 <UART_SetConfig+0x148>
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ce:	e012      	b.n	80061f6 <UART_SetConfig+0x156>
 80061d0:	2302      	movs	r3, #2
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d6:	e00e      	b.n	80061f6 <UART_SetConfig+0x156>
 80061d8:	2304      	movs	r3, #4
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061de:	e00a      	b.n	80061f6 <UART_SetConfig+0x156>
 80061e0:	2308      	movs	r3, #8
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e6:	e006      	b.n	80061f6 <UART_SetConfig+0x156>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ee:	e002      	b.n	80061f6 <UART_SetConfig+0x156>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a65      	ldr	r2, [pc, #404]	; (8006390 <UART_SetConfig+0x2f0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	f040 8097 	bne.w	8006330 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006202:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006206:	2b08      	cmp	r3, #8
 8006208:	d823      	bhi.n	8006252 <UART_SetConfig+0x1b2>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0x170>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006235 	.word	0x08006235
 8006214:	08006253 	.word	0x08006253
 8006218:	0800623d 	.word	0x0800623d
 800621c:	08006253 	.word	0x08006253
 8006220:	08006243 	.word	0x08006243
 8006224:	08006253 	.word	0x08006253
 8006228:	08006253 	.word	0x08006253
 800622c:	08006253 	.word	0x08006253
 8006230:	0800624b 	.word	0x0800624b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fd fc72 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
 8006238:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800623a:	e010      	b.n	800625e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800623c:	4b56      	ldr	r3, [pc, #344]	; (8006398 <UART_SetConfig+0x2f8>)
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006240:	e00d      	b.n	800625e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006242:	f7fd fbe9 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8006246:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006248:	e009      	b.n	800625e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006250:	e005      	b.n	800625e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800625c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 812b 	beq.w	80064bc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626a:	4a4c      	ldr	r2, [pc, #304]	; (800639c <UART_SetConfig+0x2fc>)
 800626c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006270:	461a      	mov	r2, r3
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	fbb3 f3f2 	udiv	r3, r3, r2
 8006278:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	4613      	mov	r3, r2
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	4413      	add	r3, r2
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	429a      	cmp	r2, r3
 8006288:	d305      	bcc.n	8006296 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	429a      	cmp	r2, r3
 8006294:	d903      	bls.n	800629e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800629c:	e10e      	b.n	80064bc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	2200      	movs	r2, #0
 80062a2:	60bb      	str	r3, [r7, #8]
 80062a4:	60fa      	str	r2, [r7, #12]
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	4a3c      	ldr	r2, [pc, #240]	; (800639c <UART_SetConfig+0x2fc>)
 80062ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2200      	movs	r2, #0
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062c0:	f7fa fc4c 	bl	8000b5c <__aeabi_uldivmod>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4610      	mov	r0, r2
 80062ca:	4619      	mov	r1, r3
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	020b      	lsls	r3, r1, #8
 80062d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062da:	0202      	lsls	r2, r0, #8
 80062dc:	6979      	ldr	r1, [r7, #20]
 80062de:	6849      	ldr	r1, [r1, #4]
 80062e0:	0849      	lsrs	r1, r1, #1
 80062e2:	2000      	movs	r0, #0
 80062e4:	460c      	mov	r4, r1
 80062e6:	4605      	mov	r5, r0
 80062e8:	eb12 0804 	adds.w	r8, r2, r4
 80062ec:	eb43 0905 	adc.w	r9, r3, r5
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	469a      	mov	sl, r3
 80062f8:	4693      	mov	fp, r2
 80062fa:	4652      	mov	r2, sl
 80062fc:	465b      	mov	r3, fp
 80062fe:	4640      	mov	r0, r8
 8006300:	4649      	mov	r1, r9
 8006302:	f7fa fc2b 	bl	8000b5c <__aeabi_uldivmod>
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4613      	mov	r3, r2
 800630c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006314:	d308      	bcc.n	8006328 <UART_SetConfig+0x288>
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800631c:	d204      	bcs.n	8006328 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6a3a      	ldr	r2, [r7, #32]
 8006324:	60da      	str	r2, [r3, #12]
 8006326:	e0c9      	b.n	80064bc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800632e:	e0c5      	b.n	80064bc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006338:	d16d      	bne.n	8006416 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800633a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800633e:	3b01      	subs	r3, #1
 8006340:	2b07      	cmp	r3, #7
 8006342:	d82d      	bhi.n	80063a0 <UART_SetConfig+0x300>
 8006344:	a201      	add	r2, pc, #4	; (adr r2, 800634c <UART_SetConfig+0x2ac>)
 8006346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634a:	bf00      	nop
 800634c:	0800636d 	.word	0x0800636d
 8006350:	08006375 	.word	0x08006375
 8006354:	080063a1 	.word	0x080063a1
 8006358:	0800637b 	.word	0x0800637b
 800635c:	080063a1 	.word	0x080063a1
 8006360:	080063a1 	.word	0x080063a1
 8006364:	080063a1 	.word	0x080063a1
 8006368:	08006383 	.word	0x08006383
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800636c:	f7fd fbec 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 8006370:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006372:	e01b      	b.n	80063ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006374:	4b08      	ldr	r3, [pc, #32]	; (8006398 <UART_SetConfig+0x2f8>)
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006378:	e018      	b.n	80063ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800637a:	f7fd fb4d 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 800637e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006380:	e014      	b.n	80063ac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006386:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006388:	e010      	b.n	80063ac <UART_SetConfig+0x30c>
 800638a:	bf00      	nop
 800638c:	cfff69f3 	.word	0xcfff69f3
 8006390:	40008000 	.word	0x40008000
 8006394:	40013800 	.word	0x40013800
 8006398:	00f42400 	.word	0x00f42400
 800639c:	08007e24 	.word	0x08007e24
      default:
        pclk = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 8084 	beq.w	80064bc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	4a4b      	ldr	r2, [pc, #300]	; (80064e8 <UART_SetConfig+0x448>)
 80063ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063be:	461a      	mov	r2, r3
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80063c6:	005a      	lsls	r2, r3, #1
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	441a      	add	r2, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063d8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	2b0f      	cmp	r3, #15
 80063de:	d916      	bls.n	800640e <UART_SetConfig+0x36e>
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e6:	d212      	bcs.n	800640e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	f023 030f 	bic.w	r3, r3, #15
 80063f0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f003 0307 	and.w	r3, r3, #7
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	8bfb      	ldrh	r3, [r7, #30]
 8006400:	4313      	orrs	r3, r2
 8006402:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	8bfa      	ldrh	r2, [r7, #30]
 800640a:	60da      	str	r2, [r3, #12]
 800640c:	e056      	b.n	80064bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006414:	e052      	b.n	80064bc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006416:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800641a:	3b01      	subs	r3, #1
 800641c:	2b07      	cmp	r3, #7
 800641e:	d822      	bhi.n	8006466 <UART_SetConfig+0x3c6>
 8006420:	a201      	add	r2, pc, #4	; (adr r2, 8006428 <UART_SetConfig+0x388>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	08006449 	.word	0x08006449
 800642c:	08006451 	.word	0x08006451
 8006430:	08006467 	.word	0x08006467
 8006434:	08006457 	.word	0x08006457
 8006438:	08006467 	.word	0x08006467
 800643c:	08006467 	.word	0x08006467
 8006440:	08006467 	.word	0x08006467
 8006444:	0800645f 	.word	0x0800645f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006448:	f7fd fb7e 	bl	8003b48 <HAL_RCC_GetPCLK2Freq>
 800644c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800644e:	e010      	b.n	8006472 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006450:	4b26      	ldr	r3, [pc, #152]	; (80064ec <UART_SetConfig+0x44c>)
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006454:	e00d      	b.n	8006472 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006456:	f7fd fadf 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 800645a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800645c:	e009      	b.n	8006472 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006464:	e005      	b.n	8006472 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006470:	bf00      	nop
    }

    if (pclk != 0U)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	2b00      	cmp	r3, #0
 8006476:	d021      	beq.n	80064bc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <UART_SetConfig+0x448>)
 800647e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006482:	461a      	mov	r2, r3
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	fbb3 f2f2 	udiv	r2, r3, r2
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	441a      	add	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d909      	bls.n	80064b6 <UART_SetConfig+0x416>
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a8:	d205      	bcs.n	80064b6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	e002      	b.n	80064bc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3730      	adds	r7, #48	; 0x30
 80064e0:	46bd      	mov	sp, r7
 80064e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e6:	bf00      	nop
 80064e8:	08007e24 	.word	0x08007e24
 80064ec:	00f42400 	.word	0x00f42400

080064f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00a      	beq.n	800651a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00a      	beq.n	800655e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	430a      	orrs	r2, r1
 800655c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	f003 0304 	and.w	r3, r3, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00a      	beq.n	80065a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	430a      	orrs	r2, r1
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01a      	beq.n	8006606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	430a      	orrs	r2, r1
 80065e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ee:	d10a      	bne.n	8006606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b098      	sub	sp, #96	; 0x60
 8006638:	af02      	add	r7, sp, #8
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006644:	f7fb fb00 	bl	8001c48 <HAL_GetTick>
 8006648:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b08      	cmp	r3, #8
 8006656:	d12f      	bne.n	80066b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006660:	2200      	movs	r2, #0
 8006662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f88e 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d022      	beq.n	80066b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	e853 3f00 	ldrex	r3, [r3]
 800667e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006686:	653b      	str	r3, [r7, #80]	; 0x50
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	461a      	mov	r2, r3
 800668e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006690:	647b      	str	r3, [r7, #68]	; 0x44
 8006692:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006694:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006698:	e841 2300 	strex	r3, r2, [r1]
 800669c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800669e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e6      	bne.n	8006672 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e063      	b.n	8006780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0304 	and.w	r3, r3, #4
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d149      	bne.n	800675a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ce:	2200      	movs	r2, #0
 80066d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f857 	bl	8006788 <UART_WaitOnFlagUntilTimeout>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d03c      	beq.n	800675a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	623b      	str	r3, [r7, #32]
   return(result);
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006700:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006706:	e841 2300 	strex	r3, r2, [r1]
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1e6      	bne.n	80066e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3308      	adds	r3, #8
 8006718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60fb      	str	r3, [r7, #12]
   return(result);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f023 0301 	bic.w	r3, r3, #1
 8006728:	64bb      	str	r3, [r7, #72]	; 0x48
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3308      	adds	r3, #8
 8006730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006732:	61fa      	str	r2, [r7, #28]
 8006734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	617b      	str	r3, [r7, #20]
   return(result);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e012      	b.n	8006780 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2220      	movs	r2, #32
 800675e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3758      	adds	r7, #88	; 0x58
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	603b      	str	r3, [r7, #0]
 8006794:	4613      	mov	r3, r2
 8006796:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006798:	e04f      	b.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d04b      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a2:	f7fb fa51 	bl	8001c48 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d302      	bcc.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e04e      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d037      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b80      	cmp	r3, #128	; 0x80
 80067ce:	d034      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d031      	beq.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d110      	bne.n	8006806 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2208      	movs	r2, #8
 80067ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f838 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2208      	movs	r2, #8
 80067f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e029      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006814:	d111      	bne.n	800683a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800681e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f81e 	bl	8006862 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e00f      	b.n	800685a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4013      	ands	r3, r2
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	429a      	cmp	r2, r3
 8006848:	bf0c      	ite	eq
 800684a:	2301      	moveq	r3, #1
 800684c:	2300      	movne	r3, #0
 800684e:	b2db      	uxtb	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	79fb      	ldrb	r3, [r7, #7]
 8006854:	429a      	cmp	r2, r3
 8006856:	d0a0      	beq.n	800679a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006862:	b480      	push	{r7}
 8006864:	b095      	sub	sp, #84	; 0x54
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800687e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006888:	643b      	str	r3, [r7, #64]	; 0x40
 800688a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800688e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	3308      	adds	r3, #8
 80068a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	e853 3f00 	ldrex	r3, [r3]
 80068aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b2:	f023 0301 	bic.w	r3, r3, #1
 80068b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	3308      	adds	r3, #8
 80068be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068c8:	e841 2300 	strex	r3, r2, [r1]
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1e3      	bne.n	800689c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d118      	bne.n	800690e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	f023 0310 	bic.w	r3, r3, #16
 80068f0:	647b      	str	r3, [r7, #68]	; 0x44
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068fa:	61bb      	str	r3, [r7, #24]
 80068fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6979      	ldr	r1, [r7, #20]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	613b      	str	r3, [r7, #16]
   return(result);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006922:	bf00      	nop
 8006924:	3754      	adds	r7, #84	; 0x54
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_UARTEx_DisableFifoMode+0x16>
 8006940:	2302      	movs	r3, #2
 8006942:	e027      	b.n	8006994 <HAL_UARTEx_DisableFifoMode+0x66>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2224      	movs	r2, #36	; 0x24
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0201 	bic.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006972:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e02d      	b.n	8006a14 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2224      	movs	r2, #36	; 0x24
 80069c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f84f 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d101      	bne.n	8006a34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a30:	2302      	movs	r3, #2
 8006a32:	e02d      	b.n	8006a90 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2224      	movs	r2, #36	; 0x24
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f811 	bl	8006a98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d108      	bne.n	8006aba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ab8:	e031      	b.n	8006b1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aba:	2308      	movs	r3, #8
 8006abc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006abe:	2308      	movs	r3, #8
 8006ac0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	0e5b      	lsrs	r3, r3, #25
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	0f5b      	lsrs	r3, r3, #29
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	7b3a      	ldrb	r2, [r7, #12]
 8006ae6:	4911      	ldr	r1, [pc, #68]	; (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006ae8:	5c8a      	ldrb	r2, [r1, r2]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aee:	7b3a      	ldrb	r2, [r7, #12]
 8006af0:	490f      	ldr	r1, [pc, #60]	; (8006b30 <UARTEx_SetNbDataToProcess+0x98>)
 8006af2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	7b7a      	ldrb	r2, [r7, #13]
 8006b04:	4909      	ldr	r1, [pc, #36]	; (8006b2c <UARTEx_SetNbDataToProcess+0x94>)
 8006b06:	5c8a      	ldrb	r2, [r1, r2]
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b0c:	7b7a      	ldrb	r2, [r7, #13]
 8006b0e:	4908      	ldr	r1, [pc, #32]	; (8006b30 <UARTEx_SetNbDataToProcess+0x98>)
 8006b10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b12:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b1e:	bf00      	nop
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	08007e3c 	.word	0x08007e3c
 8006b30:	08007e44 	.word	0x08007e44

08006b34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006b3c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006b40:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4013      	ands	r3, r2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	1d3b      	adds	r3, r7, #4
 8006b74:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <memset>:
 8006ba6:	4402      	add	r2, r0
 8006ba8:	4603      	mov	r3, r0
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d100      	bne.n	8006bb0 <memset+0xa>
 8006bae:	4770      	bx	lr
 8006bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8006bb4:	e7f9      	b.n	8006baa <memset+0x4>
	...

08006bb8 <__libc_init_array>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	4d0d      	ldr	r5, [pc, #52]	; (8006bf0 <__libc_init_array+0x38>)
 8006bbc:	4c0d      	ldr	r4, [pc, #52]	; (8006bf4 <__libc_init_array+0x3c>)
 8006bbe:	1b64      	subs	r4, r4, r5
 8006bc0:	10a4      	asrs	r4, r4, #2
 8006bc2:	2600      	movs	r6, #0
 8006bc4:	42a6      	cmp	r6, r4
 8006bc6:	d109      	bne.n	8006bdc <__libc_init_array+0x24>
 8006bc8:	4d0b      	ldr	r5, [pc, #44]	; (8006bf8 <__libc_init_array+0x40>)
 8006bca:	4c0c      	ldr	r4, [pc, #48]	; (8006bfc <__libc_init_array+0x44>)
 8006bcc:	f001 f8b8 	bl	8007d40 <_init>
 8006bd0:	1b64      	subs	r4, r4, r5
 8006bd2:	10a4      	asrs	r4, r4, #2
 8006bd4:	2600      	movs	r6, #0
 8006bd6:	42a6      	cmp	r6, r4
 8006bd8:	d105      	bne.n	8006be6 <__libc_init_array+0x2e>
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be0:	4798      	blx	r3
 8006be2:	3601      	adds	r6, #1
 8006be4:	e7ee      	b.n	8006bc4 <__libc_init_array+0xc>
 8006be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bea:	4798      	blx	r3
 8006bec:	3601      	adds	r6, #1
 8006bee:	e7f2      	b.n	8006bd6 <__libc_init_array+0x1e>
 8006bf0:	08008030 	.word	0x08008030
 8006bf4:	08008030 	.word	0x08008030
 8006bf8:	08008030 	.word	0x08008030
 8006bfc:	08008034 	.word	0x08008034

08006c00 <tan>:
 8006c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c02:	ec53 2b10 	vmov	r2, r3, d0
 8006c06:	4816      	ldr	r0, [pc, #88]	; (8006c60 <tan+0x60>)
 8006c08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006c0c:	4281      	cmp	r1, r0
 8006c0e:	dc07      	bgt.n	8006c20 <tan+0x20>
 8006c10:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8006c58 <tan+0x58>
 8006c14:	2001      	movs	r0, #1
 8006c16:	b005      	add	sp, #20
 8006c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c1c:	f000 b824 	b.w	8006c68 <__kernel_tan>
 8006c20:	4810      	ldr	r0, [pc, #64]	; (8006c64 <tan+0x64>)
 8006c22:	4281      	cmp	r1, r0
 8006c24:	dd09      	ble.n	8006c3a <tan+0x3a>
 8006c26:	ee10 0a10 	vmov	r0, s0
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	f7f9 faac 	bl	8000188 <__aeabi_dsub>
 8006c30:	ec41 0b10 	vmov	d0, r0, r1
 8006c34:	b005      	add	sp, #20
 8006c36:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c3a:	4668      	mov	r0, sp
 8006c3c:	f000 fa20 	bl	8007080 <__ieee754_rem_pio2>
 8006c40:	0040      	lsls	r0, r0, #1
 8006c42:	f000 0002 	and.w	r0, r0, #2
 8006c46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c4a:	ed9d 0b00 	vldr	d0, [sp]
 8006c4e:	f1c0 0001 	rsb	r0, r0, #1
 8006c52:	f000 f809 	bl	8006c68 <__kernel_tan>
 8006c56:	e7ed      	b.n	8006c34 <tan+0x34>
	...
 8006c60:	3fe921fb 	.word	0x3fe921fb
 8006c64:	7fefffff 	.word	0x7fefffff

08006c68 <__kernel_tan>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	ed2d 8b06 	vpush	{d8-d10}
 8006c70:	ec5b ab10 	vmov	sl, fp, d0
 8006c74:	4be0      	ldr	r3, [pc, #896]	; (8006ff8 <__kernel_tan+0x390>)
 8006c76:	b083      	sub	sp, #12
 8006c78:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006c7c:	429f      	cmp	r7, r3
 8006c7e:	ec59 8b11 	vmov	r8, r9, d1
 8006c82:	4606      	mov	r6, r0
 8006c84:	f8cd b000 	str.w	fp, [sp]
 8006c88:	dc61      	bgt.n	8006d4e <__kernel_tan+0xe6>
 8006c8a:	ee10 0a10 	vmov	r0, s0
 8006c8e:	4659      	mov	r1, fp
 8006c90:	f7f9 fecc 	bl	8000a2c <__aeabi_d2iz>
 8006c94:	4605      	mov	r5, r0
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f040 8083 	bne.w	8006da2 <__kernel_tan+0x13a>
 8006c9c:	1c73      	adds	r3, r6, #1
 8006c9e:	4652      	mov	r2, sl
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	433b      	orrs	r3, r7
 8006ca4:	d112      	bne.n	8006ccc <__kernel_tan+0x64>
 8006ca6:	ec4b ab10 	vmov	d0, sl, fp
 8006caa:	f000 fbef 	bl	800748c <fabs>
 8006cae:	49d3      	ldr	r1, [pc, #844]	; (8006ffc <__kernel_tan+0x394>)
 8006cb0:	ec53 2b10 	vmov	r2, r3, d0
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	f7f9 fd49 	bl	800074c <__aeabi_ddiv>
 8006cba:	4682      	mov	sl, r0
 8006cbc:	468b      	mov	fp, r1
 8006cbe:	ec4b ab10 	vmov	d0, sl, fp
 8006cc2:	b003      	add	sp, #12
 8006cc4:	ecbd 8b06 	vpop	{d8-d10}
 8006cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ccc:	2e01      	cmp	r6, #1
 8006cce:	d0f6      	beq.n	8006cbe <__kernel_tan+0x56>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	4659      	mov	r1, fp
 8006cd8:	f7f9 fa58 	bl	800018c <__adddf3>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	460f      	mov	r7, r1
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	49c6      	ldr	r1, [pc, #792]	; (8007000 <__kernel_tan+0x398>)
 8006ce6:	f7f9 fd31 	bl	800074c <__aeabi_ddiv>
 8006cea:	e9cd 0100 	strd	r0, r1, [sp]
 8006cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cf2:	462e      	mov	r6, r5
 8006cf4:	4652      	mov	r2, sl
 8006cf6:	462c      	mov	r4, r5
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	461d      	mov	r5, r3
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	465b      	mov	r3, fp
 8006d00:	f7f9 fa42 	bl	8000188 <__aeabi_dsub>
 8006d04:	4602      	mov	r2, r0
 8006d06:	460b      	mov	r3, r1
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	f7f9 fa3c 	bl	8000188 <__aeabi_dsub>
 8006d10:	4632      	mov	r2, r6
 8006d12:	462b      	mov	r3, r5
 8006d14:	f7f9 fbf0 	bl	80004f8 <__aeabi_dmul>
 8006d18:	4632      	mov	r2, r6
 8006d1a:	4680      	mov	r8, r0
 8006d1c:	4689      	mov	r9, r1
 8006d1e:	462b      	mov	r3, r5
 8006d20:	4630      	mov	r0, r6
 8006d22:	4639      	mov	r1, r7
 8006d24:	f7f9 fbe8 	bl	80004f8 <__aeabi_dmul>
 8006d28:	4bb4      	ldr	r3, [pc, #720]	; (8006ffc <__kernel_tan+0x394>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f7f9 fa2e 	bl	800018c <__adddf3>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4640      	mov	r0, r8
 8006d36:	4649      	mov	r1, r9
 8006d38:	f7f9 fa28 	bl	800018c <__adddf3>
 8006d3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d40:	f7f9 fbda 	bl	80004f8 <__aeabi_dmul>
 8006d44:	4622      	mov	r2, r4
 8006d46:	462b      	mov	r3, r5
 8006d48:	f7f9 fa20 	bl	800018c <__adddf3>
 8006d4c:	e7b5      	b.n	8006cba <__kernel_tan+0x52>
 8006d4e:	4bad      	ldr	r3, [pc, #692]	; (8007004 <__kernel_tan+0x39c>)
 8006d50:	429f      	cmp	r7, r3
 8006d52:	dd26      	ble.n	8006da2 <__kernel_tan+0x13a>
 8006d54:	9b00      	ldr	r3, [sp, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da09      	bge.n	8006d6e <__kernel_tan+0x106>
 8006d5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d5e:	469b      	mov	fp, r3
 8006d60:	ee10 aa10 	vmov	sl, s0
 8006d64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d68:	ee11 8a10 	vmov	r8, s2
 8006d6c:	4699      	mov	r9, r3
 8006d6e:	4652      	mov	r2, sl
 8006d70:	465b      	mov	r3, fp
 8006d72:	a183      	add	r1, pc, #524	; (adr r1, 8006f80 <__kernel_tan+0x318>)
 8006d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d78:	f7f9 fa06 	bl	8000188 <__aeabi_dsub>
 8006d7c:	4642      	mov	r2, r8
 8006d7e:	464b      	mov	r3, r9
 8006d80:	4604      	mov	r4, r0
 8006d82:	460d      	mov	r5, r1
 8006d84:	a180      	add	r1, pc, #512	; (adr r1, 8006f88 <__kernel_tan+0x320>)
 8006d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d8a:	f7f9 f9fd 	bl	8000188 <__aeabi_dsub>
 8006d8e:	4622      	mov	r2, r4
 8006d90:	462b      	mov	r3, r5
 8006d92:	f7f9 f9fb 	bl	800018c <__adddf3>
 8006d96:	f04f 0800 	mov.w	r8, #0
 8006d9a:	4682      	mov	sl, r0
 8006d9c:	468b      	mov	fp, r1
 8006d9e:	f04f 0900 	mov.w	r9, #0
 8006da2:	4652      	mov	r2, sl
 8006da4:	465b      	mov	r3, fp
 8006da6:	4650      	mov	r0, sl
 8006da8:	4659      	mov	r1, fp
 8006daa:	f7f9 fba5 	bl	80004f8 <__aeabi_dmul>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	ec43 2b18 	vmov	d8, r2, r3
 8006db6:	f7f9 fb9f 	bl	80004f8 <__aeabi_dmul>
 8006dba:	ec53 2b18 	vmov	r2, r3, d8
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	4650      	mov	r0, sl
 8006dc4:	4659      	mov	r1, fp
 8006dc6:	f7f9 fb97 	bl	80004f8 <__aeabi_dmul>
 8006dca:	a371      	add	r3, pc, #452	; (adr r3, 8006f90 <__kernel_tan+0x328>)
 8006dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd0:	ec41 0b19 	vmov	d9, r0, r1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	f7f9 fb8e 	bl	80004f8 <__aeabi_dmul>
 8006ddc:	a36e      	add	r3, pc, #440	; (adr r3, 8006f98 <__kernel_tan+0x330>)
 8006dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de2:	f7f9 f9d3 	bl	800018c <__adddf3>
 8006de6:	4622      	mov	r2, r4
 8006de8:	462b      	mov	r3, r5
 8006dea:	f7f9 fb85 	bl	80004f8 <__aeabi_dmul>
 8006dee:	a36c      	add	r3, pc, #432	; (adr r3, 8006fa0 <__kernel_tan+0x338>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f7f9 f9ca 	bl	800018c <__adddf3>
 8006df8:	4622      	mov	r2, r4
 8006dfa:	462b      	mov	r3, r5
 8006dfc:	f7f9 fb7c 	bl	80004f8 <__aeabi_dmul>
 8006e00:	a369      	add	r3, pc, #420	; (adr r3, 8006fa8 <__kernel_tan+0x340>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 f9c1 	bl	800018c <__adddf3>
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	462b      	mov	r3, r5
 8006e0e:	f7f9 fb73 	bl	80004f8 <__aeabi_dmul>
 8006e12:	a367      	add	r3, pc, #412	; (adr r3, 8006fb0 <__kernel_tan+0x348>)
 8006e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e18:	f7f9 f9b8 	bl	800018c <__adddf3>
 8006e1c:	4622      	mov	r2, r4
 8006e1e:	462b      	mov	r3, r5
 8006e20:	f7f9 fb6a 	bl	80004f8 <__aeabi_dmul>
 8006e24:	a364      	add	r3, pc, #400	; (adr r3, 8006fb8 <__kernel_tan+0x350>)
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f7f9 f9af 	bl	800018c <__adddf3>
 8006e2e:	ec53 2b18 	vmov	r2, r3, d8
 8006e32:	f7f9 fb61 	bl	80004f8 <__aeabi_dmul>
 8006e36:	a362      	add	r3, pc, #392	; (adr r3, 8006fc0 <__kernel_tan+0x358>)
 8006e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3c:	ec41 0b1a 	vmov	d10, r0, r1
 8006e40:	4620      	mov	r0, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	f7f9 fb58 	bl	80004f8 <__aeabi_dmul>
 8006e48:	a35f      	add	r3, pc, #380	; (adr r3, 8006fc8 <__kernel_tan+0x360>)
 8006e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4e:	f7f9 f99d 	bl	800018c <__adddf3>
 8006e52:	4622      	mov	r2, r4
 8006e54:	462b      	mov	r3, r5
 8006e56:	f7f9 fb4f 	bl	80004f8 <__aeabi_dmul>
 8006e5a:	a35d      	add	r3, pc, #372	; (adr r3, 8006fd0 <__kernel_tan+0x368>)
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f7f9 f994 	bl	800018c <__adddf3>
 8006e64:	4622      	mov	r2, r4
 8006e66:	462b      	mov	r3, r5
 8006e68:	f7f9 fb46 	bl	80004f8 <__aeabi_dmul>
 8006e6c:	a35a      	add	r3, pc, #360	; (adr r3, 8006fd8 <__kernel_tan+0x370>)
 8006e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e72:	f7f9 f98b 	bl	800018c <__adddf3>
 8006e76:	4622      	mov	r2, r4
 8006e78:	462b      	mov	r3, r5
 8006e7a:	f7f9 fb3d 	bl	80004f8 <__aeabi_dmul>
 8006e7e:	a358      	add	r3, pc, #352	; (adr r3, 8006fe0 <__kernel_tan+0x378>)
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f7f9 f982 	bl	800018c <__adddf3>
 8006e88:	4622      	mov	r2, r4
 8006e8a:	462b      	mov	r3, r5
 8006e8c:	f7f9 fb34 	bl	80004f8 <__aeabi_dmul>
 8006e90:	a355      	add	r3, pc, #340	; (adr r3, 8006fe8 <__kernel_tan+0x380>)
 8006e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e96:	f7f9 f979 	bl	800018c <__adddf3>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	ec51 0b1a 	vmov	r0, r1, d10
 8006ea2:	f7f9 f973 	bl	800018c <__adddf3>
 8006ea6:	ec53 2b19 	vmov	r2, r3, d9
 8006eaa:	f7f9 fb25 	bl	80004f8 <__aeabi_dmul>
 8006eae:	4642      	mov	r2, r8
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	f7f9 f96b 	bl	800018c <__adddf3>
 8006eb6:	ec53 2b18 	vmov	r2, r3, d8
 8006eba:	f7f9 fb1d 	bl	80004f8 <__aeabi_dmul>
 8006ebe:	4642      	mov	r2, r8
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	f7f9 f963 	bl	800018c <__adddf3>
 8006ec6:	a34a      	add	r3, pc, #296	; (adr r3, 8006ff0 <__kernel_tan+0x388>)
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460d      	mov	r5, r1
 8006ed0:	ec51 0b19 	vmov	r0, r1, d9
 8006ed4:	f7f9 fb10 	bl	80004f8 <__aeabi_dmul>
 8006ed8:	4622      	mov	r2, r4
 8006eda:	462b      	mov	r3, r5
 8006edc:	f7f9 f956 	bl	800018c <__adddf3>
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	ec41 0b18 	vmov	d8, r0, r1
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	4659      	mov	r1, fp
 8006eea:	4650      	mov	r0, sl
 8006eec:	f7f9 f94e 	bl	800018c <__adddf3>
 8006ef0:	4b44      	ldr	r3, [pc, #272]	; (8007004 <__kernel_tan+0x39c>)
 8006ef2:	429f      	cmp	r7, r3
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	460d      	mov	r5, r1
 8006ef8:	f340 8086 	ble.w	8007008 <__kernel_tan+0x3a0>
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7f9 fa91 	bl	8000424 <__aeabi_i2d>
 8006f02:	4622      	mov	r2, r4
 8006f04:	4680      	mov	r8, r0
 8006f06:	4689      	mov	r9, r1
 8006f08:	462b      	mov	r3, r5
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	f7f9 faf3 	bl	80004f8 <__aeabi_dmul>
 8006f12:	4642      	mov	r2, r8
 8006f14:	4606      	mov	r6, r0
 8006f16:	460f      	mov	r7, r1
 8006f18:	464b      	mov	r3, r9
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7f9 f935 	bl	800018c <__adddf3>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4630      	mov	r0, r6
 8006f28:	4639      	mov	r1, r7
 8006f2a:	f7f9 fc0f 	bl	800074c <__aeabi_ddiv>
 8006f2e:	ec53 2b18 	vmov	r2, r3, d8
 8006f32:	f7f9 f929 	bl	8000188 <__aeabi_dsub>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	4650      	mov	r0, sl
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	f7f9 f923 	bl	8000188 <__aeabi_dsub>
 8006f42:	4602      	mov	r2, r0
 8006f44:	460b      	mov	r3, r1
 8006f46:	f7f9 f921 	bl	800018c <__adddf3>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4649      	mov	r1, r9
 8006f52:	f7f9 f919 	bl	8000188 <__aeabi_dsub>
 8006f56:	9b00      	ldr	r3, [sp, #0]
 8006f58:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8006f5c:	f00a 0a02 	and.w	sl, sl, #2
 8006f60:	4604      	mov	r4, r0
 8006f62:	f1ca 0001 	rsb	r0, sl, #1
 8006f66:	460d      	mov	r5, r1
 8006f68:	f7f9 fa5c 	bl	8000424 <__aeabi_i2d>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 fac0 	bl	80004f8 <__aeabi_dmul>
 8006f78:	e69f      	b.n	8006cba <__kernel_tan+0x52>
 8006f7a:	bf00      	nop
 8006f7c:	f3af 8000 	nop.w
 8006f80:	54442d18 	.word	0x54442d18
 8006f84:	3fe921fb 	.word	0x3fe921fb
 8006f88:	33145c07 	.word	0x33145c07
 8006f8c:	3c81a626 	.word	0x3c81a626
 8006f90:	74bf7ad4 	.word	0x74bf7ad4
 8006f94:	3efb2a70 	.word	0x3efb2a70
 8006f98:	32f0a7e9 	.word	0x32f0a7e9
 8006f9c:	3f12b80f 	.word	0x3f12b80f
 8006fa0:	1a8d1068 	.word	0x1a8d1068
 8006fa4:	3f3026f7 	.word	0x3f3026f7
 8006fa8:	fee08315 	.word	0xfee08315
 8006fac:	3f57dbc8 	.word	0x3f57dbc8
 8006fb0:	e96e8493 	.word	0xe96e8493
 8006fb4:	3f8226e3 	.word	0x3f8226e3
 8006fb8:	1bb341fe 	.word	0x1bb341fe
 8006fbc:	3faba1ba 	.word	0x3faba1ba
 8006fc0:	db605373 	.word	0xdb605373
 8006fc4:	bef375cb 	.word	0xbef375cb
 8006fc8:	a03792a6 	.word	0xa03792a6
 8006fcc:	3f147e88 	.word	0x3f147e88
 8006fd0:	f2f26501 	.word	0xf2f26501
 8006fd4:	3f4344d8 	.word	0x3f4344d8
 8006fd8:	c9560328 	.word	0xc9560328
 8006fdc:	3f6d6d22 	.word	0x3f6d6d22
 8006fe0:	8406d637 	.word	0x8406d637
 8006fe4:	3f9664f4 	.word	0x3f9664f4
 8006fe8:	1110fe7a 	.word	0x1110fe7a
 8006fec:	3fc11111 	.word	0x3fc11111
 8006ff0:	55555563 	.word	0x55555563
 8006ff4:	3fd55555 	.word	0x3fd55555
 8006ff8:	3e2fffff 	.word	0x3e2fffff
 8006ffc:	3ff00000 	.word	0x3ff00000
 8007000:	bff00000 	.word	0xbff00000
 8007004:	3fe59427 	.word	0x3fe59427
 8007008:	2e01      	cmp	r6, #1
 800700a:	d02f      	beq.n	800706c <__kernel_tan+0x404>
 800700c:	460f      	mov	r7, r1
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4689      	mov	r9, r1
 8007014:	2000      	movs	r0, #0
 8007016:	4917      	ldr	r1, [pc, #92]	; (8007074 <__kernel_tan+0x40c>)
 8007018:	f7f9 fb98 	bl	800074c <__aeabi_ddiv>
 800701c:	2600      	movs	r6, #0
 800701e:	e9cd 0100 	strd	r0, r1, [sp]
 8007022:	4652      	mov	r2, sl
 8007024:	465b      	mov	r3, fp
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 f8ad 	bl	8000188 <__aeabi_dsub>
 800702e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	ec51 0b18 	vmov	r0, r1, d8
 800703a:	f7f9 f8a5 	bl	8000188 <__aeabi_dsub>
 800703e:	4632      	mov	r2, r6
 8007040:	462b      	mov	r3, r5
 8007042:	f7f9 fa59 	bl	80004f8 <__aeabi_dmul>
 8007046:	46b0      	mov	r8, r6
 8007048:	460f      	mov	r7, r1
 800704a:	4642      	mov	r2, r8
 800704c:	462b      	mov	r3, r5
 800704e:	4634      	mov	r4, r6
 8007050:	4649      	mov	r1, r9
 8007052:	4606      	mov	r6, r0
 8007054:	4640      	mov	r0, r8
 8007056:	f7f9 fa4f 	bl	80004f8 <__aeabi_dmul>
 800705a:	4b07      	ldr	r3, [pc, #28]	; (8007078 <__kernel_tan+0x410>)
 800705c:	2200      	movs	r2, #0
 800705e:	f7f9 f895 	bl	800018c <__adddf3>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4630      	mov	r0, r6
 8007068:	4639      	mov	r1, r7
 800706a:	e665      	b.n	8006d38 <__kernel_tan+0xd0>
 800706c:	4682      	mov	sl, r0
 800706e:	468b      	mov	fp, r1
 8007070:	e625      	b.n	8006cbe <__kernel_tan+0x56>
 8007072:	bf00      	nop
 8007074:	bff00000 	.word	0xbff00000
 8007078:	3ff00000 	.word	0x3ff00000
 800707c:	00000000 	.word	0x00000000

08007080 <__ieee754_rem_pio2>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ed2d 8b02 	vpush	{d8}
 8007088:	ec55 4b10 	vmov	r4, r5, d0
 800708c:	4bca      	ldr	r3, [pc, #808]	; (80073b8 <__ieee754_rem_pio2+0x338>)
 800708e:	b08b      	sub	sp, #44	; 0x2c
 8007090:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007094:	4598      	cmp	r8, r3
 8007096:	4682      	mov	sl, r0
 8007098:	9502      	str	r5, [sp, #8]
 800709a:	dc08      	bgt.n	80070ae <__ieee754_rem_pio2+0x2e>
 800709c:	2200      	movs	r2, #0
 800709e:	2300      	movs	r3, #0
 80070a0:	ed80 0b00 	vstr	d0, [r0]
 80070a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80070a8:	f04f 0b00 	mov.w	fp, #0
 80070ac:	e028      	b.n	8007100 <__ieee754_rem_pio2+0x80>
 80070ae:	4bc3      	ldr	r3, [pc, #780]	; (80073bc <__ieee754_rem_pio2+0x33c>)
 80070b0:	4598      	cmp	r8, r3
 80070b2:	dc78      	bgt.n	80071a6 <__ieee754_rem_pio2+0x126>
 80070b4:	9b02      	ldr	r3, [sp, #8]
 80070b6:	4ec2      	ldr	r6, [pc, #776]	; (80073c0 <__ieee754_rem_pio2+0x340>)
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	ee10 0a10 	vmov	r0, s0
 80070be:	a3b0      	add	r3, pc, #704	; (adr r3, 8007380 <__ieee754_rem_pio2+0x300>)
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	4629      	mov	r1, r5
 80070c6:	dd39      	ble.n	800713c <__ieee754_rem_pio2+0xbc>
 80070c8:	f7f9 f85e 	bl	8000188 <__aeabi_dsub>
 80070cc:	45b0      	cmp	r8, r6
 80070ce:	4604      	mov	r4, r0
 80070d0:	460d      	mov	r5, r1
 80070d2:	d01b      	beq.n	800710c <__ieee754_rem_pio2+0x8c>
 80070d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7f9 f855 	bl	8000188 <__aeabi_dsub>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	e9ca 2300 	strd	r2, r3, [sl]
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 f84d 	bl	8000188 <__aeabi_dsub>
 80070ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f848 	bl	8000188 <__aeabi_dsub>
 80070f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80070fc:	f04f 0b01 	mov.w	fp, #1
 8007100:	4658      	mov	r0, fp
 8007102:	b00b      	add	sp, #44	; 0x2c
 8007104:	ecbd 8b02 	vpop	{d8}
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710c:	a3a0      	add	r3, pc, #640	; (adr r3, 8007390 <__ieee754_rem_pio2+0x310>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 f839 	bl	8000188 <__aeabi_dsub>
 8007116:	a3a0      	add	r3, pc, #640	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	f7f9 f832 	bl	8000188 <__aeabi_dsub>
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	e9ca 2300 	strd	r2, r3, [sl]
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	f7f9 f82a 	bl	8000188 <__aeabi_dsub>
 8007134:	a398      	add	r3, pc, #608	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	e7db      	b.n	80070f4 <__ieee754_rem_pio2+0x74>
 800713c:	f7f9 f826 	bl	800018c <__adddf3>
 8007140:	45b0      	cmp	r8, r6
 8007142:	4604      	mov	r4, r0
 8007144:	460d      	mov	r5, r1
 8007146:	d016      	beq.n	8007176 <__ieee754_rem_pio2+0xf6>
 8007148:	a38f      	add	r3, pc, #572	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 f81d 	bl	800018c <__adddf3>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	e9ca 2300 	strd	r2, r3, [sl]
 800715a:	4620      	mov	r0, r4
 800715c:	4629      	mov	r1, r5
 800715e:	f7f9 f813 	bl	8000188 <__aeabi_dsub>
 8007162:	a389      	add	r3, pc, #548	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f7f9 f810 	bl	800018c <__adddf3>
 800716c:	f04f 3bff 	mov.w	fp, #4294967295
 8007170:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007174:	e7c4      	b.n	8007100 <__ieee754_rem_pio2+0x80>
 8007176:	a386      	add	r3, pc, #536	; (adr r3, 8007390 <__ieee754_rem_pio2+0x310>)
 8007178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717c:	f7f9 f806 	bl	800018c <__adddf3>
 8007180:	a385      	add	r3, pc, #532	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	4604      	mov	r4, r0
 8007188:	460d      	mov	r5, r1
 800718a:	f7f8 ffff 	bl	800018c <__adddf3>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	e9ca 2300 	strd	r2, r3, [sl]
 8007196:	4620      	mov	r0, r4
 8007198:	4629      	mov	r1, r5
 800719a:	f7f8 fff5 	bl	8000188 <__aeabi_dsub>
 800719e:	a37e      	add	r3, pc, #504	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	e7e0      	b.n	8007168 <__ieee754_rem_pio2+0xe8>
 80071a6:	4b87      	ldr	r3, [pc, #540]	; (80073c4 <__ieee754_rem_pio2+0x344>)
 80071a8:	4598      	cmp	r8, r3
 80071aa:	f300 80d8 	bgt.w	800735e <__ieee754_rem_pio2+0x2de>
 80071ae:	f000 f96d 	bl	800748c <fabs>
 80071b2:	ec55 4b10 	vmov	r4, r5, d0
 80071b6:	ee10 0a10 	vmov	r0, s0
 80071ba:	a379      	add	r3, pc, #484	; (adr r3, 80073a0 <__ieee754_rem_pio2+0x320>)
 80071bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f999 	bl	80004f8 <__aeabi_dmul>
 80071c6:	4b80      	ldr	r3, [pc, #512]	; (80073c8 <__ieee754_rem_pio2+0x348>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	f7f8 ffdf 	bl	800018c <__adddf3>
 80071ce:	f7f9 fc2d 	bl	8000a2c <__aeabi_d2iz>
 80071d2:	4683      	mov	fp, r0
 80071d4:	f7f9 f926 	bl	8000424 <__aeabi_i2d>
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	ec43 2b18 	vmov	d8, r2, r3
 80071e0:	a367      	add	r3, pc, #412	; (adr r3, 8007380 <__ieee754_rem_pio2+0x300>)
 80071e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e6:	f7f9 f987 	bl	80004f8 <__aeabi_dmul>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4620      	mov	r0, r4
 80071f0:	4629      	mov	r1, r5
 80071f2:	f7f8 ffc9 	bl	8000188 <__aeabi_dsub>
 80071f6:	a364      	add	r3, pc, #400	; (adr r3, 8007388 <__ieee754_rem_pio2+0x308>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	4606      	mov	r6, r0
 80071fe:	460f      	mov	r7, r1
 8007200:	ec51 0b18 	vmov	r0, r1, d8
 8007204:	f7f9 f978 	bl	80004f8 <__aeabi_dmul>
 8007208:	f1bb 0f1f 	cmp.w	fp, #31
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	dc0d      	bgt.n	800722e <__ieee754_rem_pio2+0x1ae>
 8007212:	4b6e      	ldr	r3, [pc, #440]	; (80073cc <__ieee754_rem_pio2+0x34c>)
 8007214:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721c:	4543      	cmp	r3, r8
 800721e:	d006      	beq.n	800722e <__ieee754_rem_pio2+0x1ae>
 8007220:	4622      	mov	r2, r4
 8007222:	462b      	mov	r3, r5
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f8 ffae 	bl	8000188 <__aeabi_dsub>
 800722c:	e00e      	b.n	800724c <__ieee754_rem_pio2+0x1cc>
 800722e:	462b      	mov	r3, r5
 8007230:	4622      	mov	r2, r4
 8007232:	4630      	mov	r0, r6
 8007234:	4639      	mov	r1, r7
 8007236:	f7f8 ffa7 	bl	8000188 <__aeabi_dsub>
 800723a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007244:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007248:	2b10      	cmp	r3, #16
 800724a:	dc02      	bgt.n	8007252 <__ieee754_rem_pio2+0x1d2>
 800724c:	e9ca 0100 	strd	r0, r1, [sl]
 8007250:	e039      	b.n	80072c6 <__ieee754_rem_pio2+0x246>
 8007252:	a34f      	add	r3, pc, #316	; (adr r3, 8007390 <__ieee754_rem_pio2+0x310>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	ec51 0b18 	vmov	r0, r1, d8
 800725c:	f7f9 f94c 	bl	80004f8 <__aeabi_dmul>
 8007260:	4604      	mov	r4, r0
 8007262:	460d      	mov	r5, r1
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4630      	mov	r0, r6
 800726a:	4639      	mov	r1, r7
 800726c:	f7f8 ff8c 	bl	8000188 <__aeabi_dsub>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4680      	mov	r8, r0
 8007276:	4689      	mov	r9, r1
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f8 ff84 	bl	8000188 <__aeabi_dsub>
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	f7f8 ff80 	bl	8000188 <__aeabi_dsub>
 8007288:	a343      	add	r3, pc, #268	; (adr r3, 8007398 <__ieee754_rem_pio2+0x318>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	4604      	mov	r4, r0
 8007290:	460d      	mov	r5, r1
 8007292:	ec51 0b18 	vmov	r0, r1, d8
 8007296:	f7f9 f92f 	bl	80004f8 <__aeabi_dmul>
 800729a:	4622      	mov	r2, r4
 800729c:	462b      	mov	r3, r5
 800729e:	f7f8 ff73 	bl	8000188 <__aeabi_dsub>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4604      	mov	r4, r0
 80072a8:	460d      	mov	r5, r1
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f7f8 ff6b 	bl	8000188 <__aeabi_dsub>
 80072b2:	9a03      	ldr	r2, [sp, #12]
 80072b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b31      	cmp	r3, #49	; 0x31
 80072bc:	dc24      	bgt.n	8007308 <__ieee754_rem_pio2+0x288>
 80072be:	e9ca 0100 	strd	r0, r1, [sl]
 80072c2:	4646      	mov	r6, r8
 80072c4:	464f      	mov	r7, r9
 80072c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80072ca:	4630      	mov	r0, r6
 80072cc:	4642      	mov	r2, r8
 80072ce:	464b      	mov	r3, r9
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f8 ff59 	bl	8000188 <__aeabi_dsub>
 80072d6:	462b      	mov	r3, r5
 80072d8:	4622      	mov	r2, r4
 80072da:	f7f8 ff55 	bl	8000188 <__aeabi_dsub>
 80072de:	9b02      	ldr	r3, [sp, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80072e6:	f6bf af0b 	bge.w	8007100 <__ieee754_rem_pio2+0x80>
 80072ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80072ee:	f8ca 3004 	str.w	r3, [sl, #4]
 80072f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f6:	f8ca 8000 	str.w	r8, [sl]
 80072fa:	f8ca 0008 	str.w	r0, [sl, #8]
 80072fe:	f8ca 300c 	str.w	r3, [sl, #12]
 8007302:	f1cb 0b00 	rsb	fp, fp, #0
 8007306:	e6fb      	b.n	8007100 <__ieee754_rem_pio2+0x80>
 8007308:	a327      	add	r3, pc, #156	; (adr r3, 80073a8 <__ieee754_rem_pio2+0x328>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	ec51 0b18 	vmov	r0, r1, d8
 8007312:	f7f9 f8f1 	bl	80004f8 <__aeabi_dmul>
 8007316:	4604      	mov	r4, r0
 8007318:	460d      	mov	r5, r1
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4640      	mov	r0, r8
 8007320:	4649      	mov	r1, r9
 8007322:	f7f8 ff31 	bl	8000188 <__aeabi_dsub>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4606      	mov	r6, r0
 800732c:	460f      	mov	r7, r1
 800732e:	4640      	mov	r0, r8
 8007330:	4649      	mov	r1, r9
 8007332:	f7f8 ff29 	bl	8000188 <__aeabi_dsub>
 8007336:	4622      	mov	r2, r4
 8007338:	462b      	mov	r3, r5
 800733a:	f7f8 ff25 	bl	8000188 <__aeabi_dsub>
 800733e:	a31c      	add	r3, pc, #112	; (adr r3, 80073b0 <__ieee754_rem_pio2+0x330>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	4604      	mov	r4, r0
 8007346:	460d      	mov	r5, r1
 8007348:	ec51 0b18 	vmov	r0, r1, d8
 800734c:	f7f9 f8d4 	bl	80004f8 <__aeabi_dmul>
 8007350:	4622      	mov	r2, r4
 8007352:	462b      	mov	r3, r5
 8007354:	f7f8 ff18 	bl	8000188 <__aeabi_dsub>
 8007358:	4604      	mov	r4, r0
 800735a:	460d      	mov	r5, r1
 800735c:	e760      	b.n	8007220 <__ieee754_rem_pio2+0x1a0>
 800735e:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <__ieee754_rem_pio2+0x350>)
 8007360:	4598      	cmp	r8, r3
 8007362:	dd37      	ble.n	80073d4 <__ieee754_rem_pio2+0x354>
 8007364:	ee10 2a10 	vmov	r2, s0
 8007368:	462b      	mov	r3, r5
 800736a:	4620      	mov	r0, r4
 800736c:	4629      	mov	r1, r5
 800736e:	f7f8 ff0b 	bl	8000188 <__aeabi_dsub>
 8007372:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007376:	e9ca 0100 	strd	r0, r1, [sl]
 800737a:	e695      	b.n	80070a8 <__ieee754_rem_pio2+0x28>
 800737c:	f3af 8000 	nop.w
 8007380:	54400000 	.word	0x54400000
 8007384:	3ff921fb 	.word	0x3ff921fb
 8007388:	1a626331 	.word	0x1a626331
 800738c:	3dd0b461 	.word	0x3dd0b461
 8007390:	1a600000 	.word	0x1a600000
 8007394:	3dd0b461 	.word	0x3dd0b461
 8007398:	2e037073 	.word	0x2e037073
 800739c:	3ba3198a 	.word	0x3ba3198a
 80073a0:	6dc9c883 	.word	0x6dc9c883
 80073a4:	3fe45f30 	.word	0x3fe45f30
 80073a8:	2e000000 	.word	0x2e000000
 80073ac:	3ba3198a 	.word	0x3ba3198a
 80073b0:	252049c1 	.word	0x252049c1
 80073b4:	397b839a 	.word	0x397b839a
 80073b8:	3fe921fb 	.word	0x3fe921fb
 80073bc:	4002d97b 	.word	0x4002d97b
 80073c0:	3ff921fb 	.word	0x3ff921fb
 80073c4:	413921fb 	.word	0x413921fb
 80073c8:	3fe00000 	.word	0x3fe00000
 80073cc:	08007e4c 	.word	0x08007e4c
 80073d0:	7fefffff 	.word	0x7fefffff
 80073d4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80073d8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80073dc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80073e0:	4620      	mov	r0, r4
 80073e2:	460d      	mov	r5, r1
 80073e4:	f7f9 fb22 	bl	8000a2c <__aeabi_d2iz>
 80073e8:	f7f9 f81c 	bl	8000424 <__aeabi_i2d>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4620      	mov	r0, r4
 80073f2:	4629      	mov	r1, r5
 80073f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80073f8:	f7f8 fec6 	bl	8000188 <__aeabi_dsub>
 80073fc:	4b21      	ldr	r3, [pc, #132]	; (8007484 <__ieee754_rem_pio2+0x404>)
 80073fe:	2200      	movs	r2, #0
 8007400:	f7f9 f87a 	bl	80004f8 <__aeabi_dmul>
 8007404:	460d      	mov	r5, r1
 8007406:	4604      	mov	r4, r0
 8007408:	f7f9 fb10 	bl	8000a2c <__aeabi_d2iz>
 800740c:	f7f9 f80a 	bl	8000424 <__aeabi_i2d>
 8007410:	4602      	mov	r2, r0
 8007412:	460b      	mov	r3, r1
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800741c:	f7f8 feb4 	bl	8000188 <__aeabi_dsub>
 8007420:	4b18      	ldr	r3, [pc, #96]	; (8007484 <__ieee754_rem_pio2+0x404>)
 8007422:	2200      	movs	r2, #0
 8007424:	f7f9 f868 	bl	80004f8 <__aeabi_dmul>
 8007428:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800742c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007430:	2703      	movs	r7, #3
 8007432:	2400      	movs	r4, #0
 8007434:	2500      	movs	r5, #0
 8007436:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	46b9      	mov	r9, r7
 8007440:	3f01      	subs	r7, #1
 8007442:	f7f9 fac1 	bl	80009c8 <__aeabi_dcmpeq>
 8007446:	2800      	cmp	r0, #0
 8007448:	d1f5      	bne.n	8007436 <__ieee754_rem_pio2+0x3b6>
 800744a:	4b0f      	ldr	r3, [pc, #60]	; (8007488 <__ieee754_rem_pio2+0x408>)
 800744c:	9301      	str	r3, [sp, #4]
 800744e:	2302      	movs	r3, #2
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	4632      	mov	r2, r6
 8007454:	464b      	mov	r3, r9
 8007456:	4651      	mov	r1, sl
 8007458:	a804      	add	r0, sp, #16
 800745a:	f000 f821 	bl	80074a0 <__kernel_rem_pio2>
 800745e:	9b02      	ldr	r3, [sp, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	4683      	mov	fp, r0
 8007464:	f6bf ae4c 	bge.w	8007100 <__ieee754_rem_pio2+0x80>
 8007468:	e9da 2100 	ldrd	r2, r1, [sl]
 800746c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007470:	e9ca 2300 	strd	r2, r3, [sl]
 8007474:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007478:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800747c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007480:	e73f      	b.n	8007302 <__ieee754_rem_pio2+0x282>
 8007482:	bf00      	nop
 8007484:	41700000 	.word	0x41700000
 8007488:	08007ecc 	.word	0x08007ecc

0800748c <fabs>:
 800748c:	ec51 0b10 	vmov	r0, r1, d0
 8007490:	ee10 2a10 	vmov	r2, s0
 8007494:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007498:	ec43 2b10 	vmov	d0, r2, r3
 800749c:	4770      	bx	lr
	...

080074a0 <__kernel_rem_pio2>:
 80074a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a4:	ed2d 8b02 	vpush	{d8}
 80074a8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80074ac:	f112 0f14 	cmn.w	r2, #20
 80074b0:	9306      	str	r3, [sp, #24]
 80074b2:	9104      	str	r1, [sp, #16]
 80074b4:	4bc2      	ldr	r3, [pc, #776]	; (80077c0 <__kernel_rem_pio2+0x320>)
 80074b6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80074b8:	9009      	str	r0, [sp, #36]	; 0x24
 80074ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80074c6:	bfa8      	it	ge
 80074c8:	1ed4      	subge	r4, r2, #3
 80074ca:	9305      	str	r3, [sp, #20]
 80074cc:	bfb2      	itee	lt
 80074ce:	2400      	movlt	r4, #0
 80074d0:	2318      	movge	r3, #24
 80074d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80074d6:	f06f 0317 	mvn.w	r3, #23
 80074da:	fb04 3303 	mla	r3, r4, r3, r3
 80074de:	eb03 0a02 	add.w	sl, r3, r2
 80074e2:	9b00      	ldr	r3, [sp, #0]
 80074e4:	9a05      	ldr	r2, [sp, #20]
 80074e6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80077b0 <__kernel_rem_pio2+0x310>
 80074ea:	eb03 0802 	add.w	r8, r3, r2
 80074ee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80074f0:	1aa7      	subs	r7, r4, r2
 80074f2:	ae20      	add	r6, sp, #128	; 0x80
 80074f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80074f8:	2500      	movs	r5, #0
 80074fa:	4545      	cmp	r5, r8
 80074fc:	dd13      	ble.n	8007526 <__kernel_rem_pio2+0x86>
 80074fe:	9b06      	ldr	r3, [sp, #24]
 8007500:	aa20      	add	r2, sp, #128	; 0x80
 8007502:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007506:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800750a:	f04f 0800 	mov.w	r8, #0
 800750e:	9b00      	ldr	r3, [sp, #0]
 8007510:	4598      	cmp	r8, r3
 8007512:	dc31      	bgt.n	8007578 <__kernel_rem_pio2+0xd8>
 8007514:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80077b0 <__kernel_rem_pio2+0x310>
 8007518:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800751c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007520:	462f      	mov	r7, r5
 8007522:	2600      	movs	r6, #0
 8007524:	e01b      	b.n	800755e <__kernel_rem_pio2+0xbe>
 8007526:	42ef      	cmn	r7, r5
 8007528:	d407      	bmi.n	800753a <__kernel_rem_pio2+0x9a>
 800752a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800752e:	f7f8 ff79 	bl	8000424 <__aeabi_i2d>
 8007532:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007536:	3501      	adds	r5, #1
 8007538:	e7df      	b.n	80074fa <__kernel_rem_pio2+0x5a>
 800753a:	ec51 0b18 	vmov	r0, r1, d8
 800753e:	e7f8      	b.n	8007532 <__kernel_rem_pio2+0x92>
 8007540:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007544:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007548:	f7f8 ffd6 	bl	80004f8 <__aeabi_dmul>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007554:	f7f8 fe1a 	bl	800018c <__adddf3>
 8007558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800755c:	3601      	adds	r6, #1
 800755e:	9b05      	ldr	r3, [sp, #20]
 8007560:	429e      	cmp	r6, r3
 8007562:	f1a7 0708 	sub.w	r7, r7, #8
 8007566:	ddeb      	ble.n	8007540 <__kernel_rem_pio2+0xa0>
 8007568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800756c:	f108 0801 	add.w	r8, r8, #1
 8007570:	ecab 7b02 	vstmia	fp!, {d7}
 8007574:	3508      	adds	r5, #8
 8007576:	e7ca      	b.n	800750e <__kernel_rem_pio2+0x6e>
 8007578:	9b00      	ldr	r3, [sp, #0]
 800757a:	aa0c      	add	r2, sp, #48	; 0x30
 800757c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007580:	930b      	str	r3, [sp, #44]	; 0x2c
 8007582:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007584:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007588:	9c00      	ldr	r4, [sp, #0]
 800758a:	930a      	str	r3, [sp, #40]	; 0x28
 800758c:	00e3      	lsls	r3, r4, #3
 800758e:	9308      	str	r3, [sp, #32]
 8007590:	ab98      	add	r3, sp, #608	; 0x260
 8007592:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007596:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800759a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800759e:	ab70      	add	r3, sp, #448	; 0x1c0
 80075a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80075a4:	46c3      	mov	fp, r8
 80075a6:	46a1      	mov	r9, r4
 80075a8:	f1b9 0f00 	cmp.w	r9, #0
 80075ac:	f1a5 0508 	sub.w	r5, r5, #8
 80075b0:	dc77      	bgt.n	80076a2 <__kernel_rem_pio2+0x202>
 80075b2:	ec47 6b10 	vmov	d0, r6, r7
 80075b6:	4650      	mov	r0, sl
 80075b8:	f000 fac2 	bl	8007b40 <scalbn>
 80075bc:	ec57 6b10 	vmov	r6, r7, d0
 80075c0:	2200      	movs	r2, #0
 80075c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80075c6:	ee10 0a10 	vmov	r0, s0
 80075ca:	4639      	mov	r1, r7
 80075cc:	f7f8 ff94 	bl	80004f8 <__aeabi_dmul>
 80075d0:	ec41 0b10 	vmov	d0, r0, r1
 80075d4:	f000 fb34 	bl	8007c40 <floor>
 80075d8:	4b7a      	ldr	r3, [pc, #488]	; (80077c4 <__kernel_rem_pio2+0x324>)
 80075da:	ec51 0b10 	vmov	r0, r1, d0
 80075de:	2200      	movs	r2, #0
 80075e0:	f7f8 ff8a 	bl	80004f8 <__aeabi_dmul>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f8 fdcc 	bl	8000188 <__aeabi_dsub>
 80075f0:	460f      	mov	r7, r1
 80075f2:	4606      	mov	r6, r0
 80075f4:	f7f9 fa1a 	bl	8000a2c <__aeabi_d2iz>
 80075f8:	9002      	str	r0, [sp, #8]
 80075fa:	f7f8 ff13 	bl	8000424 <__aeabi_i2d>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4630      	mov	r0, r6
 8007604:	4639      	mov	r1, r7
 8007606:	f7f8 fdbf 	bl	8000188 <__aeabi_dsub>
 800760a:	f1ba 0f00 	cmp.w	sl, #0
 800760e:	4606      	mov	r6, r0
 8007610:	460f      	mov	r7, r1
 8007612:	dd6d      	ble.n	80076f0 <__kernel_rem_pio2+0x250>
 8007614:	1e61      	subs	r1, r4, #1
 8007616:	ab0c      	add	r3, sp, #48	; 0x30
 8007618:	9d02      	ldr	r5, [sp, #8]
 800761a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800761e:	f1ca 0018 	rsb	r0, sl, #24
 8007622:	fa43 f200 	asr.w	r2, r3, r0
 8007626:	4415      	add	r5, r2
 8007628:	4082      	lsls	r2, r0
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	aa0c      	add	r2, sp, #48	; 0x30
 800762e:	9502      	str	r5, [sp, #8]
 8007630:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007634:	f1ca 0217 	rsb	r2, sl, #23
 8007638:	fa43 fb02 	asr.w	fp, r3, r2
 800763c:	f1bb 0f00 	cmp.w	fp, #0
 8007640:	dd65      	ble.n	800770e <__kernel_rem_pio2+0x26e>
 8007642:	9b02      	ldr	r3, [sp, #8]
 8007644:	2200      	movs	r2, #0
 8007646:	3301      	adds	r3, #1
 8007648:	9302      	str	r3, [sp, #8]
 800764a:	4615      	mov	r5, r2
 800764c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007650:	4294      	cmp	r4, r2
 8007652:	f300 809f 	bgt.w	8007794 <__kernel_rem_pio2+0x2f4>
 8007656:	f1ba 0f00 	cmp.w	sl, #0
 800765a:	dd07      	ble.n	800766c <__kernel_rem_pio2+0x1cc>
 800765c:	f1ba 0f01 	cmp.w	sl, #1
 8007660:	f000 80c1 	beq.w	80077e6 <__kernel_rem_pio2+0x346>
 8007664:	f1ba 0f02 	cmp.w	sl, #2
 8007668:	f000 80c7 	beq.w	80077fa <__kernel_rem_pio2+0x35a>
 800766c:	f1bb 0f02 	cmp.w	fp, #2
 8007670:	d14d      	bne.n	800770e <__kernel_rem_pio2+0x26e>
 8007672:	4632      	mov	r2, r6
 8007674:	463b      	mov	r3, r7
 8007676:	4954      	ldr	r1, [pc, #336]	; (80077c8 <__kernel_rem_pio2+0x328>)
 8007678:	2000      	movs	r0, #0
 800767a:	f7f8 fd85 	bl	8000188 <__aeabi_dsub>
 800767e:	4606      	mov	r6, r0
 8007680:	460f      	mov	r7, r1
 8007682:	2d00      	cmp	r5, #0
 8007684:	d043      	beq.n	800770e <__kernel_rem_pio2+0x26e>
 8007686:	4650      	mov	r0, sl
 8007688:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80077b8 <__kernel_rem_pio2+0x318>
 800768c:	f000 fa58 	bl	8007b40 <scalbn>
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	ec53 2b10 	vmov	r2, r3, d0
 8007698:	f7f8 fd76 	bl	8000188 <__aeabi_dsub>
 800769c:	4606      	mov	r6, r0
 800769e:	460f      	mov	r7, r1
 80076a0:	e035      	b.n	800770e <__kernel_rem_pio2+0x26e>
 80076a2:	4b4a      	ldr	r3, [pc, #296]	; (80077cc <__kernel_rem_pio2+0x32c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	4630      	mov	r0, r6
 80076a8:	4639      	mov	r1, r7
 80076aa:	f7f8 ff25 	bl	80004f8 <__aeabi_dmul>
 80076ae:	f7f9 f9bd 	bl	8000a2c <__aeabi_d2iz>
 80076b2:	f7f8 feb7 	bl	8000424 <__aeabi_i2d>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	ec43 2b18 	vmov	d8, r2, r3
 80076be:	4b44      	ldr	r3, [pc, #272]	; (80077d0 <__kernel_rem_pio2+0x330>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	f7f8 ff19 	bl	80004f8 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4630      	mov	r0, r6
 80076cc:	4639      	mov	r1, r7
 80076ce:	f7f8 fd5b 	bl	8000188 <__aeabi_dsub>
 80076d2:	f7f9 f9ab 	bl	8000a2c <__aeabi_d2iz>
 80076d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076da:	f84b 0b04 	str.w	r0, [fp], #4
 80076de:	ec51 0b18 	vmov	r0, r1, d8
 80076e2:	f7f8 fd53 	bl	800018c <__adddf3>
 80076e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80076ea:	4606      	mov	r6, r0
 80076ec:	460f      	mov	r7, r1
 80076ee:	e75b      	b.n	80075a8 <__kernel_rem_pio2+0x108>
 80076f0:	d106      	bne.n	8007700 <__kernel_rem_pio2+0x260>
 80076f2:	1e63      	subs	r3, r4, #1
 80076f4:	aa0c      	add	r2, sp, #48	; 0x30
 80076f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076fa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80076fe:	e79d      	b.n	800763c <__kernel_rem_pio2+0x19c>
 8007700:	4b34      	ldr	r3, [pc, #208]	; (80077d4 <__kernel_rem_pio2+0x334>)
 8007702:	2200      	movs	r2, #0
 8007704:	f7f9 f97e 	bl	8000a04 <__aeabi_dcmpge>
 8007708:	2800      	cmp	r0, #0
 800770a:	d140      	bne.n	800778e <__kernel_rem_pio2+0x2ee>
 800770c:	4683      	mov	fp, r0
 800770e:	2200      	movs	r2, #0
 8007710:	2300      	movs	r3, #0
 8007712:	4630      	mov	r0, r6
 8007714:	4639      	mov	r1, r7
 8007716:	f7f9 f957 	bl	80009c8 <__aeabi_dcmpeq>
 800771a:	2800      	cmp	r0, #0
 800771c:	f000 80c1 	beq.w	80078a2 <__kernel_rem_pio2+0x402>
 8007720:	1e65      	subs	r5, r4, #1
 8007722:	462b      	mov	r3, r5
 8007724:	2200      	movs	r2, #0
 8007726:	9900      	ldr	r1, [sp, #0]
 8007728:	428b      	cmp	r3, r1
 800772a:	da6d      	bge.n	8007808 <__kernel_rem_pio2+0x368>
 800772c:	2a00      	cmp	r2, #0
 800772e:	f000 808a 	beq.w	8007846 <__kernel_rem_pio2+0x3a6>
 8007732:	ab0c      	add	r3, sp, #48	; 0x30
 8007734:	f1aa 0a18 	sub.w	sl, sl, #24
 8007738:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 80ae 	beq.w	800789e <__kernel_rem_pio2+0x3fe>
 8007742:	4650      	mov	r0, sl
 8007744:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80077b8 <__kernel_rem_pio2+0x318>
 8007748:	f000 f9fa 	bl	8007b40 <scalbn>
 800774c:	1c6b      	adds	r3, r5, #1
 800774e:	00da      	lsls	r2, r3, #3
 8007750:	9205      	str	r2, [sp, #20]
 8007752:	ec57 6b10 	vmov	r6, r7, d0
 8007756:	aa70      	add	r2, sp, #448	; 0x1c0
 8007758:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80077cc <__kernel_rem_pio2+0x32c>
 800775c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007760:	462c      	mov	r4, r5
 8007762:	f04f 0800 	mov.w	r8, #0
 8007766:	2c00      	cmp	r4, #0
 8007768:	f280 80d4 	bge.w	8007914 <__kernel_rem_pio2+0x474>
 800776c:	462c      	mov	r4, r5
 800776e:	2c00      	cmp	r4, #0
 8007770:	f2c0 8102 	blt.w	8007978 <__kernel_rem_pio2+0x4d8>
 8007774:	4b18      	ldr	r3, [pc, #96]	; (80077d8 <__kernel_rem_pio2+0x338>)
 8007776:	461e      	mov	r6, r3
 8007778:	ab70      	add	r3, sp, #448	; 0x1c0
 800777a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800777e:	1b2b      	subs	r3, r5, r4
 8007780:	f04f 0900 	mov.w	r9, #0
 8007784:	f04f 0a00 	mov.w	sl, #0
 8007788:	2700      	movs	r7, #0
 800778a:	9306      	str	r3, [sp, #24]
 800778c:	e0e6      	b.n	800795c <__kernel_rem_pio2+0x4bc>
 800778e:	f04f 0b02 	mov.w	fp, #2
 8007792:	e756      	b.n	8007642 <__kernel_rem_pio2+0x1a2>
 8007794:	f8d8 3000 	ldr.w	r3, [r8]
 8007798:	bb05      	cbnz	r5, 80077dc <__kernel_rem_pio2+0x33c>
 800779a:	b123      	cbz	r3, 80077a6 <__kernel_rem_pio2+0x306>
 800779c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80077a0:	f8c8 3000 	str.w	r3, [r8]
 80077a4:	2301      	movs	r3, #1
 80077a6:	3201      	adds	r2, #1
 80077a8:	f108 0804 	add.w	r8, r8, #4
 80077ac:	461d      	mov	r5, r3
 80077ae:	e74f      	b.n	8007650 <__kernel_rem_pio2+0x1b0>
	...
 80077bc:	3ff00000 	.word	0x3ff00000
 80077c0:	08008018 	.word	0x08008018
 80077c4:	40200000 	.word	0x40200000
 80077c8:	3ff00000 	.word	0x3ff00000
 80077cc:	3e700000 	.word	0x3e700000
 80077d0:	41700000 	.word	0x41700000
 80077d4:	3fe00000 	.word	0x3fe00000
 80077d8:	08007fd8 	.word	0x08007fd8
 80077dc:	1acb      	subs	r3, r1, r3
 80077de:	f8c8 3000 	str.w	r3, [r8]
 80077e2:	462b      	mov	r3, r5
 80077e4:	e7df      	b.n	80077a6 <__kernel_rem_pio2+0x306>
 80077e6:	1e62      	subs	r2, r4, #1
 80077e8:	ab0c      	add	r3, sp, #48	; 0x30
 80077ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80077f2:	a90c      	add	r1, sp, #48	; 0x30
 80077f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80077f8:	e738      	b.n	800766c <__kernel_rem_pio2+0x1cc>
 80077fa:	1e62      	subs	r2, r4, #1
 80077fc:	ab0c      	add	r3, sp, #48	; 0x30
 80077fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007802:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007806:	e7f4      	b.n	80077f2 <__kernel_rem_pio2+0x352>
 8007808:	a90c      	add	r1, sp, #48	; 0x30
 800780a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800780e:	3b01      	subs	r3, #1
 8007810:	430a      	orrs	r2, r1
 8007812:	e788      	b.n	8007726 <__kernel_rem_pio2+0x286>
 8007814:	3301      	adds	r3, #1
 8007816:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800781a:	2900      	cmp	r1, #0
 800781c:	d0fa      	beq.n	8007814 <__kernel_rem_pio2+0x374>
 800781e:	9a08      	ldr	r2, [sp, #32]
 8007820:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007824:	446a      	add	r2, sp
 8007826:	3a98      	subs	r2, #152	; 0x98
 8007828:	9208      	str	r2, [sp, #32]
 800782a:	9a06      	ldr	r2, [sp, #24]
 800782c:	a920      	add	r1, sp, #128	; 0x80
 800782e:	18a2      	adds	r2, r4, r2
 8007830:	18e3      	adds	r3, r4, r3
 8007832:	f104 0801 	add.w	r8, r4, #1
 8007836:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800783a:	9302      	str	r3, [sp, #8]
 800783c:	9b02      	ldr	r3, [sp, #8]
 800783e:	4543      	cmp	r3, r8
 8007840:	da04      	bge.n	800784c <__kernel_rem_pio2+0x3ac>
 8007842:	461c      	mov	r4, r3
 8007844:	e6a2      	b.n	800758c <__kernel_rem_pio2+0xec>
 8007846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007848:	2301      	movs	r3, #1
 800784a:	e7e4      	b.n	8007816 <__kernel_rem_pio2+0x376>
 800784c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800784e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007852:	f7f8 fde7 	bl	8000424 <__aeabi_i2d>
 8007856:	e8e5 0102 	strd	r0, r1, [r5], #8
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	46ab      	mov	fp, r5
 800785e:	461c      	mov	r4, r3
 8007860:	f04f 0900 	mov.w	r9, #0
 8007864:	2600      	movs	r6, #0
 8007866:	2700      	movs	r7, #0
 8007868:	9b05      	ldr	r3, [sp, #20]
 800786a:	4599      	cmp	r9, r3
 800786c:	dd06      	ble.n	800787c <__kernel_rem_pio2+0x3dc>
 800786e:	9b08      	ldr	r3, [sp, #32]
 8007870:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007874:	f108 0801 	add.w	r8, r8, #1
 8007878:	9308      	str	r3, [sp, #32]
 800787a:	e7df      	b.n	800783c <__kernel_rem_pio2+0x39c>
 800787c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007880:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007884:	f7f8 fe38 	bl	80004f8 <__aeabi_dmul>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	f7f8 fc7c 	bl	800018c <__adddf3>
 8007894:	f109 0901 	add.w	r9, r9, #1
 8007898:	4606      	mov	r6, r0
 800789a:	460f      	mov	r7, r1
 800789c:	e7e4      	b.n	8007868 <__kernel_rem_pio2+0x3c8>
 800789e:	3d01      	subs	r5, #1
 80078a0:	e747      	b.n	8007732 <__kernel_rem_pio2+0x292>
 80078a2:	ec47 6b10 	vmov	d0, r6, r7
 80078a6:	f1ca 0000 	rsb	r0, sl, #0
 80078aa:	f000 f949 	bl	8007b40 <scalbn>
 80078ae:	ec57 6b10 	vmov	r6, r7, d0
 80078b2:	4ba0      	ldr	r3, [pc, #640]	; (8007b34 <__kernel_rem_pio2+0x694>)
 80078b4:	ee10 0a10 	vmov	r0, s0
 80078b8:	2200      	movs	r2, #0
 80078ba:	4639      	mov	r1, r7
 80078bc:	f7f9 f8a2 	bl	8000a04 <__aeabi_dcmpge>
 80078c0:	b1f8      	cbz	r0, 8007902 <__kernel_rem_pio2+0x462>
 80078c2:	4b9d      	ldr	r3, [pc, #628]	; (8007b38 <__kernel_rem_pio2+0x698>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	f7f8 fe15 	bl	80004f8 <__aeabi_dmul>
 80078ce:	f7f9 f8ad 	bl	8000a2c <__aeabi_d2iz>
 80078d2:	4680      	mov	r8, r0
 80078d4:	f7f8 fda6 	bl	8000424 <__aeabi_i2d>
 80078d8:	4b96      	ldr	r3, [pc, #600]	; (8007b34 <__kernel_rem_pio2+0x694>)
 80078da:	2200      	movs	r2, #0
 80078dc:	f7f8 fe0c 	bl	80004f8 <__aeabi_dmul>
 80078e0:	460b      	mov	r3, r1
 80078e2:	4602      	mov	r2, r0
 80078e4:	4639      	mov	r1, r7
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7f8 fc4e 	bl	8000188 <__aeabi_dsub>
 80078ec:	f7f9 f89e 	bl	8000a2c <__aeabi_d2iz>
 80078f0:	1c65      	adds	r5, r4, #1
 80078f2:	ab0c      	add	r3, sp, #48	; 0x30
 80078f4:	f10a 0a18 	add.w	sl, sl, #24
 80078f8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80078fc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007900:	e71f      	b.n	8007742 <__kernel_rem_pio2+0x2a2>
 8007902:	4630      	mov	r0, r6
 8007904:	4639      	mov	r1, r7
 8007906:	f7f9 f891 	bl	8000a2c <__aeabi_d2iz>
 800790a:	ab0c      	add	r3, sp, #48	; 0x30
 800790c:	4625      	mov	r5, r4
 800790e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007912:	e716      	b.n	8007742 <__kernel_rem_pio2+0x2a2>
 8007914:	ab0c      	add	r3, sp, #48	; 0x30
 8007916:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800791a:	f7f8 fd83 	bl	8000424 <__aeabi_i2d>
 800791e:	4632      	mov	r2, r6
 8007920:	463b      	mov	r3, r7
 8007922:	f7f8 fde9 	bl	80004f8 <__aeabi_dmul>
 8007926:	4642      	mov	r2, r8
 8007928:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800792c:	464b      	mov	r3, r9
 800792e:	4630      	mov	r0, r6
 8007930:	4639      	mov	r1, r7
 8007932:	f7f8 fde1 	bl	80004f8 <__aeabi_dmul>
 8007936:	3c01      	subs	r4, #1
 8007938:	4606      	mov	r6, r0
 800793a:	460f      	mov	r7, r1
 800793c:	e713      	b.n	8007766 <__kernel_rem_pio2+0x2c6>
 800793e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007942:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007946:	f7f8 fdd7 	bl	80004f8 <__aeabi_dmul>
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	4648      	mov	r0, r9
 8007950:	4651      	mov	r1, sl
 8007952:	f7f8 fc1b 	bl	800018c <__adddf3>
 8007956:	3701      	adds	r7, #1
 8007958:	4681      	mov	r9, r0
 800795a:	468a      	mov	sl, r1
 800795c:	9b00      	ldr	r3, [sp, #0]
 800795e:	429f      	cmp	r7, r3
 8007960:	dc02      	bgt.n	8007968 <__kernel_rem_pio2+0x4c8>
 8007962:	9b06      	ldr	r3, [sp, #24]
 8007964:	429f      	cmp	r7, r3
 8007966:	ddea      	ble.n	800793e <__kernel_rem_pio2+0x49e>
 8007968:	9a06      	ldr	r2, [sp, #24]
 800796a:	ab48      	add	r3, sp, #288	; 0x120
 800796c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007970:	e9c6 9a00 	strd	r9, sl, [r6]
 8007974:	3c01      	subs	r4, #1
 8007976:	e6fa      	b.n	800776e <__kernel_rem_pio2+0x2ce>
 8007978:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800797a:	2b02      	cmp	r3, #2
 800797c:	dc0b      	bgt.n	8007996 <__kernel_rem_pio2+0x4f6>
 800797e:	2b00      	cmp	r3, #0
 8007980:	dc39      	bgt.n	80079f6 <__kernel_rem_pio2+0x556>
 8007982:	d05d      	beq.n	8007a40 <__kernel_rem_pio2+0x5a0>
 8007984:	9b02      	ldr	r3, [sp, #8]
 8007986:	f003 0007 	and.w	r0, r3, #7
 800798a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800798e:	ecbd 8b02 	vpop	{d8}
 8007992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007996:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007998:	2b03      	cmp	r3, #3
 800799a:	d1f3      	bne.n	8007984 <__kernel_rem_pio2+0x4e4>
 800799c:	9b05      	ldr	r3, [sp, #20]
 800799e:	9500      	str	r5, [sp, #0]
 80079a0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80079a4:	eb0d 0403 	add.w	r4, sp, r3
 80079a8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80079ac:	46a2      	mov	sl, r4
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f1aa 0a08 	sub.w	sl, sl, #8
 80079b6:	dc69      	bgt.n	8007a8c <__kernel_rem_pio2+0x5ec>
 80079b8:	46aa      	mov	sl, r5
 80079ba:	f1ba 0f01 	cmp.w	sl, #1
 80079be:	f1a4 0408 	sub.w	r4, r4, #8
 80079c2:	f300 8083 	bgt.w	8007acc <__kernel_rem_pio2+0x62c>
 80079c6:	9c05      	ldr	r4, [sp, #20]
 80079c8:	ab48      	add	r3, sp, #288	; 0x120
 80079ca:	441c      	add	r4, r3
 80079cc:	2000      	movs	r0, #0
 80079ce:	2100      	movs	r1, #0
 80079d0:	2d01      	cmp	r5, #1
 80079d2:	f300 809a 	bgt.w	8007b0a <__kernel_rem_pio2+0x66a>
 80079d6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80079da:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80079de:	f1bb 0f00 	cmp.w	fp, #0
 80079e2:	f040 8098 	bne.w	8007b16 <__kernel_rem_pio2+0x676>
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	e9c3 7800 	strd	r7, r8, [r3]
 80079ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80079f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80079f4:	e7c6      	b.n	8007984 <__kernel_rem_pio2+0x4e4>
 80079f6:	9e05      	ldr	r6, [sp, #20]
 80079f8:	ab48      	add	r3, sp, #288	; 0x120
 80079fa:	441e      	add	r6, r3
 80079fc:	462c      	mov	r4, r5
 80079fe:	2000      	movs	r0, #0
 8007a00:	2100      	movs	r1, #0
 8007a02:	2c00      	cmp	r4, #0
 8007a04:	da33      	bge.n	8007a6e <__kernel_rem_pio2+0x5ce>
 8007a06:	f1bb 0f00 	cmp.w	fp, #0
 8007a0a:	d036      	beq.n	8007a7a <__kernel_rem_pio2+0x5da>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a12:	9c04      	ldr	r4, [sp, #16]
 8007a14:	e9c4 2300 	strd	r2, r3, [r4]
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007a20:	f7f8 fbb2 	bl	8000188 <__aeabi_dsub>
 8007a24:	ae4a      	add	r6, sp, #296	; 0x128
 8007a26:	2401      	movs	r4, #1
 8007a28:	42a5      	cmp	r5, r4
 8007a2a:	da29      	bge.n	8007a80 <__kernel_rem_pio2+0x5e0>
 8007a2c:	f1bb 0f00 	cmp.w	fp, #0
 8007a30:	d002      	beq.n	8007a38 <__kernel_rem_pio2+0x598>
 8007a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a36:	4619      	mov	r1, r3
 8007a38:	9b04      	ldr	r3, [sp, #16]
 8007a3a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007a3e:	e7a1      	b.n	8007984 <__kernel_rem_pio2+0x4e4>
 8007a40:	9c05      	ldr	r4, [sp, #20]
 8007a42:	ab48      	add	r3, sp, #288	; 0x120
 8007a44:	441c      	add	r4, r3
 8007a46:	2000      	movs	r0, #0
 8007a48:	2100      	movs	r1, #0
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	da09      	bge.n	8007a62 <__kernel_rem_pio2+0x5c2>
 8007a4e:	f1bb 0f00 	cmp.w	fp, #0
 8007a52:	d002      	beq.n	8007a5a <__kernel_rem_pio2+0x5ba>
 8007a54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a58:	4619      	mov	r1, r3
 8007a5a:	9b04      	ldr	r3, [sp, #16]
 8007a5c:	e9c3 0100 	strd	r0, r1, [r3]
 8007a60:	e790      	b.n	8007984 <__kernel_rem_pio2+0x4e4>
 8007a62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a66:	f7f8 fb91 	bl	800018c <__adddf3>
 8007a6a:	3d01      	subs	r5, #1
 8007a6c:	e7ed      	b.n	8007a4a <__kernel_rem_pio2+0x5aa>
 8007a6e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007a72:	f7f8 fb8b 	bl	800018c <__adddf3>
 8007a76:	3c01      	subs	r4, #1
 8007a78:	e7c3      	b.n	8007a02 <__kernel_rem_pio2+0x562>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	e7c8      	b.n	8007a12 <__kernel_rem_pio2+0x572>
 8007a80:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007a84:	f7f8 fb82 	bl	800018c <__adddf3>
 8007a88:	3401      	adds	r4, #1
 8007a8a:	e7cd      	b.n	8007a28 <__kernel_rem_pio2+0x588>
 8007a8c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a90:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007a94:	9b00      	ldr	r3, [sp, #0]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	4632      	mov	r2, r6
 8007a9c:	463b      	mov	r3, r7
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	4649      	mov	r1, r9
 8007aa2:	f7f8 fb73 	bl	800018c <__adddf3>
 8007aa6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4640      	mov	r0, r8
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	f7f8 fb69 	bl	8000188 <__aeabi_dsub>
 8007ab6:	4632      	mov	r2, r6
 8007ab8:	463b      	mov	r3, r7
 8007aba:	f7f8 fb67 	bl	800018c <__adddf3>
 8007abe:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007ac2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007ac6:	ed8a 7b00 	vstr	d7, [sl]
 8007aca:	e770      	b.n	80079ae <__kernel_rem_pio2+0x50e>
 8007acc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007ad0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	4632      	mov	r2, r6
 8007ad8:	463b      	mov	r3, r7
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f8 fb56 	bl	800018c <__adddf3>
 8007ae0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f8 fb4c 	bl	8000188 <__aeabi_dsub>
 8007af0:	4632      	mov	r2, r6
 8007af2:	463b      	mov	r3, r7
 8007af4:	f7f8 fb4a 	bl	800018c <__adddf3>
 8007af8:	ed9d 7b00 	vldr	d7, [sp]
 8007afc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b00:	ed84 7b00 	vstr	d7, [r4]
 8007b04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b08:	e757      	b.n	80079ba <__kernel_rem_pio2+0x51a>
 8007b0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b0e:	f7f8 fb3d 	bl	800018c <__adddf3>
 8007b12:	3d01      	subs	r5, #1
 8007b14:	e75c      	b.n	80079d0 <__kernel_rem_pio2+0x530>
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	9a04      	ldr	r2, [sp, #16]
 8007b1a:	601f      	str	r7, [r3, #0]
 8007b1c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007b20:	605c      	str	r4, [r3, #4]
 8007b22:	609d      	str	r5, [r3, #8]
 8007b24:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007b28:	60d3      	str	r3, [r2, #12]
 8007b2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b2e:	6110      	str	r0, [r2, #16]
 8007b30:	6153      	str	r3, [r2, #20]
 8007b32:	e727      	b.n	8007984 <__kernel_rem_pio2+0x4e4>
 8007b34:	41700000 	.word	0x41700000
 8007b38:	3e700000 	.word	0x3e700000
 8007b3c:	00000000 	.word	0x00000000

08007b40 <scalbn>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	ec55 4b10 	vmov	r4, r5, d0
 8007b46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	b999      	cbnz	r1, 8007b78 <scalbn+0x38>
 8007b50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b54:	4323      	orrs	r3, r4
 8007b56:	d03f      	beq.n	8007bd8 <scalbn+0x98>
 8007b58:	4b35      	ldr	r3, [pc, #212]	; (8007c30 <scalbn+0xf0>)
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	ee10 0a10 	vmov	r0, s0
 8007b60:	2200      	movs	r2, #0
 8007b62:	f7f8 fcc9 	bl	80004f8 <__aeabi_dmul>
 8007b66:	4b33      	ldr	r3, [pc, #204]	; (8007c34 <scalbn+0xf4>)
 8007b68:	429e      	cmp	r6, r3
 8007b6a:	4604      	mov	r4, r0
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	da10      	bge.n	8007b92 <scalbn+0x52>
 8007b70:	a327      	add	r3, pc, #156	; (adr r3, 8007c10 <scalbn+0xd0>)
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	e01f      	b.n	8007bb8 <scalbn+0x78>
 8007b78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007b7c:	4291      	cmp	r1, r2
 8007b7e:	d10c      	bne.n	8007b9a <scalbn+0x5a>
 8007b80:	ee10 2a10 	vmov	r2, s0
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 fb00 	bl	800018c <__adddf3>
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	e022      	b.n	8007bd8 <scalbn+0x98>
 8007b92:	460b      	mov	r3, r1
 8007b94:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007b98:	3936      	subs	r1, #54	; 0x36
 8007b9a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007b9e:	4296      	cmp	r6, r2
 8007ba0:	dd0d      	ble.n	8007bbe <scalbn+0x7e>
 8007ba2:	2d00      	cmp	r5, #0
 8007ba4:	a11c      	add	r1, pc, #112	; (adr r1, 8007c18 <scalbn+0xd8>)
 8007ba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007baa:	da02      	bge.n	8007bb2 <scalbn+0x72>
 8007bac:	a11c      	add	r1, pc, #112	; (adr r1, 8007c20 <scalbn+0xe0>)
 8007bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb2:	a319      	add	r3, pc, #100	; (adr r3, 8007c18 <scalbn+0xd8>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fc9e 	bl	80004f8 <__aeabi_dmul>
 8007bbc:	e7e6      	b.n	8007b8c <scalbn+0x4c>
 8007bbe:	1872      	adds	r2, r6, r1
 8007bc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	dcec      	bgt.n	8007ba2 <scalbn+0x62>
 8007bc8:	2a00      	cmp	r2, #0
 8007bca:	dd08      	ble.n	8007bde <scalbn+0x9e>
 8007bcc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007bd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007bd8:	ec45 4b10 	vmov	d0, r4, r5
 8007bdc:	bd70      	pop	{r4, r5, r6, pc}
 8007bde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007be2:	da08      	bge.n	8007bf6 <scalbn+0xb6>
 8007be4:	2d00      	cmp	r5, #0
 8007be6:	a10a      	add	r1, pc, #40	; (adr r1, 8007c10 <scalbn+0xd0>)
 8007be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bec:	dac0      	bge.n	8007b70 <scalbn+0x30>
 8007bee:	a10e      	add	r1, pc, #56	; (adr r1, 8007c28 <scalbn+0xe8>)
 8007bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bf4:	e7bc      	b.n	8007b70 <scalbn+0x30>
 8007bf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007bfa:	3236      	adds	r2, #54	; 0x36
 8007bfc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007c04:	4620      	mov	r0, r4
 8007c06:	4b0c      	ldr	r3, [pc, #48]	; (8007c38 <scalbn+0xf8>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	e7d5      	b.n	8007bb8 <scalbn+0x78>
 8007c0c:	f3af 8000 	nop.w
 8007c10:	c2f8f359 	.word	0xc2f8f359
 8007c14:	01a56e1f 	.word	0x01a56e1f
 8007c18:	8800759c 	.word	0x8800759c
 8007c1c:	7e37e43c 	.word	0x7e37e43c
 8007c20:	8800759c 	.word	0x8800759c
 8007c24:	fe37e43c 	.word	0xfe37e43c
 8007c28:	c2f8f359 	.word	0xc2f8f359
 8007c2c:	81a56e1f 	.word	0x81a56e1f
 8007c30:	43500000 	.word	0x43500000
 8007c34:	ffff3cb0 	.word	0xffff3cb0
 8007c38:	3c900000 	.word	0x3c900000
 8007c3c:	00000000 	.word	0x00000000

08007c40 <floor>:
 8007c40:	ec51 0b10 	vmov	r0, r1, d0
 8007c44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007c50:	2e13      	cmp	r6, #19
 8007c52:	ee10 5a10 	vmov	r5, s0
 8007c56:	ee10 8a10 	vmov	r8, s0
 8007c5a:	460c      	mov	r4, r1
 8007c5c:	dc31      	bgt.n	8007cc2 <floor+0x82>
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	da14      	bge.n	8007c8c <floor+0x4c>
 8007c62:	a333      	add	r3, pc, #204	; (adr r3, 8007d30 <floor+0xf0>)
 8007c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c68:	f7f8 fa90 	bl	800018c <__adddf3>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f7f8 fed2 	bl	8000a18 <__aeabi_dcmpgt>
 8007c74:	b138      	cbz	r0, 8007c86 <floor+0x46>
 8007c76:	2c00      	cmp	r4, #0
 8007c78:	da53      	bge.n	8007d22 <floor+0xe2>
 8007c7a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007c7e:	4325      	orrs	r5, r4
 8007c80:	d052      	beq.n	8007d28 <floor+0xe8>
 8007c82:	4c2d      	ldr	r4, [pc, #180]	; (8007d38 <floor+0xf8>)
 8007c84:	2500      	movs	r5, #0
 8007c86:	4621      	mov	r1, r4
 8007c88:	4628      	mov	r0, r5
 8007c8a:	e024      	b.n	8007cd6 <floor+0x96>
 8007c8c:	4f2b      	ldr	r7, [pc, #172]	; (8007d3c <floor+0xfc>)
 8007c8e:	4137      	asrs	r7, r6
 8007c90:	ea01 0307 	and.w	r3, r1, r7
 8007c94:	4303      	orrs	r3, r0
 8007c96:	d01e      	beq.n	8007cd6 <floor+0x96>
 8007c98:	a325      	add	r3, pc, #148	; (adr r3, 8007d30 <floor+0xf0>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	f7f8 fa75 	bl	800018c <__adddf3>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	f7f8 feb7 	bl	8000a18 <__aeabi_dcmpgt>
 8007caa:	2800      	cmp	r0, #0
 8007cac:	d0eb      	beq.n	8007c86 <floor+0x46>
 8007cae:	2c00      	cmp	r4, #0
 8007cb0:	bfbe      	ittt	lt
 8007cb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007cb6:	4133      	asrlt	r3, r6
 8007cb8:	18e4      	addlt	r4, r4, r3
 8007cba:	ea24 0407 	bic.w	r4, r4, r7
 8007cbe:	2500      	movs	r5, #0
 8007cc0:	e7e1      	b.n	8007c86 <floor+0x46>
 8007cc2:	2e33      	cmp	r6, #51	; 0x33
 8007cc4:	dd0b      	ble.n	8007cde <floor+0x9e>
 8007cc6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007cca:	d104      	bne.n	8007cd6 <floor+0x96>
 8007ccc:	ee10 2a10 	vmov	r2, s0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	f7f8 fa5b 	bl	800018c <__adddf3>
 8007cd6:	ec41 0b10 	vmov	d0, r0, r1
 8007cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cde:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007ce2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ce6:	40df      	lsrs	r7, r3
 8007ce8:	4238      	tst	r0, r7
 8007cea:	d0f4      	beq.n	8007cd6 <floor+0x96>
 8007cec:	a310      	add	r3, pc, #64	; (adr r3, 8007d30 <floor+0xf0>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fa4b 	bl	800018c <__adddf3>
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	f7f8 fe8d 	bl	8000a18 <__aeabi_dcmpgt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d0c1      	beq.n	8007c86 <floor+0x46>
 8007d02:	2c00      	cmp	r4, #0
 8007d04:	da0a      	bge.n	8007d1c <floor+0xdc>
 8007d06:	2e14      	cmp	r6, #20
 8007d08:	d101      	bne.n	8007d0e <floor+0xce>
 8007d0a:	3401      	adds	r4, #1
 8007d0c:	e006      	b.n	8007d1c <floor+0xdc>
 8007d0e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007d12:	2301      	movs	r3, #1
 8007d14:	40b3      	lsls	r3, r6
 8007d16:	441d      	add	r5, r3
 8007d18:	45a8      	cmp	r8, r5
 8007d1a:	d8f6      	bhi.n	8007d0a <floor+0xca>
 8007d1c:	ea25 0507 	bic.w	r5, r5, r7
 8007d20:	e7b1      	b.n	8007c86 <floor+0x46>
 8007d22:	2500      	movs	r5, #0
 8007d24:	462c      	mov	r4, r5
 8007d26:	e7ae      	b.n	8007c86 <floor+0x46>
 8007d28:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007d2c:	e7ab      	b.n	8007c86 <floor+0x46>
 8007d2e:	bf00      	nop
 8007d30:	8800759c 	.word	0x8800759c
 8007d34:	7e37e43c 	.word	0x7e37e43c
 8007d38:	bff00000 	.word	0xbff00000
 8007d3c:	000fffff 	.word	0x000fffff

08007d40 <_init>:
 8007d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d42:	bf00      	nop
 8007d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d46:	bc08      	pop	{r3}
 8007d48:	469e      	mov	lr, r3
 8007d4a:	4770      	bx	lr

08007d4c <_fini>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	bf00      	nop
 8007d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d52:	bc08      	pop	{r3}
 8007d54:	469e      	mov	lr, r3
 8007d56:	4770      	bx	lr
