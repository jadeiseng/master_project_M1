
MP_BUZZER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005298  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080053d4  080053d4  000153d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080054c8  080054c8  000154c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080054d4  080054d4  000154d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  080054d8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000400  20000014  080054e4  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000414  080054e4  00020414  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001ac78  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000032be  00000000  00000000  0003acff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001c00  00000000  00000000  0003dfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000015a5  00000000  00000000  0003fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023191  00000000  00000000  00041165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a8a0  00000000  00000000  000642f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e7185  00000000  00000000  0007eb96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007814  00000000  00000000  00165d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  0016d530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	080053bc 	.word	0x080053bc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	080053bc 	.word	0x080053bc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000488:	f023 0218 	bic.w	r2, r3, #24
 800048c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr

080004a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c8:	68fb      	ldr	r3, [r7, #12]
}
 80004ca:	bf00      	nop
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <Buzzer_TurnOn>:
static void MX_RTC_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */

void Buzzer_TurnOn(int prescalerfornote, int NoteDurationMs)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80004e2:	2100      	movs	r1, #0
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <Buzzer_TurnOn+0x4c>)
 80004e6:	f003 f973 	bl	80037d0 <HAL_TIM_PWM_Start>

		for(int i = 0; i<NoteDurationMs ; i++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
 80004ee:	e009      	b.n	8000504 <Buzzer_TurnOn+0x2c>
		{
			TIM2->PSC = prescalerfornote; //change prescaler for have the frequency of our note
 80004f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6293      	str	r3, [r2, #40]	; 0x28
			HAL_Delay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f000 fd2f 	bl	8000f5c <HAL_Delay>
		for(int i = 0; i<NoteDurationMs ; i++)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	3301      	adds	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fa      	ldr	r2, [r7, #12]
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf1      	blt.n	80004f0 <Buzzer_TurnOn+0x18>
		}
		TIM2->PSC=0;
 800050c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000510:	2200      	movs	r2, #0
 8000512:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <Buzzer_TurnOn+0x4c>)
 8000518:	f003 fa34 	bl	8003984 <HAL_TIM_PWM_Stop>

}
 800051c:	bf00      	nop
 800051e:	3710      	adds	r7, #16
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000054 	.word	0x20000054

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fc90 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f81e 	bl	8000570 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000534:	f000 f894 	bl	8000660 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 fa08 	bl	800094c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800053c:	f000 f990 	bl	8000860 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000540:	f000 f9dc 	bl	80008fc <MX_USB_PCD_Init>
  MX_RTC_Init();
 8000544:	f000 f8aa 	bl	800069c <MX_RTC_Init>
  MX_TIM1_Init();
 8000548:	f000 f8da 	bl	8000700 <MX_TIM1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Buzzer_TurnOn(G,1000);
 800054c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000550:	20d3      	movs	r0, #211	; 0xd3
 8000552:	f7ff ffc1 	bl	80004d8 <Buzzer_TurnOn>
	  	  HAL_Delay(100);
 8000556:	2064      	movs	r0, #100	; 0x64
 8000558:	f000 fd00 	bl	8000f5c <HAL_Delay>
	  	Buzzer_TurnOn(A,1000);
 800055c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000560:	200f      	movs	r0, #15
 8000562:	f7ff ffb9 	bl	80004d8 <Buzzer_TurnOn>
	  	  HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 fcf8 	bl	8000f5c <HAL_Delay>
	  Buzzer_TurnOn(G,1000);
 800056c:	e7ee      	b.n	800054c <main+0x24>
	...

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b09a      	sub	sp, #104	; 0x68
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	2248      	movs	r2, #72	; 0x48
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 feef 	bl	8005362 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80005a4:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80005a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	f023 0303 	bic.w	r3, r3, #3
 80005b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ba:	f001 f883 	bl	80016c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ff5a 	bl	8000478 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	4b25      	ldr	r3, [pc, #148]	; (800065c <SystemClock_Config+0xec>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005cc:	4a23      	ldr	r2, [pc, #140]	; (800065c <SystemClock_Config+0xec>)
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b21      	ldr	r3, [pc, #132]	; (800065c <SystemClock_Config+0xec>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 80005e0:	232f      	movs	r3, #47	; 0x2f
 80005e2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2340      	movs	r3, #64	; 0x40
 80005fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000604:	2305      	movs	r3, #5
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fbeb 	bl	8001dec <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800061c:	f000 f9de 	bl	80009dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000620:	236f      	movs	r3, #111	; 0x6f
 8000622:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000624:	2302      	movs	r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f001 ff47 	bl	80024d4 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 800064c:	f000 f9c6 	bl	80009dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000650:	f002 fd02 	bl	8003058 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000654:	bf00      	nop
 8000656:	3768      	adds	r7, #104	; 0x68
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58000400 	.word	0x58000400

08000660 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2250      	movs	r2, #80	; 0x50
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fe78 	bl	8005362 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fb72 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800068e:	f000 f9a5 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000692:	bf00      	nop
 8000694:	3750      	adds	r7, #80	; 0x50
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <MX_RTC_Init+0x60>)
 80006a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006ae:	227f      	movs	r2, #127	; 0x7f
 80006b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006d2:	f002 fdd9 	bl	8003288 <HAL_RTC_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80006dc:	f000 f97e 	bl	80009dc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_RTC_Init+0x5c>)
 80006e6:	f002 fecf 	bl	8003488 <HAL_RTCEx_SetWakeUpTimer_IT>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80006f0:	f000 f974 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000030 	.word	0x20000030
 80006fc:	40002800 	.word	0x40002800

08000700 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	; 0x70
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000720:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
 8000730:	615a      	str	r2, [r3, #20]
 8000732:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2234      	movs	r2, #52	; 0x34
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fe11 	bl	8005362 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000740:	4b45      	ldr	r3, [pc, #276]	; (8000858 <MX_TIM1_Init+0x158>)
 8000742:	4a46      	ldr	r2, [pc, #280]	; (800085c <MX_TIM1_Init+0x15c>)
 8000744:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8000746:	4b44      	ldr	r3, [pc, #272]	; (8000858 <MX_TIM1_Init+0x158>)
 8000748:	220f      	movs	r2, #15
 800074a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074c:	4b42      	ldr	r3, [pc, #264]	; (8000858 <MX_TIM1_Init+0x158>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000752:	4b41      	ldr	r3, [pc, #260]	; (8000858 <MX_TIM1_Init+0x158>)
 8000754:	22ff      	movs	r2, #255	; 0xff
 8000756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b3f      	ldr	r3, [pc, #252]	; (8000858 <MX_TIM1_Init+0x158>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075e:	4b3e      	ldr	r3, [pc, #248]	; (8000858 <MX_TIM1_Init+0x158>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b3c      	ldr	r3, [pc, #240]	; (8000858 <MX_TIM1_Init+0x158>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076a:	483b      	ldr	r0, [pc, #236]	; (8000858 <MX_TIM1_Init+0x158>)
 800076c:	f002 ff78 	bl	8003660 <HAL_TIM_Base_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000776:	f000 f931 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800077e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000780:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000784:	4619      	mov	r1, r3
 8000786:	4834      	ldr	r0, [pc, #208]	; (8000858 <MX_TIM1_Init+0x158>)
 8000788:	f003 fa98 	bl	8003cbc <HAL_TIM_ConfigClockSource>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000792:	f000 f923 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000796:	4830      	ldr	r0, [pc, #192]	; (8000858 <MX_TIM1_Init+0x158>)
 8000798:	f002 ffb9 	bl	800370e <HAL_TIM_PWM_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007a2:	f000 f91b 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007b6:	4619      	mov	r1, r3
 80007b8:	4827      	ldr	r0, [pc, #156]	; (8000858 <MX_TIM1_Init+0x158>)
 80007ba:	f003 fef9 	bl	80045b0 <HAL_TIMEx_MasterConfigSynchronization>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80007c4:	f000 f90a 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c8:	2360      	movs	r3, #96	; 0x60
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 127;
 80007cc:	237f      	movs	r3, #127	; 0x7f
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e8:	2200      	movs	r2, #0
 80007ea:	4619      	mov	r1, r3
 80007ec:	481a      	ldr	r0, [pc, #104]	; (8000858 <MX_TIM1_Init+0x158>)
 80007ee:	f003 f951 	bl	8003a94 <HAL_TIM_PWM_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80007f8:	f000 f8f0 	bl	80009dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <MX_TIM1_Init+0x158>)
 800083a:	f003 ff19 	bl	8004670 <HAL_TIMEx_ConfigBreakDeadTime>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000844:	f000 f8ca 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <MX_TIM1_Init+0x158>)
 800084a:	f000 f979 	bl	8000b40 <HAL_TIM_MspPostInit>

}
 800084e:	bf00      	nop
 8000850:	3770      	adds	r7, #112	; 0x70
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000054 	.word	0x20000054
 800085c:	40012c00 	.word	0x40012c00

08000860 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 8000866:	4a24      	ldr	r2, [pc, #144]	; (80008f8 <MX_USART1_UART_Init+0x98>)
 8000868:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 800086c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000870:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 8000874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000878:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 8000888:	220c      	movs	r2, #12
 800088a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 8000894:	2200      	movs	r2, #0
 8000896:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 80008ac:	f003 ff86 	bl	80047bc <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80008b6:	f000 f891 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 80008be:	f004 fc4d 	bl	800515c <HAL_UARTEx_SetTxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80008c8:	f000 f888 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 80008d0:	f004 fc82 	bl	80051d8 <HAL_UARTEx_SetRxFifoThreshold>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80008da:	f000 f87f 	bl	80009dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x94>)
 80008e0:	f004 fc03 	bl	80050ea <HAL_UARTEx_DisableFifoMode>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80008ea:	f000 f877 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	200000a0 	.word	0x200000a0
 80008f8:	40013800 	.word	0x40013800

080008fc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USB_PCD_Init+0x48>)
 8000902:	4a11      	ldr	r2, [pc, #68]	; (8000948 <MX_USB_PCD_Init+0x4c>)
 8000904:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_USB_PCD_Init+0x48>)
 8000908:	2208      	movs	r2, #8
 800090a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_USB_PCD_Init+0x48>)
 800090e:	2202      	movs	r2, #2
 8000910:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USB_PCD_Init+0x48>)
 8000914:	2202      	movs	r2, #2
 8000916:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_USB_PCD_Init+0x48>)
 800091a:	2200      	movs	r2, #0
 800091c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USB_PCD_Init+0x48>)
 8000920:	2200      	movs	r2, #0
 8000922:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_USB_PCD_Init+0x48>)
 8000926:	2200      	movs	r2, #0
 8000928:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USB_PCD_Init+0x48>)
 800092c:	2200      	movs	r2, #0
 800092e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_USB_PCD_Init+0x48>)
 8000932:	f000 fdcf 	bl	80014d4 <HAL_PCD_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800093c:	f000 f84e 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000134 	.word	0x20000134
 8000948:	40006800 	.word	0x40006800

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000960:	2004      	movs	r0, #4
 8000962:	f7ff fd9f 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	2001      	movs	r0, #1
 8000968:	f7ff fd9c 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fd99 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	2008      	movs	r0, #8
 8000974:	f7ff fd96 	bl	80004a4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2123      	movs	r1, #35	; 0x23
 800097c:	4814      	ldr	r0, [pc, #80]	; (80009d0 <MX_GPIO_Init+0x84>)
 800097e:	f000 fd91 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000982:	2310      	movs	r3, #16
 8000984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	4810      	ldr	r0, [pc, #64]	; (80009d4 <MX_GPIO_Init+0x88>)
 8000994:	f000 fc16 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000998:	2323      	movs	r3, #35	; 0x23
 800099a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	4619      	mov	r1, r3
 80009ac:	4808      	ldr	r0, [pc, #32]	; (80009d0 <MX_GPIO_Init+0x84>)
 80009ae:	f000 fc09 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80009b2:	2303      	movs	r3, #3
 80009b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0x8c>)
 80009c4:	f000 fbfe 	bl	80011c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c8:	bf00      	nop
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	48000400 	.word	0x48000400
 80009d4:	48000800 	.word	0x48000800
 80009d8:	48000c00 	.word	0x48000c00

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>

080009e6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80009ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <LL_AHB2_GRP1_EnableClock>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b085      	sub	sp, #20
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a90:	68fb      	ldr	r3, [r7, #12]
}
 8000a92:	bf00      	nop
 8000a94:	3714      	adds	r7, #20
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b096      	sub	sp, #88	; 0x58
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ab4:	f107 0308 	add.w	r3, r7, #8
 8000ab8:	2250      	movs	r2, #80	; 0x50
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fc50 	bl	8005362 <memset>
  if(hrtc->Instance==RTC)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a13      	ldr	r2, [pc, #76]	; (8000b14 <HAL_RTC_MspInit+0x68>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d11f      	bne.n	8000b0c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8000acc:	f000 fdfa 	bl	80016c4 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ad4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ad6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 f943 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8000aec:	f7ff ff76 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000af0:	f7ff ff79 	bl	80009e6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000af4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000af8:	f7ff ff9f 	bl	8000a3a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2100      	movs	r1, #0
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 fb2a 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000b06:	2003      	movs	r0, #3
 8000b08:	f000 fb41 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3758      	adds	r7, #88	; 0x58
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40002800 	.word	0x40002800

08000b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <HAL_TIM_Base_MspInit+0x24>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d103      	bne.n	8000b32 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b2e:	f7ff ff9d 	bl	8000a6c <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40012c00 	.word	0x40012c00

08000b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <HAL_TIM_MspPostInit+0x54>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d114      	bne.n	8000b8c <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff ff50 	bl	8000a08 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 030c 	add.w	r3, r7, #12
 8000b82:	4619      	mov	r1, r3
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f000 fb1c 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40012c00 	.word	0x40012c00

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b09c      	sub	sp, #112	; 0x70
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2250      	movs	r2, #80	; 0x50
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f004 fbd2 	bl	8005362 <memset>
  if(huart->Instance==USART1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_UART_MspInit+0x84>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d124      	bne.n	8000c12 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 f8c9 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000be0:	f7ff fefc 	bl	80009dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000be8:	f7ff ff40 	bl	8000a6c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff ff0b 	bl	8000a08 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bf2:	23c0      	movs	r3, #192	; 0xc0
 8000bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c02:	2307      	movs	r3, #7
 8000c04:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <HAL_UART_MspInit+0x88>)
 8000c0e:	f000 fad9 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3770      	adds	r7, #112	; 0x70
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40013800 	.word	0x40013800
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09c      	sub	sp, #112	; 0x70
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2250      	movs	r2, #80	; 0x50
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f004 fb8c 	bl	8005362 <memset>
  if(hpcd->Instance==USB)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ccc <HAL_PCD_MspInit+0xa8>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d136      	bne.n	8000cc2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000c5a:	2318      	movs	r3, #24
 8000c5c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000c5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c62:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c68:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000c6a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c6e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000c76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c7a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 f873 	bl	8002d6c <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000c8c:	f7ff fea6 	bl	80009dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff feb9 	bl	8000a08 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000ca8:	230a      	movs	r3, #10
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb6:	f000 fa85 	bl	80011c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000cba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000cbe:	f7ff febc 	bl	8000a3a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3770      	adds	r7, #112	; 0x70
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40006800 	.word	0x40006800

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f8f2 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <RTC_WKUP_IRQHandler+0x10>)
 8000d2a:	f002 fc69 	bl	8003600 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000030 	.word	0x20000030

08000d38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <SystemInit+0x98>)
 8000d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d42:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <SystemInit+0x98>)
 8000d44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d56:	f043 0301 	orr.w	r3, r3, #1
 8000d5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d60:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d64:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <SystemInit+0x9c>)
 8000d72:	4013      	ands	r3, r2
 8000d74:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d82:	f023 0305 	bic.w	r3, r3, #5
 8000d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d96:	f023 0301 	bic.w	r3, r3, #1
 8000d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da2:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <SystemInit+0xa0>)
 8000da4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <SystemInit+0xa0>)
 8000dac:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000db8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dbc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00
 8000dd4:	faf6fefb 	.word	0xfaf6fefb
 8000dd8:	22041000 	.word	0x22041000

08000ddc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ddc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dde:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de0:	3304      	adds	r3, #4

08000de2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000de6:	d3f9      	bcc.n	8000ddc <CopyDataInit>
  bx lr
 8000de8:	4770      	bx	lr

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000dec:	3004      	adds	r0, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000dee:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>
  bx lr
 8000df2:	4770      	bx	lr

08000df4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000df4:	480c      	ldr	r0, [pc, #48]	; (8000e28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000df6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df8:	f7ff ff9e 	bl	8000d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000dfc:	480b      	ldr	r0, [pc, #44]	; (8000e2c <LoopForever+0x6>)
 8000dfe:	490c      	ldr	r1, [pc, #48]	; (8000e30 <LoopForever+0xa>)
 8000e00:	4a0c      	ldr	r2, [pc, #48]	; (8000e34 <LoopForever+0xe>)
 8000e02:	2300      	movs	r3, #0
 8000e04:	f7ff ffed 	bl	8000de2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <LoopForever+0x12>)
 8000e0a:	490c      	ldr	r1, [pc, #48]	; (8000e3c <LoopForever+0x16>)
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <LoopForever+0x1a>)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f7ff ffe7 	bl	8000de2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000e14:	480b      	ldr	r0, [pc, #44]	; (8000e44 <LoopForever+0x1e>)
 8000e16:	490c      	ldr	r1, [pc, #48]	; (8000e48 <LoopForever+0x22>)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f7ff ffe8 	bl	8000dee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e1e:	f004 faa9 	bl	8005374 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e22:	f7ff fb81 	bl	8000528 <main>

08000e26 <LoopForever>:

LoopForever:
  b LoopForever
 8000e26:	e7fe      	b.n	8000e26 <LoopForever>
  ldr   r0, =_estack
 8000e28:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000014 	.word	0x20000014
 8000e34:	080054d8 	.word	0x080054d8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000e38:	20030000 	.word	0x20030000
 8000e3c:	20030000 	.word	0x20030000
 8000e40:	080054e4 	.word	0x080054e4
  INIT_BSS _sbss, _ebss
 8000e44:	20000014 	.word	0x20000014
 8000e48:	20000414 	.word	0x20000414

08000e4c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e56:	2300      	movs	r3, #0
 8000e58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <HAL_Init+0x3c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <HAL_Init+0x3c>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f96c 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	f000 f80f 	bl	8000e90 <HAL_InitTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	e001      	b.n	8000e82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e7e:	f7ff fe0e 	bl	8000a9e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e82:	79fb      	ldrb	r3, [r7, #7]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58004000 	.word	0x58004000

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e9c:	4b17      	ldr	r3, [pc, #92]	; (8000efc <HAL_InitTick+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d024      	beq.n	8000eee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ea4:	f001 fcc2 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_InitTick+0x6c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f000 f974 	bl	80011aa <HAL_SYSTICK_Config>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d10f      	bne.n	8000ee8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b0f      	cmp	r3, #15
 8000ecc:	d809      	bhi.n	8000ee2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	6879      	ldr	r1, [r7, #4]
 8000ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed6:	f000 f940 	bl	800115a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eda:	4a09      	ldr	r2, [pc, #36]	; (8000f00 <HAL_InitTick+0x70>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	e007      	b.n	8000ef2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e004      	b.n	8000ef2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e001      	b.n	8000ef2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000010 	.word	0x20000010
 8000f00:	2000000c 	.word	0x2000000c

08000f04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000010 	.word	0x20000010
 8000f28:	20000410 	.word	0x20000410

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000410 	.word	0x20000410

08000f44 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTickPrio+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000000c 	.word	0x2000000c

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffe2 	bl	8000f2c <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffd2 	bl	8000f2c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000010 	.word	0x20000010

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff40 	bl	8000fec <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff90 	bl	8001098 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5f 	bl	8001044 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff33 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa4 	bl	8001100 <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b087      	sub	sp, #28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e14c      	b.n	800146e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 813e 	beq.w	8001468 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d005      	beq.n	8001204 <HAL_GPIO_Init+0x40>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d130      	bne.n	8001266 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800123a:	2201      	movs	r2, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	f003 0201 	and.w	r2, r3, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b03      	cmp	r3, #3
 8001270:	d017      	beq.n	80012a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d123      	bne.n	80012f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 0307 	and.w	r3, r3, #7
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	6939      	ldr	r1, [r7, #16]
 80012f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0203 	and.w	r2, r3, #3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 8098 	beq.w	8001468 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001338:	4a54      	ldr	r2, [pc, #336]	; (800148c <HAL_GPIO_Init+0x2c8>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001362:	d019      	beq.n	8001398 <HAL_GPIO_Init+0x1d4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x2cc>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d013      	beq.n	8001394 <HAL_GPIO_Init+0x1d0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a49      	ldr	r2, [pc, #292]	; (8001494 <HAL_GPIO_Init+0x2d0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1cc>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a48      	ldr	r2, [pc, #288]	; (8001498 <HAL_GPIO_Init+0x2d4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1c8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a47      	ldr	r2, [pc, #284]	; (800149c <HAL_GPIO_Init+0x2d8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1c4>
 8001384:	2304      	movs	r3, #4
 8001386:	e008      	b.n	800139a <HAL_GPIO_Init+0x1d6>
 8001388:	2307      	movs	r3, #7
 800138a:	e006      	b.n	800139a <HAL_GPIO_Init+0x1d6>
 800138c:	2303      	movs	r3, #3
 800138e:	e004      	b.n	800139a <HAL_GPIO_Init+0x1d6>
 8001390:	2302      	movs	r3, #2
 8001392:	e002      	b.n	800139a <HAL_GPIO_Init+0x1d6>
 8001394:	2301      	movs	r3, #1
 8001396:	e000      	b.n	800139a <HAL_GPIO_Init+0x1d6>
 8001398:	2300      	movs	r3, #0
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	f002 0203 	and.w	r2, r2, #3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4093      	lsls	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013aa:	4938      	ldr	r1, [pc, #224]	; (800148c <HAL_GPIO_Init+0x2c8>)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013dc:	4a30      	ldr	r2, [pc, #192]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013e2:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001406:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800140c:	4b24      	ldr	r3, [pc, #144]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 800140e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43db      	mvns	r3, r3
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001432:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800143a:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 800143c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4313      	orrs	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001460:	4a0f      	ldr	r2, [pc, #60]	; (80014a0 <HAL_GPIO_Init+0x2dc>)
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	f47f aeab 	bne.w	80011d4 <HAL_GPIO_Init+0x10>
  }
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	371c      	adds	r7, #28
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40010000 	.word	0x40010000
 8001490:	48000400 	.word	0x48000400
 8001494:	48000800 	.word	0x48000800
 8001498:	48000c00 	.word	0x48000c00
 800149c:	48001000 	.word	0x48001000
 80014a0:	58000800 	.word	0x58000800

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e0c0      	b.n	8001668 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fb92 	bl	8000c24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f003 feef 	bl	80052f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001512:	2300      	movs	r3, #0
 8001514:	73fb      	strb	r3, [r7, #15]
 8001516:	e03e      	b.n	8001596 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3311      	adds	r3, #17
 8001528:	2201      	movs	r2, #1
 800152a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800152c:	7bfa      	ldrb	r2, [r7, #15]
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4613      	mov	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	440b      	add	r3, r1
 800153a:	3310      	adds	r3, #16
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001540:	7bfa      	ldrb	r2, [r7, #15]
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3313      	adds	r3, #19
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	3320      	adds	r3, #32
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	440b      	add	r3, r1
 8001576:	3324      	adds	r3, #36	; 0x24
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	3301      	adds	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	791b      	ldrb	r3, [r3, #4]
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3bb      	bcc.n	8001518 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
 80015a4:	e044      	b.n	8001630 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	f203 1351 	addw	r3, r3, #337	; 0x151
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	f203 1353 	addw	r3, r3, #339	; 0x153
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	3301      	adds	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	429a      	cmp	r2, r3
 8001638:	d3b5      	bcc.n	80015a6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	3304      	adds	r3, #4
 8001642:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001646:	f003 fe6e 	bl	8005326 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7a9b      	ldrb	r3, [r3, #10]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f805 	bl	8001670 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001694:	b29b      	uxth	r3, r3
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	f043 0302 	orr.w	r3, r3, #2
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c8:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	58000400 	.word	0x58000400

080016e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_PWREx_GetVoltageRange+0x18>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	58000400 	.word	0x58000400

08001700 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001712:	d101      	bne.n	8001718 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_RCC_HSE_Enable>:
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <LL_RCC_HSE_Disable>:
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_RCC_HSE_IsReady>:
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001772:	d101      	bne.n	8001778 <LL_RCC_HSE_IsReady+0x18>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <LL_RCC_HSE_IsReady+0x1a>
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_RCC_HSI_Enable>:
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <LL_RCC_HSI_Disable>:
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80017a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_RCC_HSI_IsReady>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d101      	bne.n	80017d8 <LL_RCC_HSI_IsReady+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_RCC_HSI_IsReady+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80017ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	061b      	lsls	r3, r3, #24
 80017fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_RCC_HSI48_Enable>:
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800181a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_RCC_HSI48_Disable>:
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800183c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001840:	f023 0301 	bic.w	r3, r3, #1
 8001844:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_RCC_HSI48_IsReady>:
{
 8001852:	b480      	push	{r7}
 8001854:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b02      	cmp	r3, #2
 8001864:	d101      	bne.n	800186a <LL_RCC_HSI48_IsReady+0x18>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_RCC_HSI48_IsReady+0x1a>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <LL_RCC_LSE_Enable>:
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800187a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_RCC_LSE_Disable>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_LSE_EnableBypass>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <LL_RCC_LSE_DisableBypass>:
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018ec:	f023 0304 	bic.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <LL_RCC_LSE_IsReady>:
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b02      	cmp	r3, #2
 8001910:	d101      	bne.n	8001916 <LL_RCC_LSE_IsReady+0x18>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <LL_RCC_LSE_IsReady+0x1a>
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_RCC_LSI1_Enable>:
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_RCC_LSI1_Disable>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001954:	f023 0301 	bic.w	r3, r3, #1
 8001958:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LL_RCC_LSI1_IsReady>:
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d101      	bne.n	800197e <LL_RCC_LSI1_IsReady+0x18>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <LL_RCC_LSI1_IsReady+0x1a>
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_RCC_LSI2_Enable>:
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_RCC_LSI2_Disable>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_RCC_LSI2_IsReady>:
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80019d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d101      	bne.n	80019e6 <LL_RCC_LSI2_IsReady+0x18>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <LL_RCC_LSI2_IsReady+0x1a>
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_RCC_LSI2_SetTrimming>:
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_RCC_MSI_Enable>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_RCC_MSI_Disable>:
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4c:	f023 0301 	bic.w	r3, r3, #1
 8001a50:	6013      	str	r3, [r2, #0]
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_RCC_MSI_IsReady>:
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d101      	bne.n	8001a72 <LL_RCC_MSI_IsReady+0x16>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_RCC_MSI_IsReady+0x18>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_RCC_MSI_SetRange>:
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_MSI_GetRange>:
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ab6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2bb0      	cmp	r3, #176	; 0xb0
 8001abc:	d901      	bls.n	8001ac2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8001abe:	23b0      	movs	r3, #176	; 0xb0
 8001ac0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8001ac2:	687b      	ldr	r3, [r7, #4]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <LL_RCC_SetSysClkSource>:
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f023 0203 	bic.w	r2, r3, #3
 8001b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <LL_RCC_GetSysClkSource>:
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_RCC_SetAHBPrescaler>:
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b083      	sub	sp, #12
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <LL_C2_RCC_SetAHBPrescaler>:
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <LL_RCC_SetAHB4Prescaler>:
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b9e:	f023 020f 	bic.w	r2, r3, #15
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_RCC_SetAPB1Prescaler>:
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_RCC_SetAPB2Prescaler>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_RCC_GetAHBPrescaler>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_GetAHB4Prescaler>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_RCC_GetAPB1Prescaler>:
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_GetAPB2Prescaler>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cbe:	d101      	bne.n	8001cc4 <LL_RCC_PLL_IsReady+0x18>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <LL_RCC_PLL_IsReady+0x1a>
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d44:	d101      	bne.n	8001d4a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d6a:	d101      	bne.n	8001d70 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d101      	bne.n	8001d96 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001db4:	d101      	bne.n	8001dba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dd8:	d101      	bne.n	8001dde <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b08d      	sub	sp, #52	; 0x34
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e363      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 808d 	beq.w	8001f26 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0c:	f7ff fe89 	bl	8001b22 <LL_RCC_GetSysClkSource>
 8001e10:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e12:	f7ff ff82 	bl	8001d1a <LL_RCC_PLL_GetMainSource>
 8001e16:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x3e>
 8001e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e20:	2b0c      	cmp	r3, #12
 8001e22:	d147      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d144      	bne.n	8001eb4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e347      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e3a:	f7ff fe34 	bl	8001aa6 <LL_RCC_MSI_GetRange>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	429c      	cmp	r4, r3
 8001e42:	d914      	bls.n	8001e6e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 fd2f 	bl	80028ac <RCC_SetFlashLatencyFromMSIRange>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e336      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe0e 	bl	8001a7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe32 	bl	8001ad0 <LL_RCC_MSI_SetCalibTrimming>
 8001e6c:	e013      	b.n	8001e96 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fe03 	bl	8001a7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fe27 	bl	8001ad0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fd10 	bl	80028ac <RCC_SetFlashLatencyFromMSIRange>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e317      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e96:	f000 fcc9 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4aa4      	ldr	r2, [pc, #656]	; (8002130 <HAL_RCC_OscConfig+0x344>)
 8001e9e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ea0:	4ba4      	ldr	r3, [pc, #656]	; (8002134 <HAL_RCC_OscConfig+0x348>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fff3 	bl	8000e90 <HAL_InitTick>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d039      	beq.n	8001f24 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e308      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01e      	beq.n	8001efa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ebc:	f7ff fdb0 	bl	8001a20 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff f834 	bl	8000f2c <HAL_GetTick>
 8001ec4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ec8:	f7ff f830 	bl	8000f2c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e2f5      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001eda:	f7ff fdbf 	bl	8001a5c <LL_RCC_MSI_IsReady>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f1      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fdc8 	bl	8001a7e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fdec 	bl	8001ad0 <LL_RCC_MSI_SetCalibTrimming>
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001efa:	f7ff fda0 	bl	8001a3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001efe:	f7ff f815 	bl	8000f2c <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f06:	f7ff f811 	bl	8000f2c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e2d6      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f18:	f7ff fda0 	bl	8001a5c <LL_RCC_MSI_IsReady>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f1      	bne.n	8001f06 <HAL_RCC_OscConfig+0x11a>
 8001f22:	e000      	b.n	8001f26 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f24:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d047      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f32:	f7ff fdf6 	bl	8001b22 <LL_RCC_GetSysClkSource>
 8001f36:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f38:	f7ff feef 	bl	8001d1a <LL_RCC_PLL_GetMainSource>
 8001f3c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f3e:	6a3b      	ldr	r3, [r7, #32]
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d005      	beq.n	8001f50 <HAL_RCC_OscConfig+0x164>
 8001f44:	6a3b      	ldr	r3, [r7, #32]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	d108      	bne.n	8001f5c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d105      	bne.n	8001f5c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d134      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e2b4      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d102      	bne.n	8001f6c <HAL_RCC_OscConfig+0x180>
 8001f66:	f7ff fbdd 	bl	8001724 <LL_RCC_HSE_Enable>
 8001f6a:	e001      	b.n	8001f70 <HAL_RCC_OscConfig+0x184>
 8001f6c:	f7ff fbe9 	bl	8001742 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d012      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f78:	f7fe ffd8 	bl	8000f2c <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f80:	f7fe ffd4 	bl	8000f2c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e299      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f92:	f7ff fbe5 	bl	8001760 <LL_RCC_HSE_IsReady>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f1      	beq.n	8001f80 <HAL_RCC_OscConfig+0x194>
 8001f9c:	e011      	b.n	8001fc2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ffc5 	bl	8000f2c <HAL_GetTick>
 8001fa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa6:	f7fe ffc1 	bl	8000f2c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e286      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fb8:	f7ff fbd2 	bl	8001760 <LL_RCC_HSE_IsReady>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f1      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d04c      	beq.n	8002068 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	f7ff fda8 	bl	8001b22 <LL_RCC_GetSysClkSource>
 8001fd2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd4:	f7ff fea1 	bl	8001d1a <LL_RCC_PLL_GetMainSource>
 8001fd8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_OscConfig+0x200>
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d10e      	bne.n	8002004 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d10b      	bne.n	8002004 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e266      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fbf1 	bl	80017e4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002002:	e031      	b.n	8002068 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d019      	beq.n	8002040 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	f7ff fbba 	bl	8001784 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe ff8c 	bl	8000f2c <HAL_GetTick>
 8002014:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002018:	f7fe ff88 	bl	8000f2c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e24d      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800202a:	f7ff fbc9 	bl	80017c0 <LL_RCC_HSI_IsReady>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f1      	beq.n	8002018 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fbd3 	bl	80017e4 <LL_RCC_HSI_SetCalibTrimming>
 800203e:	e013      	b.n	8002068 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002040:	f7ff fbaf 	bl	80017a2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe ff72 	bl	8000f2c <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe ff6e 	bl	8000f2c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e233      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800205e:	f7ff fbaf 	bl	80017c0 <LL_RCC_HSI_IsReady>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1f1      	bne.n	800204c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d106      	bne.n	8002082 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80a3 	beq.w	80021c8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d076      	beq.n	8002178 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d046      	beq.n	8002124 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002096:	f7ff fc66 	bl	8001966 <LL_RCC_LSI1_IsReady>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d113      	bne.n	80020c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80020a0:	f7ff fc3f 	bl	8001922 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020a4:	f7fe ff42 	bl	8000f2c <HAL_GetTick>
 80020a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020ac:	f7fe ff3e 	bl	8000f2c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e203      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020be:	f7ff fc52 	bl	8001966 <LL_RCC_LSI1_IsReady>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f1      	beq.n	80020ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80020c8:	f7ff fc5f 	bl	800198a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020cc:	f7fe ff2e 	bl	8000f2c <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020d4:	f7fe ff2a 	bl	8000f2c <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1ef      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020e6:	f7ff fc72 	bl	80019ce <LL_RCC_LSI2_IsReady>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f1      	beq.n	80020d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fc7c 	bl	80019f2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80020fa:	f7ff fc23 	bl	8001944 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe ff15 	bl	8000f2c <HAL_GetTick>
 8002102:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002106:	f7fe ff11 	bl	8000f2c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1d6      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002118:	f7ff fc25 	bl	8001966 <LL_RCC_LSI1_IsReady>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f1      	bne.n	8002106 <HAL_RCC_OscConfig+0x31a>
 8002122:	e051      	b.n	80021c8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002124:	f7ff fbfd 	bl	8001922 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002128:	f7fe ff00 	bl	8000f2c <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800212e:	e00c      	b.n	800214a <HAL_RCC_OscConfig+0x35e>
 8002130:	20000008 	.word	0x20000008
 8002134:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002138:	f7fe fef8 	bl	8000f2c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e1bd      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800214a:	f7ff fc0c 	bl	8001966 <LL_RCC_LSI1_IsReady>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f1      	beq.n	8002138 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002154:	f7ff fc2a 	bl	80019ac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800215a:	f7fe fee7 	bl	8000f2c <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b03      	cmp	r3, #3
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e1ac      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800216c:	f7ff fc2f 	bl	80019ce <LL_RCC_LSI2_IsReady>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f1      	bne.n	800215a <HAL_RCC_OscConfig+0x36e>
 8002176:	e027      	b.n	80021c8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002178:	f7ff fc18 	bl	80019ac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7fe fed6 	bl	8000f2c <HAL_GetTick>
 8002180:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002184:	f7fe fed2 	bl	8000f2c <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b03      	cmp	r3, #3
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e197      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002196:	f7ff fc1a 	bl	80019ce <LL_RCC_LSI2_IsReady>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f1      	bne.n	8002184 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80021a0:	f7ff fbd0 	bl	8001944 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7fe fec2 	bl	8000f2c <HAL_GetTick>
 80021a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ac:	f7fe febe 	bl	8000f2c <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e183      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021be:	f7ff fbd2 	bl	8001966 <LL_RCC_LSI1_IsReady>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f1      	bne.n	80021ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d05b      	beq.n	800228c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	4ba7      	ldr	r3, [pc, #668]	; (8002474 <HAL_RCC_OscConfig+0x688>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d114      	bne.n	800220a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021e0:	f7ff fa70 	bl	80016c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e4:	f7fe fea2 	bl	8000f2c <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ec:	f7fe fe9e 	bl	8000f2c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e163      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fe:	4b9d      	ldr	r3, [pc, #628]	; (8002474 <HAL_RCC_OscConfig+0x688>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x42c>
 8002212:	f7ff fb30 	bl	8001876 <LL_RCC_LSE_Enable>
 8002216:	e00c      	b.n	8002232 <HAL_RCC_OscConfig+0x446>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b05      	cmp	r3, #5
 800221e:	d104      	bne.n	800222a <HAL_RCC_OscConfig+0x43e>
 8002220:	f7ff fb4b 	bl	80018ba <LL_RCC_LSE_EnableBypass>
 8002224:	f7ff fb27 	bl	8001876 <LL_RCC_LSE_Enable>
 8002228:	e003      	b.n	8002232 <HAL_RCC_OscConfig+0x446>
 800222a:	f7ff fb35 	bl	8001898 <LL_RCC_LSE_Disable>
 800222e:	f7ff fb55 	bl	80018dc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d014      	beq.n	8002264 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7fe fe77 	bl	8000f2c <HAL_GetTick>
 800223e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fe73 	bl	8000f2c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e136      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002258:	f7ff fb51 	bl	80018fe <LL_RCC_LSE_IsReady>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0ef      	beq.n	8002242 <HAL_RCC_OscConfig+0x456>
 8002262:	e013      	b.n	800228c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe fe62 	bl	8000f2c <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7fe fe5e 	bl	8000f2c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e121      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002282:	f7ff fb3c 	bl	80018fe <LL_RCC_LSE_IsReady>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ef      	bne.n	800226c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02c      	beq.n	80022f2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	d014      	beq.n	80022ca <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022a0:	f7ff fab5 	bl	800180e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fe42 	bl	8000f2c <HAL_GetTick>
 80022a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022ac:	f7fe fe3e 	bl	8000f2c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e103      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022be:	f7ff fac8 	bl	8001852 <LL_RCC_HSI48_IsReady>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f1      	beq.n	80022ac <HAL_RCC_OscConfig+0x4c0>
 80022c8:	e013      	b.n	80022f2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022ca:	f7ff fab1 	bl	8001830 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ce:	f7fe fe2d 	bl	8000f2c <HAL_GetTick>
 80022d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d6:	f7fe fe29 	bl	8000f2c <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0ee      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80022e8:	f7ff fab3 	bl	8001852 <LL_RCC_HSI48_IsReady>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f1      	bne.n	80022d6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80e4 	beq.w	80024c4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022fc:	f7ff fc11 	bl	8001b22 <LL_RCC_GetSysClkSource>
 8002300:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	2b02      	cmp	r3, #2
 8002310:	f040 80b4 	bne.w	800247c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0203 	and.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	429a      	cmp	r2, r3
 8002320:	d123      	bne.n	800236a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d11c      	bne.n	800236a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d114      	bne.n	800236a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d10d      	bne.n	800236a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002358:	429a      	cmp	r2, r3
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d05d      	beq.n	8002426 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b0c      	cmp	r3, #12
 800236e:	d058      	beq.n	8002422 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0a1      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002382:	f7ff fc84 	bl	8001c8e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002386:	f7fe fdd1 	bl	8000f2c <HAL_GetTick>
 800238a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238e:	f7fe fdcd 	bl	8000f2c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e092      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ef      	bne.n	800238e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	4b30      	ldr	r3, [pc, #192]	; (8002478 <HAL_RCC_OscConfig+0x68c>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023c0:	4311      	orrs	r1, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c6:	0212      	lsls	r2, r2, #8
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023da:	430a      	orrs	r2, r1
 80023dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023e4:	f7ff fc44 	bl	8001c70 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023f8:	f7fe fd98 	bl	8000f2c <HAL_GetTick>
 80023fc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fd94 	bl	8000f2c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e059      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0ef      	beq.n	8002400 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002420:	e050      	b.n	80024c4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e04f      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d147      	bne.n	80024c4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002434:	f7ff fc1c 	bl	8001c70 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002446:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002448:	f7fe fd70 	bl	8000f2c <HAL_GetTick>
 800244c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fd6c 	bl	8000f2c <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e031      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ef      	beq.n	8002450 <HAL_RCC_OscConfig+0x664>
 8002470:	e028      	b.n	80024c4 <HAL_RCC_OscConfig+0x6d8>
 8002472:	bf00      	nop
 8002474:	58000400 	.word	0x58000400
 8002478:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d01e      	beq.n	80024c0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	f7ff fc04 	bl	8001c8e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fd51 	bl	8000f2c <HAL_GetTick>
 800248a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe fd4d 	bl	8000f2c <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e012      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ef      	bne.n	800248e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_OscConfig+0x6e4>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	60cb      	str	r3, [r1, #12]
 80024be:	e001      	b.n	80024c4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3734      	adds	r7, #52	; 0x34
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}
 80024ce:	bf00      	nop
 80024d0:	eefefffc 	.word	0xeefefffc

080024d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e12d      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b98      	ldr	r3, [pc, #608]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d91b      	bls.n	800252e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b95      	ldr	r3, [pc, #596]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	4993      	ldr	r1, [pc, #588]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002506:	f7fe fd11 	bl	8000f2c <HAL_GetTick>
 800250a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250c:	e008      	b.n	8002520 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800250e:	f7fe fd0d 	bl	8000f2c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e111      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002520:	4b8a      	ldr	r3, [pc, #552]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d016      	beq.n	8002568 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fafb 	bl	8001b3a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002544:	f7fe fcf2 	bl	8000f2c <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800254a:	e008      	b.n	800255e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800254c:	f7fe fcee 	bl	8000f2c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0f2      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800255e:	f7ff fbe8 	bl	8001d32 <LL_RCC_IsActiveFlag_HPRE>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f1      	beq.n	800254c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d016      	beq.n	80025a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff faf2 	bl	8001b62 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800257e:	f7fe fcd5 	bl	8000f2c <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002586:	f7fe fcd1 	bl	8000f2c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e0d5      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002598:	f7ff fbdd 	bl	8001d56 <LL_RCC_IsActiveFlag_C2HPRE>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f1      	beq.n	8002586 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff faeb 	bl	8001b8e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fcb8 	bl	8000f2c <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025c0:	f7fe fcb4 	bl	8000f2c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e0b8      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025d2:	f7ff fbd3 	bl	8001d7c <LL_RCC_IsActiveFlag_SHDHPRE>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0f1      	beq.n	80025c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d016      	beq.n	8002616 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fae5 	bl	8001bbc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025f2:	f7fe fc9b 	bl	8000f2c <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025fa:	f7fe fc97 	bl	8000f2c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e09b      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800260c:	f7ff fbc9 	bl	8001da2 <LL_RCC_IsActiveFlag_PPRE1>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f1      	beq.n	80025fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d017      	beq.n	8002652 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fadb 	bl	8001be4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800262e:	f7fe fc7d 	bl	8000f2c <HAL_GetTick>
 8002632:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002636:	f7fe fc79 	bl	8000f2c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e07d      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002648:	f7ff fbbd 	bl	8001dc6 <LL_RCC_IsActiveFlag_PPRE2>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f1      	beq.n	8002636 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d043      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d106      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002666:	f7ff f87b 	bl	8001760 <LL_RCC_HSE_IsReady>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11e      	bne.n	80026ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e067      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d106      	bne.n	800268a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800267c:	f7ff fb16 	bl	8001cac <LL_RCC_PLL_IsReady>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d113      	bne.n	80026ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e05c      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002692:	f7ff f9e3 	bl	8001a5c <LL_RCC_MSI_IsReady>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d108      	bne.n	80026ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e051      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026a0:	f7ff f88e 	bl	80017c0 <LL_RCC_HSI_IsReady>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e04a      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fa21 	bl	8001afa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b8:	f7fe fc38 	bl	8000f2c <HAL_GetTick>
 80026bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026c0:	f7fe fc34 	bl	8000f2c <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e036      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	f7ff fa24 	bl	8001b22 <LL_RCC_GetSysClkSource>
 80026da:	4602      	mov	r2, r0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d1ec      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e6:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d21b      	bcs.n	800272c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f4:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 0207 	bic.w	r2, r3, #7
 80026fc:	4913      	ldr	r1, [pc, #76]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002704:	f7fe fc12 	bl	8000f2c <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	e008      	b.n	800271e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800270c:	f7fe fc0e 	bl	8000f2c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e012      	b.n	8002744 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_ClockConfig+0x278>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d1ef      	bne.n	800270c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800272c:	f000 f87e 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002730:	4603      	mov	r3, r0
 8002732:	4a07      	ldr	r2, [pc, #28]	; (8002750 <HAL_RCC_ClockConfig+0x27c>)
 8002734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002736:	f7fe fc05 	bl	8000f44 <HAL_GetTickPrio>
 800273a:	4603      	mov	r3, r0
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe fba7 	bl	8000e90 <HAL_InitTick>
 8002742:	4603      	mov	r3, r0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58004000 	.word	0x58004000
 8002750:	20000008 	.word	0x20000008

08002754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b590      	push	{r4, r7, lr}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275a:	f7ff f9e2 	bl	8001b22 <LL_RCC_GetSysClkSource>
 800275e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002766:	f7ff f99e 	bl	8001aa6 <LL_RCC_MSI_GetRange>
 800276a:	4603      	mov	r3, r0
 800276c:	091b      	lsrs	r3, r3, #4
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	4a2b      	ldr	r2, [pc, #172]	; (8002820 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e04b      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b04      	cmp	r3, #4
 8002780:	d102      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002782:	4b28      	ldr	r3, [pc, #160]	; (8002824 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	e045      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b08      	cmp	r3, #8
 800278c:	d10a      	bne.n	80027a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800278e:	f7fe ffb7 	bl	8001700 <LL_RCC_HSE_IsEnabledDiv2>
 8002792:	4603      	mov	r3, r0
 8002794:	2b01      	cmp	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_GetSysClockFreq+0xd0>)
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	e03a      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e037      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80027a4:	f7ff fab9 	bl	8001d1a <LL_RCC_PLL_GetMainSource>
 80027a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d003      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x64>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x6a>
 80027b6:	e00d      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027ba:	60bb      	str	r3, [r7, #8]
        break;
 80027bc:	e015      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027be:	f7fe ff9f 	bl	8001700 <LL_RCC_HSE_IsEnabledDiv2>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80027cc:	e00d      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80027ce:	4b16      	ldr	r3, [pc, #88]	; (8002828 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027d0:	60bb      	str	r3, [r7, #8]
        break;
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027d4:	f7ff f967 	bl	8001aa6 <LL_RCC_MSI_GetRange>
 80027d8:	4603      	mov	r3, r0
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	f003 030f 	and.w	r3, r3, #15
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <HAL_RCC_GetSysClockFreq+0xcc>)
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	60bb      	str	r3, [r7, #8]
        break;
 80027e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80027ea:	f7ff fa71 	bl	8001cd0 <LL_RCC_PLL_GetN>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	fb03 f402 	mul.w	r4, r3, r2
 80027f6:	f7ff fa84 	bl	8001d02 <LL_RCC_PLL_GetDivider>
 80027fa:	4603      	mov	r3, r0
 80027fc:	091b      	lsrs	r3, r3, #4
 80027fe:	3301      	adds	r3, #1
 8002800:	fbb4 f4f3 	udiv	r4, r4, r3
 8002804:	f7ff fa71 	bl	8001cea <LL_RCC_PLL_GetR>
 8002808:	4603      	mov	r3, r0
 800280a:	0f5b      	lsrs	r3, r3, #29
 800280c:	3301      	adds	r3, #1
 800280e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002812:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002814:	68fb      	ldr	r3, [r7, #12]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	08005460 	.word	0x08005460
 8002824:	00f42400 	.word	0x00f42400
 8002828:	01e84800 	.word	0x01e84800

0800282c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b598      	push	{r3, r4, r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002830:	f7ff ff90 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002834:	4604      	mov	r4, r0
 8002836:	f7ff f9e9 	bl	8001c0c <LL_RCC_GetAHBPrescaler>
 800283a:	4603      	mov	r3, r0
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a03      	ldr	r2, [pc, #12]	; (8002850 <HAL_RCC_GetHCLKFreq+0x24>)
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd98      	pop	{r3, r4, r7, pc}
 8002850:	08005400 	.word	0x08005400

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b598      	push	{r3, r4, r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002858:	f7ff ffe8 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800285c:	4604      	mov	r4, r0
 800285e:	f7ff f9ef 	bl	8001c40 <LL_RCC_GetAPB1Prescaler>
 8002862:	4603      	mov	r3, r0
 8002864:	0a1b      	lsrs	r3, r3, #8
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_RCC_GetPCLK1Freq+0x28>)
 800286c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd98      	pop	{r3, r4, r7, pc}
 800287c:	08005440 	.word	0x08005440

08002880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002880:	b598      	push	{r3, r4, r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002884:	f7ff ffd2 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002888:	4604      	mov	r4, r0
 800288a:	f7ff f9e5 	bl	8001c58 <LL_RCC_GetAPB2Prescaler>
 800288e:	4603      	mov	r3, r0
 8002890:	0adb      	lsrs	r3, r3, #11
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	4a04      	ldr	r2, [pc, #16]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd98      	pop	{r3, r4, r7, pc}
 80028a8:	08005440 	.word	0x08005440

080028ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2bb0      	cmp	r3, #176	; 0xb0
 80028b8:	d903      	bls.n	80028c2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	e007      	b.n	80028d2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	4a11      	ldr	r2, [pc, #68]	; (8002910 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80028d2:	f7ff f9a7 	bl	8001c24 <LL_RCC_GetAHB4Prescaler>
 80028d6:	4603      	mov	r3, r0
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80028e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	0c9c      	lsrs	r4, r3, #18
 80028f6:	f7fe fef5 	bl	80016e4 <HAL_PWREx_GetVoltageRange>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4620      	mov	r0, r4
 8002900:	f000 f80c 	bl	800291c <RCC_SetFlashLatency>
 8002904:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bd90      	pop	{r4, r7, pc}
 800290e:	bf00      	nop
 8002910:	08005460 	.word	0x08005460
 8002914:	08005400 	.word	0x08005400
 8002918:	431bde83 	.word	0x431bde83

0800291c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b093      	sub	sp, #76	; 0x4c
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <RCC_SetFlashLatency+0xe8>)
 8002928:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800292c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800292e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002932:	4a35      	ldr	r2, [pc, #212]	; (8002a08 <RCC_SetFlashLatency+0xec>)
 8002934:	f107 031c 	add.w	r3, r7, #28
 8002938:	ca07      	ldmia	r2, {r0, r1, r2}
 800293a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800293e:	4b33      	ldr	r3, [pc, #204]	; (8002a0c <RCC_SetFlashLatency+0xf0>)
 8002940:	f107 040c 	add.w	r4, r7, #12
 8002944:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800294a:	2300      	movs	r3, #0
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002954:	d11a      	bne.n	800298c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002956:	2300      	movs	r3, #0
 8002958:	643b      	str	r3, [r7, #64]	; 0x40
 800295a:	e013      	b.n	8002984 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800295c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	3348      	adds	r3, #72	; 0x48
 8002962:	443b      	add	r3, r7
 8002964:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	429a      	cmp	r2, r3
 800296c:	d807      	bhi.n	800297e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800296e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	3348      	adds	r3, #72	; 0x48
 8002974:	443b      	add	r3, r7
 8002976:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800297a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800297c:	e020      	b.n	80029c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800297e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002980:	3301      	adds	r3, #1
 8002982:	643b      	str	r3, [r7, #64]	; 0x40
 8002984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002986:	2b03      	cmp	r3, #3
 8002988:	d9e8      	bls.n	800295c <RCC_SetFlashLatency+0x40>
 800298a:	e019      	b.n	80029c0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800298c:	2300      	movs	r3, #0
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002990:	e013      	b.n	80029ba <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	3348      	adds	r3, #72	; 0x48
 8002998:	443b      	add	r3, r7
 800299a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d807      	bhi.n	80029b4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	3348      	adds	r3, #72	; 0x48
 80029aa:	443b      	add	r3, r7
 80029ac:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029b0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80029b2:	e005      	b.n	80029c0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b6:	3301      	adds	r3, #1
 80029b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d9e8      	bls.n	8002992 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <RCC_SetFlashLatency+0xf4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 0207 	bic.w	r2, r3, #7
 80029c8:	4911      	ldr	r1, [pc, #68]	; (8002a10 <RCC_SetFlashLatency+0xf4>)
 80029ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80029d0:	f7fe faac 	bl	8000f2c <HAL_GetTick>
 80029d4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80029d6:	e008      	b.n	80029ea <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029d8:	f7fe faa8 	bl	8000f2c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e007      	b.n	80029fa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <RCC_SetFlashLatency+0xf4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1ef      	bne.n	80029d8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	374c      	adds	r7, #76	; 0x4c
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd90      	pop	{r4, r7, pc}
 8002a02:	bf00      	nop
 8002a04:	080053d4 	.word	0x080053d4
 8002a08:	080053e4 	.word	0x080053e4
 8002a0c:	080053f0 	.word	0x080053f0
 8002a10:	58004000 	.word	0x58004000

08002a14 <LL_RCC_LSE_IsEnabled>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <LL_RCC_LSE_IsEnabled+0x18>
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e000      	b.n	8002a2e <LL_RCC_LSE_IsEnabled+0x1a>
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_RCC_LSE_IsReady>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d101      	bne.n	8002a50 <LL_RCC_LSE_IsReady+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_RCC_LSE_IsReady+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_RCC_MSI_EnablePLLMode>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6a:	f043 0304 	orr.w	r3, r3, #4
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_RCC_SetRFWKPClockSource>:
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <LL_RCC_SetSMPSClockSource>:
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f023 0203 	bic.w	r2, r3, #3
 8002ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_SetSMPSPrescaler>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002adc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_RCC_SetUSARTClockSource>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 0203 	bic.w	r2, r3, #3
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <LL_RCC_SetLPUARTClockSource>:
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_RCC_SetI2CClockSource>:
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b66:	43db      	mvns	r3, r3
 8002b68:	401a      	ands	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_SetLPTIMClockSource>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	041b      	lsls	r3, r3, #16
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	041b      	lsls	r3, r3, #16
 8002ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_RCC_SetSAIClockSource>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_RCC_SetRNGClockSource>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_RCC_SetCLK48ClockSource>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_RCC_SetUSBClockSource>:
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ffe3 	bl	8002c14 <LL_RCC_SetCLK48ClockSource>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <LL_RCC_SetADCClockSource>:
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <LL_RCC_SetRTCClockSource>:
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_GetRTCClockSource>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_RCC_ForceBackupDomainReset>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_RCC_ReleaseBackupDomainReset>:
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_RCC_PLLSAI1_Enable>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d1e:	6013      	str	r3, [r2, #0]
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_RCC_PLLSAI1_Disable>:
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d3c:	6013      	str	r3, [r2, #0]
}
 8002d3e:	bf00      	nop
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_RCC_PLLSAI1_IsReady>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5a:	d101      	bne.n	8002d60 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002d74:	2300      	movs	r3, #0
 8002d76:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d78:	2300      	movs	r3, #0
 8002d7a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d034      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d90:	d021      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002d92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d96:	d81b      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d9c:	d01d      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002d9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002da2:	d815      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dac:	d110      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dbe:	e00d      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f94d 	bl	8003064 <RCCEx_PLLSAI1_ConfigNP>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dce:	e005      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	77fb      	strb	r3, [r7, #31]
        break;
 8002dd4:	e002      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ddc:	7ffb      	ldrb	r3, [r7, #31]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d105      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fee8 	bl	8002bbc <LL_RCC_SetSAIClockSource>
 8002dec:	e001      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d046      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002dfe:	f7ff ff56 	bl	8002cae <LL_RCC_GetRTCClockSource>
 8002e02:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d03c      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e0e:	f7fe fc59 	bl	80016c4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff30 	bl	8002c82 <LL_RCC_SetRTCClockSource>
 8002e22:	e02e      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002e2e:	f7ff ff4b 	bl	8002cc8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002e32:	f7ff ff5a 	bl	8002cea <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002e4e:	f7ff fde1 	bl	8002a14 <LL_RCC_LSE_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d114      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e58:	f7fe f868 	bl	8000f2c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe f864 	bl	8000f2c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d902      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	77fb      	strb	r3, [r7, #31]
              break;
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e78:	f7ff fdde 	bl	8002a38 <LL_RCC_LSE_IsReady>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d1ee      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	77bb      	strb	r3, [r7, #30]
 8002e86:	e001      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e88:	7ffb      	ldrb	r3, [r7, #31]
 8002e8a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d004      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fe2a 	bl	8002af6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fe35 	bl	8002b22 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d004      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fe5d 	bl	8002b88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d004      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fe52 	bl	8002b88 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d004      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fe2a 	bl	8002b4e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0308 	and.w	r3, r3, #8
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fe1f 	bl	8002b4e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d022      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fe8d 	bl	8002c40 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f3e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f48:	d10b      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f8e3 	bl	800311a <RCCEx_PLLSAI1_ConfigNQ>
 8002f54:	4603      	mov	r3, r0
 8002f56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f5e:	7ffb      	ldrb	r3, [r7, #31]
 8002f60:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f80:	d003      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fe2a 	bl	8002be8 <LL_RCC_SetRNGClockSource>
 8002f94:	e00a      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7ff fe21 	bl	8002be8 <LL_RCC_SetRNGClockSource>
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fe34 	bl	8002c14 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d022      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fe3d 	bl	8002c56 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3304      	adds	r3, #4
 8003004:	4618      	mov	r0, r3
 8003006:	f000 f8e3 	bl	80031d0 <RCCEx_PLLSAI1_ConfigNR>
 800300a:	4603      	mov	r3, r0
 800300c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800300e:	7ffb      	ldrb	r3, [r7, #31]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003014:	7ffb      	ldrb	r3, [r7, #31]
 8003016:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d004      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fd26 	bl	8002a7a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fd45 	bl	8002ace <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fd2c 	bl	8002aa6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800304e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800305c:	f7ff fcfe 	bl	8002a5c <LL_RCC_MSI_EnablePLLMode>
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003070:	f7ff fe5b 	bl	8002d2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003074:	f7fd ff5a 	bl	8000f2c <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800307a:	e009      	b.n	8003090 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800307c:	f7fd ff56 	bl	8000f2c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d902      	bls.n	8003090 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	73fb      	strb	r3, [r7, #15]
      break;
 800308e:	e004      	b.n	800309a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003090:	f7ff fe5a 	bl	8002d48 <LL_RCC_PLLSAI1_IsReady>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f0      	bne.n	800307c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d137      	bne.n	8003110 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	021b      	lsls	r3, r3, #8
 80030b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b4:	4313      	orrs	r3, r2
 80030b6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80030b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ca:	4313      	orrs	r3, r2
 80030cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030ce:	f7ff fe1d 	bl	8002d0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d2:	f7fd ff2b 	bl	8000f2c <HAL_GetTick>
 80030d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030d8:	e009      	b.n	80030ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030da:	f7fd ff27 	bl	8000f2c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d902      	bls.n	80030ee <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	73fb      	strb	r3, [r7, #15]
        break;
 80030ec:	e004      	b.n	80030f8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030ee:	f7ff fe2b 	bl	8002d48 <LL_RCC_PLLSAI1_IsReady>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d1f0      	bne.n	80030da <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80030fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800310c:	4313      	orrs	r3, r2
 800310e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003126:	f7ff fe00 	bl	8002d2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800312a:	f7fd feff 	bl	8000f2c <HAL_GetTick>
 800312e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003130:	e009      	b.n	8003146 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003132:	f7fd fefb 	bl	8000f2c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d902      	bls.n	8003146 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	73fb      	strb	r3, [r7, #15]
      break;
 8003144:	e004      	b.n	8003150 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003146:	f7ff fdff 	bl	8002d48 <LL_RCC_PLLSAI1_IsReady>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1f0      	bne.n	8003132 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d137      	bne.n	80031c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316a:	4313      	orrs	r3, r2
 800316c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003180:	4313      	orrs	r3, r2
 8003182:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003184:	f7ff fdc2 	bl	8002d0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fd fed0 	bl	8000f2c <HAL_GetTick>
 800318c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800318e:	e009      	b.n	80031a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003190:	f7fd fecc 	bl	8000f2c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	73fb      	strb	r3, [r7, #15]
        break;
 80031a2:	e004      	b.n	80031ae <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031a4:	f7ff fdd0 	bl	8002d48 <LL_RCC_PLLSAI1_IsReady>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d1f0      	bne.n	8003190 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d108      	bne.n	80031c6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	4313      	orrs	r3, r2
 80031c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031dc:	f7ff fda5 	bl	8002d2a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031e0:	f7fd fea4 	bl	8000f2c <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031e6:	e009      	b.n	80031fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031e8:	f7fd fea0 	bl	8000f2c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d902      	bls.n	80031fc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	73fb      	strb	r3, [r7, #15]
      break;
 80031fa:	e004      	b.n	8003206 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031fc:	f7ff fda4 	bl	8002d48 <LL_RCC_PLLSAI1_IsReady>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d137      	bne.n	800327c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003220:	4313      	orrs	r3, r2
 8003222:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003236:	4313      	orrs	r3, r2
 8003238:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800323a:	f7ff fd67 	bl	8002d0c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800323e:	f7fd fe75 	bl	8000f2c <HAL_GetTick>
 8003242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003244:	e009      	b.n	800325a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003246:	f7fd fe71 	bl	8000f2c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d902      	bls.n	800325a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	73fb      	strb	r3, [r7, #15]
        break;
 8003258:	e004      	b.n	8003264 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800325a:	f7ff fd75 	bl	8002d48 <LL_RCC_PLLSAI1_IsReady>
 800325e:	4603      	mov	r3, r0
 8003260:	2b01      	cmp	r3, #1
 8003262:	d1f0      	bne.n	8003246 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d108      	bne.n	800327c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800326a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003278:	4313      	orrs	r3, r2
 800327a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800327c:	7bfb      	ldrb	r3, [r7, #15]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e09f      	b.n	80033da <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fd fbfc 	bl	8000aac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_RTC_Init+0x15c>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d07e      	beq.n	80033c6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	22ca      	movs	r2, #202	; 0xca
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2253      	movs	r2, #83	; 0x53
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f8ab 	bl	8003434 <RTC_EnterInitMode>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	22ff      	movs	r2, #255	; 0xff
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2204      	movs	r2, #4
 80032f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e067      	b.n	80033ca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800330c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68d2      	ldr	r2, [r2, #12]
 8003334:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6919      	ldr	r1, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	041a      	lsls	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0203 	bic.w	r2, r2, #3
 8003368:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b00      	cmp	r3, #0
 800338e:	d113      	bne.n	80033b8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f829 	bl	80033e8 <HAL_RTC_WaitForSynchro>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00d      	beq.n	80033b8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	22ff      	movs	r2, #255	; 0xff
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2204      	movs	r2, #4
 80033a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e010      	b.n	80033da <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	22ff      	movs	r2, #255	; 0xff
 80033be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40002800 	.word	0x40002800

080033e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80033fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003400:	f7fd fd94 	bl	8000f2c <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003406:	e009      	b.n	800341c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003408:	f7fd fd90 	bl	8000f2c <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003416:	d901      	bls.n	800341c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e007      	b.n	800342c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0ee      	beq.n	8003408 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	2b00      	cmp	r3, #0
 8003448:	d119      	bne.n	800347e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f04f 32ff 	mov.w	r2, #4294967295
 8003452:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003454:	f7fd fd6a 	bl	8000f2c <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800345a:	e009      	b.n	8003470 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800345c:	f7fd fd66 	bl	8000f2c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800346a:	d901      	bls.n	8003470 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e007      	b.n	8003480 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0ee      	beq.n	800345c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 3020 	ldrb.w	r3, [r3, #32]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800349e:	2302      	movs	r3, #2
 80034a0:	e0a8      	b.n	80035f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	22ca      	movs	r2, #202	; 0xca
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2253      	movs	r2, #83	; 0x53
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d020      	beq.n	8003512 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80034d0:	f7fd fd2c 	bl	8000f2c <HAL_GetTick>
 80034d4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80034d6:	e015      	b.n	8003504 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80034d8:	f7fd fd28 	bl	8000f2c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034e6:	d90d      	bls.n	8003504 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2203      	movs	r2, #3
 80034f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e077      	b.n	80035f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e2      	bne.n	80034d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003520:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003532:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003534:	f7fd fcfa 	bl	8000f2c <HAL_GetTick>
 8003538:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800353a:	e015      	b.n	8003568 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800353c:	f7fd fcf6 	bl	8000f2c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800354a:	d90d      	bls.n	8003568 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	22ff      	movs	r2, #255	; 0xff
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2203      	movs	r2, #3
 8003558:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e045      	b.n	80035f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0304 	and.w	r3, r3, #4
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0e2      	beq.n	800353c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0207 	bic.w	r2, r2, #7
 800358c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6899      	ldr	r1, [r3, #8]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800359e:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a4:	4a15      	ldr	r2, [pc, #84]	; (80035fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80035a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80035ae:	4b13      	ldr	r3, [pc, #76]	; (80035fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a12      	ldr	r2, [pc, #72]	; (80035fc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80035b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035d8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3718      	adds	r7, #24
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	58000800 	.word	0x58000800

08003600 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f818 	bl	800364c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800362c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800362e:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003630:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003634:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	58000800 	.word	0x58000800

0800364c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e049      	b.n	8003706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fa46 	bl	8000b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 fbd6 	bl	8003e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e049      	b.n	80037b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f841 	bl	80037bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2202      	movs	r2, #2
 800373e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3304      	adds	r3, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4610      	mov	r0, r2
 800374e:	f000 fb7f 	bl	8003e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d109      	bne.n	80037f4 <HAL_TIM_PWM_Start+0x24>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	bf14      	ite	ne
 80037ec:	2301      	movne	r3, #1
 80037ee:	2300      	moveq	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	e03c      	b.n	800386e <HAL_TIM_PWM_Start+0x9e>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d109      	bne.n	800380e <HAL_TIM_PWM_Start+0x3e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b01      	cmp	r3, #1
 8003804:	bf14      	ite	ne
 8003806:	2301      	movne	r3, #1
 8003808:	2300      	moveq	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	e02f      	b.n	800386e <HAL_TIM_PWM_Start+0x9e>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b08      	cmp	r3, #8
 8003812:	d109      	bne.n	8003828 <HAL_TIM_PWM_Start+0x58>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e022      	b.n	800386e <HAL_TIM_PWM_Start+0x9e>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	2b0c      	cmp	r3, #12
 800382c:	d109      	bne.n	8003842 <HAL_TIM_PWM_Start+0x72>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b01      	cmp	r3, #1
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e015      	b.n	800386e <HAL_TIM_PWM_Start+0x9e>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b10      	cmp	r3, #16
 8003846:	d109      	bne.n	800385c <HAL_TIM_PWM_Start+0x8c>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e008      	b.n	800386e <HAL_TIM_PWM_Start+0x9e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	bf14      	ite	ne
 8003868:	2301      	movne	r3, #1
 800386a:	2300      	moveq	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e079      	b.n	800396a <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d104      	bne.n	8003886 <HAL_TIM_PWM_Start+0xb6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	e023      	b.n	80038ce <HAL_TIM_PWM_Start+0xfe>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b04      	cmp	r3, #4
 800388a:	d104      	bne.n	8003896 <HAL_TIM_PWM_Start+0xc6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2202      	movs	r2, #2
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	e01b      	b.n	80038ce <HAL_TIM_PWM_Start+0xfe>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_PWM_Start+0xd6>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038a4:	e013      	b.n	80038ce <HAL_TIM_PWM_Start+0xfe>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b0c      	cmp	r3, #12
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0xe6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038b4:	e00b      	b.n	80038ce <HAL_TIM_PWM_Start+0xfe>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0xf6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c4:	e003      	b.n	80038ce <HAL_TIM_PWM_Start+0xfe>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fe44 	bl	8004564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a24      	ldr	r2, [pc, #144]	; (8003974 <HAL_TIM_PWM_Start+0x1a4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d009      	beq.n	80038fa <HAL_TIM_PWM_Start+0x12a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a23      	ldr	r2, [pc, #140]	; (8003978 <HAL_TIM_PWM_Start+0x1a8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_TIM_PWM_Start+0x12a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a21      	ldr	r2, [pc, #132]	; (800397c <HAL_TIM_PWM_Start+0x1ac>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_Start+0x12e>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_TIM_PWM_Start+0x130>
 80038fe:	2300      	movs	r3, #0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003912:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a16      	ldr	r2, [pc, #88]	; (8003974 <HAL_TIM_PWM_Start+0x1a4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_TIM_PWM_Start+0x158>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003926:	d115      	bne.n	8003954 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_TIM_PWM_Start+0x1b0>)
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b06      	cmp	r3, #6
 8003938:	d015      	beq.n	8003966 <HAL_TIM_PWM_Start+0x196>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003940:	d011      	beq.n	8003966 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003952:	e008      	b.n	8003966 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e000      	b.n	8003968 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40012c00 	.word	0x40012c00
 8003978:	40014400 	.word	0x40014400
 800397c:	40014800 	.word	0x40014800
 8003980:	00010007 	.word	0x00010007

08003984 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	6839      	ldr	r1, [r7, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fde4 	bl	8004564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <HAL_TIM_PWM_Stop+0x104>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_PWM_Stop+0x36>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a38      	ldr	r2, [pc, #224]	; (8003a8c <HAL_TIM_PWM_Stop+0x108>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <HAL_TIM_PWM_Stop+0x36>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a36      	ldr	r2, [pc, #216]	; (8003a90 <HAL_TIM_PWM_Stop+0x10c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PWM_Stop+0x3a>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_TIM_PWM_Stop+0x3c>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d017      	beq.n	80039f4 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10f      	bne.n	80039f4 <HAL_TIM_PWM_Stop+0x70>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6a1a      	ldr	r2, [r3, #32]
 80039da:	f240 4344 	movw	r3, #1092	; 0x444
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d107      	bne.n	80039f4 <HAL_TIM_PWM_Stop+0x70>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10f      	bne.n	8003a24 <HAL_TIM_PWM_Stop+0xa0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6a1a      	ldr	r2, [r3, #32]
 8003a0a:	f240 4344 	movw	r3, #1092	; 0x444
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_TIM_PWM_Stop+0xa0>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <HAL_TIM_PWM_Stop+0xb0>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a32:	e023      	b.n	8003a7c <HAL_TIM_PWM_Stop+0xf8>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d104      	bne.n	8003a44 <HAL_TIM_PWM_Stop+0xc0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a42:	e01b      	b.n	8003a7c <HAL_TIM_PWM_Stop+0xf8>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	d104      	bne.n	8003a54 <HAL_TIM_PWM_Stop+0xd0>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a52:	e013      	b.n	8003a7c <HAL_TIM_PWM_Stop+0xf8>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b0c      	cmp	r3, #12
 8003a58:	d104      	bne.n	8003a64 <HAL_TIM_PWM_Stop+0xe0>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a62:	e00b      	b.n	8003a7c <HAL_TIM_PWM_Stop+0xf8>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d104      	bne.n	8003a74 <HAL_TIM_PWM_Stop+0xf0>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a72:	e003      	b.n	8003a7c <HAL_TIM_PWM_Stop+0xf8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40014400 	.word	0x40014400
 8003a90:	40014800 	.word	0x40014800

08003a94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0ff      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b14      	cmp	r3, #20
 8003abe:	f200 80f0 	bhi.w	8003ca2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003b1d 	.word	0x08003b1d
 8003acc:	08003ca3 	.word	0x08003ca3
 8003ad0:	08003ca3 	.word	0x08003ca3
 8003ad4:	08003ca3 	.word	0x08003ca3
 8003ad8:	08003b5d 	.word	0x08003b5d
 8003adc:	08003ca3 	.word	0x08003ca3
 8003ae0:	08003ca3 	.word	0x08003ca3
 8003ae4:	08003ca3 	.word	0x08003ca3
 8003ae8:	08003b9f 	.word	0x08003b9f
 8003aec:	08003ca3 	.word	0x08003ca3
 8003af0:	08003ca3 	.word	0x08003ca3
 8003af4:	08003ca3 	.word	0x08003ca3
 8003af8:	08003bdf 	.word	0x08003bdf
 8003afc:	08003ca3 	.word	0x08003ca3
 8003b00:	08003ca3 	.word	0x08003ca3
 8003b04:	08003ca3 	.word	0x08003ca3
 8003b08:	08003c21 	.word	0x08003c21
 8003b0c:	08003ca3 	.word	0x08003ca3
 8003b10:	08003ca3 	.word	0x08003ca3
 8003b14:	08003ca3 	.word	0x08003ca3
 8003b18:	08003c61 	.word	0x08003c61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68b9      	ldr	r1, [r7, #8]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fa04 	bl	8003f30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f042 0208 	orr.w	r2, r2, #8
 8003b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 0204 	bic.w	r2, r2, #4
 8003b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6999      	ldr	r1, [r3, #24]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	619a      	str	r2, [r3, #24]
      break;
 8003b5a:	e0a5      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fa60 	bl	8004028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699a      	ldr	r2, [r3, #24]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6999      	ldr	r1, [r3, #24]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	619a      	str	r2, [r3, #24]
      break;
 8003b9c:	e084      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fab9 	bl	800411c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0208 	orr.w	r2, r2, #8
 8003bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69da      	ldr	r2, [r3, #28]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0204 	bic.w	r2, r2, #4
 8003bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69d9      	ldr	r1, [r3, #28]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	691a      	ldr	r2, [r3, #16]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	61da      	str	r2, [r3, #28]
      break;
 8003bdc:	e064      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fb11 	bl	800420c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69da      	ldr	r2, [r3, #28]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69da      	ldr	r2, [r3, #28]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	69d9      	ldr	r1, [r3, #28]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	021a      	lsls	r2, r3, #8
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	61da      	str	r2, [r3, #28]
      break;
 8003c1e:	e043      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fb4e 	bl	80042c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0208 	orr.w	r2, r2, #8
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0204 	bic.w	r2, r2, #4
 8003c4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c5e:	e023      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fb86 	bl	8004378 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop

08003cbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e0b6      	b.n	8003e46 <HAL_TIM_ConfigClockSource+0x18a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d14:	d03e      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0xd8>
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	f200 8087 	bhi.w	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	f000 8086 	beq.w	8003e32 <HAL_TIM_ConfigClockSource+0x176>
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	d87f      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d2c:	2b70      	cmp	r3, #112	; 0x70
 8003d2e:	d01a      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0xaa>
 8003d30:	2b70      	cmp	r3, #112	; 0x70
 8003d32:	d87b      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d34:	2b60      	cmp	r3, #96	; 0x60
 8003d36:	d050      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x11e>
 8003d38:	2b60      	cmp	r3, #96	; 0x60
 8003d3a:	d877      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d3c:	2b50      	cmp	r3, #80	; 0x50
 8003d3e:	d03c      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0xfe>
 8003d40:	2b50      	cmp	r3, #80	; 0x50
 8003d42:	d873      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d058      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x13e>
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d86f      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d4c:	2b30      	cmp	r3, #48	; 0x30
 8003d4e:	d064      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x15e>
 8003d50:	2b30      	cmp	r3, #48	; 0x30
 8003d52:	d86b      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d060      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x15e>
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d867      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d05c      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x15e>
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d05a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x15e>
 8003d64:	e062      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d76:	f000 fbd5 	bl	8004524 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	609a      	str	r2, [r3, #8]
      break;
 8003d92:	e04f      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003da4:	f000 fbbe 	bl	8004524 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db6:	609a      	str	r2, [r3, #8]
      break;
 8003db8:	e03c      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fb30 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2150      	movs	r1, #80	; 0x50
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb89 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e02c      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003de6:	461a      	mov	r2, r3
 8003de8:	f000 fb4f 	bl	800448a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2160      	movs	r1, #96	; 0x60
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fb79 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003df8:	e01c      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e06:	461a      	mov	r2, r3
 8003e08:	f000 fb10 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fb69 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003e18:	e00c      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f000 fb60 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 8003e2a:	e003      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e30:	e000      	b.n	8003e34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a30      	ldr	r2, [pc, #192]	; (8003f24 <TIM_Base_SetConfig+0xd4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_Base_SetConfig+0x20>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6e:	d108      	bne.n	8003e82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a27      	ldr	r2, [pc, #156]	; (8003f24 <TIM_Base_SetConfig+0xd4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <TIM_Base_SetConfig+0x52>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d007      	beq.n	8003ea2 <TIM_Base_SetConfig+0x52>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <TIM_Base_SetConfig+0xd8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <TIM_Base_SetConfig+0x52>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a23      	ldr	r2, [pc, #140]	; (8003f2c <TIM_Base_SetConfig+0xdc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d108      	bne.n	8003eb4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <TIM_Base_SetConfig+0xd4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_Base_SetConfig+0xa0>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a11      	ldr	r2, [pc, #68]	; (8003f28 <TIM_Base_SetConfig+0xd8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_Base_SetConfig+0xa0>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a10      	ldr	r2, [pc, #64]	; (8003f2c <TIM_Base_SetConfig+0xdc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d103      	bne.n	8003ef8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f023 0201 	bic.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	611a      	str	r2, [r3, #16]
  }
}
 8003f16:	bf00      	nop
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40012c00 	.word	0x40012c00
 8003f28:	40014400 	.word	0x40014400
 8003f2c:	40014800 	.word	0x40014800

08003f30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f023 0201 	bic.w	r2, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 0302 	bic.w	r3, r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a24      	ldr	r2, [pc, #144]	; (800401c <TIM_OC1_SetConfig+0xec>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d007      	beq.n	8003fa0 <TIM_OC1_SetConfig+0x70>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a23      	ldr	r2, [pc, #140]	; (8004020 <TIM_OC1_SetConfig+0xf0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d003      	beq.n	8003fa0 <TIM_OC1_SetConfig+0x70>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a22      	ldr	r2, [pc, #136]	; (8004024 <TIM_OC1_SetConfig+0xf4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d10c      	bne.n	8003fba <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f023 0308 	bic.w	r3, r3, #8
 8003fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 0304 	bic.w	r3, r3, #4
 8003fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a17      	ldr	r2, [pc, #92]	; (800401c <TIM_OC1_SetConfig+0xec>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_OC1_SetConfig+0xa2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <TIM_OC1_SetConfig+0xf4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_OC1_SetConfig+0xa2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a14      	ldr	r2, [pc, #80]	; (8004020 <TIM_OC1_SetConfig+0xf0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d111      	bne.n	8003ff6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40014800 	.word	0x40014800
 8004024:	40014400 	.word	0x40014400

08004028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 0210 	bic.w	r2, r3, #16
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0320 	bic.w	r3, r3, #32
 8004076:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	4313      	orrs	r3, r2
 8004082:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <TIM_OC2_SetConfig+0xe8>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d10d      	bne.n	80040a8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <TIM_OC2_SetConfig+0xe8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <TIM_OC2_SetConfig+0x98>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a18      	ldr	r2, [pc, #96]	; (8004114 <TIM_OC2_SetConfig+0xec>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <TIM_OC2_SetConfig+0x98>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a17      	ldr	r2, [pc, #92]	; (8004118 <TIM_OC2_SetConfig+0xf0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d113      	bne.n	80040e8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	621a      	str	r2, [r3, #32]
}
 8004102:	bf00      	nop
 8004104:	371c      	adds	r7, #28
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40014400 	.word	0x40014400
 8004118:	40014800 	.word	0x40014800

0800411c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0303 	bic.w	r3, r3, #3
 8004156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	4313      	orrs	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	021b      	lsls	r3, r3, #8
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a21      	ldr	r2, [pc, #132]	; (8004200 <TIM_OC3_SetConfig+0xe4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d10d      	bne.n	800419a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a18      	ldr	r2, [pc, #96]	; (8004200 <TIM_OC3_SetConfig+0xe4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d007      	beq.n	80041b2 <TIM_OC3_SetConfig+0x96>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <TIM_OC3_SetConfig+0xe8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d003      	beq.n	80041b2 <TIM_OC3_SetConfig+0x96>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a16      	ldr	r2, [pc, #88]	; (8004208 <TIM_OC3_SetConfig+0xec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d113      	bne.n	80041da <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	621a      	str	r2, [r3, #32]
}
 80041f4:	bf00      	nop
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800

0800420c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800425a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	031b      	lsls	r3, r3, #12
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a14      	ldr	r2, [pc, #80]	; (80042bc <TIM_OC4_SetConfig+0xb0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d007      	beq.n	8004280 <TIM_OC4_SetConfig+0x74>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a13      	ldr	r2, [pc, #76]	; (80042c0 <TIM_OC4_SetConfig+0xb4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d003      	beq.n	8004280 <TIM_OC4_SetConfig+0x74>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a12      	ldr	r2, [pc, #72]	; (80042c4 <TIM_OC4_SetConfig+0xb8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d109      	bne.n	8004294 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004286:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	019b      	lsls	r3, r3, #6
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40012c00 	.word	0x40012c00
 80042c0:	40014400 	.word	0x40014400
 80042c4:	40014800 	.word	0x40014800

080042c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800430c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a13      	ldr	r2, [pc, #76]	; (800436c <TIM_OC5_SetConfig+0xa4>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d007      	beq.n	8004332 <TIM_OC5_SetConfig+0x6a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a12      	ldr	r2, [pc, #72]	; (8004370 <TIM_OC5_SetConfig+0xa8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_OC5_SetConfig+0x6a>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a11      	ldr	r2, [pc, #68]	; (8004374 <TIM_OC5_SetConfig+0xac>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d109      	bne.n	8004346 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004338:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	40012c00 	.word	0x40012c00
 8004370:	40014400 	.word	0x40014400
 8004374:	40014800 	.word	0x40014800

08004378 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	051b      	lsls	r3, r3, #20
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a14      	ldr	r2, [pc, #80]	; (8004420 <TIM_OC6_SetConfig+0xa8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d007      	beq.n	80043e4 <TIM_OC6_SetConfig+0x6c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a13      	ldr	r2, [pc, #76]	; (8004424 <TIM_OC6_SetConfig+0xac>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_OC6_SetConfig+0x6c>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a12      	ldr	r2, [pc, #72]	; (8004428 <TIM_OC6_SetConfig+0xb0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d109      	bne.n	80043f8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	029b      	lsls	r3, r3, #10
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	621a      	str	r2, [r3, #32]
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40012c00 	.word	0x40012c00
 8004424:	40014400 	.word	0x40014400
 8004428:	40014800 	.word	0x40014800

0800442c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 030a 	bic.w	r3, r3, #10
 8004468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448a:	b480      	push	{r7}
 800448c:	b087      	sub	sp, #28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a1b      	ldr	r3, [r3, #32]
 80044a0:	f023 0210 	bic.w	r2, r3, #16
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	031b      	lsls	r3, r3, #12
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	4313      	orrs	r3, r2
 80044be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	f043 0307 	orr.w	r3, r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	021a      	lsls	r2, r3, #8
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	431a      	orrs	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4313      	orrs	r3, r2
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	609a      	str	r2, [r3, #8]
}
 8004558:	bf00      	nop
 800455a:	371c      	adds	r7, #28
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a1a      	ldr	r2, [r3, #32]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	43db      	mvns	r3, r3
 8004586:	401a      	ands	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
}
 80045a2:	bf00      	nop
 80045a4:	371c      	adds	r7, #28
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d101      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e04a      	b.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1f      	ldr	r2, [pc, #124]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d108      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80045f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4313      	orrs	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a12      	ldr	r2, [pc, #72]	; (800466c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004630:	d10c      	bne.n	800464c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	4313      	orrs	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40012c00 	.word	0x40012c00

08004670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004688:	2302      	movs	r3, #2
 800468a:	e06e      	b.n	800476a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a17      	ldr	r2, [pc, #92]	; (8004778 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d11c      	bne.n	8004758 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	051b      	lsls	r3, r3, #20
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	4313      	orrs	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	4313      	orrs	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00

0800477c <LL_RCC_GetUSARTClockSource>:
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004788:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4013      	ands	r3, r2
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <LL_RCC_GetLPUARTClockSource>:
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80047a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4013      	ands	r3, r2
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e042      	b.n	8004854 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fc f9d9 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2224      	movs	r2, #36	; 0x24
 80047ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa50 	bl	8004cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f825 	bl	800485c <UART_SetConfig>
 8004812:	4603      	mov	r3, r0
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e01b      	b.n	8004854 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800483a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 facf 	bl	8004df0 <UART_CheckIdleState>
 8004852:	4603      	mov	r3, r0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004860:	b08c      	sub	sp, #48	; 0x30
 8004862:	af00      	add	r7, sp, #0
 8004864:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004866:	2300      	movs	r3, #0
 8004868:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	431a      	orrs	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	431a      	orrs	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	4313      	orrs	r3, r2
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4baf      	ldr	r3, [pc, #700]	; (8004b48 <UART_SetConfig+0x2ec>)
 800488c:	4013      	ands	r3, r2
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004894:	430b      	orrs	r3, r1
 8004896:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4aa4      	ldr	r2, [pc, #656]	; (8004b4c <UART_SetConfig+0x2f0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d004      	beq.n	80048c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048c4:	4313      	orrs	r3, r2
 80048c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80048d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048dc:	430b      	orrs	r3, r1
 80048de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	f023 010f 	bic.w	r1, r3, #15
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a95      	ldr	r2, [pc, #596]	; (8004b50 <UART_SetConfig+0x2f4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d125      	bne.n	800494c <UART_SetConfig+0xf0>
 8004900:	2003      	movs	r0, #3
 8004902:	f7ff ff3b 	bl	800477c <LL_RCC_GetUSARTClockSource>
 8004906:	4603      	mov	r3, r0
 8004908:	2b03      	cmp	r3, #3
 800490a:	d81b      	bhi.n	8004944 <UART_SetConfig+0xe8>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <UART_SetConfig+0xb8>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004925 	.word	0x08004925
 8004918:	08004935 	.word	0x08004935
 800491c:	0800492d 	.word	0x0800492d
 8004920:	0800493d 	.word	0x0800493d
 8004924:	2301      	movs	r3, #1
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492a:	e042      	b.n	80049b2 <UART_SetConfig+0x156>
 800492c:	2302      	movs	r3, #2
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004932:	e03e      	b.n	80049b2 <UART_SetConfig+0x156>
 8004934:	2304      	movs	r3, #4
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493a:	e03a      	b.n	80049b2 <UART_SetConfig+0x156>
 800493c:	2308      	movs	r3, #8
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e036      	b.n	80049b2 <UART_SetConfig+0x156>
 8004944:	2310      	movs	r3, #16
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494a:	e032      	b.n	80049b2 <UART_SetConfig+0x156>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a7e      	ldr	r2, [pc, #504]	; (8004b4c <UART_SetConfig+0x2f0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d12a      	bne.n	80049ac <UART_SetConfig+0x150>
 8004956:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800495a:	f7ff ff1f 	bl	800479c <LL_RCC_GetLPUARTClockSource>
 800495e:	4603      	mov	r3, r0
 8004960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004964:	d01a      	beq.n	800499c <UART_SetConfig+0x140>
 8004966:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800496a:	d81b      	bhi.n	80049a4 <UART_SetConfig+0x148>
 800496c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004970:	d00c      	beq.n	800498c <UART_SetConfig+0x130>
 8004972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004976:	d815      	bhi.n	80049a4 <UART_SetConfig+0x148>
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <UART_SetConfig+0x128>
 800497c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004980:	d008      	beq.n	8004994 <UART_SetConfig+0x138>
 8004982:	e00f      	b.n	80049a4 <UART_SetConfig+0x148>
 8004984:	2300      	movs	r3, #0
 8004986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498a:	e012      	b.n	80049b2 <UART_SetConfig+0x156>
 800498c:	2302      	movs	r3, #2
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004992:	e00e      	b.n	80049b2 <UART_SetConfig+0x156>
 8004994:	2304      	movs	r3, #4
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499a:	e00a      	b.n	80049b2 <UART_SetConfig+0x156>
 800499c:	2308      	movs	r3, #8
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a2:	e006      	b.n	80049b2 <UART_SetConfig+0x156>
 80049a4:	2310      	movs	r3, #16
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049aa:	e002      	b.n	80049b2 <UART_SetConfig+0x156>
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <UART_SetConfig+0x2f0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	f040 8097 	bne.w	8004aec <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d823      	bhi.n	8004a0e <UART_SetConfig+0x1b2>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <UART_SetConfig+0x170>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049f1 	.word	0x080049f1
 80049d0:	08004a0f 	.word	0x08004a0f
 80049d4:	080049f9 	.word	0x080049f9
 80049d8:	08004a0f 	.word	0x08004a0f
 80049dc:	080049ff 	.word	0x080049ff
 80049e0:	08004a0f 	.word	0x08004a0f
 80049e4:	08004a0f 	.word	0x08004a0f
 80049e8:	08004a0f 	.word	0x08004a0f
 80049ec:	08004a07 	.word	0x08004a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049f0:	f7fd ff30 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 80049f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049f6:	e010      	b.n	8004a1a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049f8:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <UART_SetConfig+0x2f8>)
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049fc:	e00d      	b.n	8004a1a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049fe:	f7fd fea9 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8004a02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a04:	e009      	b.n	8004a1a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a0c:	e005      	b.n	8004a1a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 812b 	beq.w	8004c78 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	4a4c      	ldr	r2, [pc, #304]	; (8004b58 <UART_SetConfig+0x2fc>)
 8004a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d305      	bcc.n	8004a52 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d903      	bls.n	8004a5a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a58:	e10e      	b.n	8004c78 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	60fa      	str	r2, [r7, #12]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a66:	4a3c      	ldr	r2, [pc, #240]	; (8004b58 <UART_SetConfig+0x2fc>)
 8004a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	2200      	movs	r2, #0
 8004a70:	603b      	str	r3, [r7, #0]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a7c:	f7fb fb7e 	bl	800017c <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	020b      	lsls	r3, r1, #8
 8004a92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a96:	0202      	lsls	r2, r0, #8
 8004a98:	6979      	ldr	r1, [r7, #20]
 8004a9a:	6849      	ldr	r1, [r1, #4]
 8004a9c:	0849      	lsrs	r1, r1, #1
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	4605      	mov	r5, r0
 8004aa4:	eb12 0804 	adds.w	r8, r2, r4
 8004aa8:	eb43 0905 	adc.w	r9, r3, r5
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	469a      	mov	sl, r3
 8004ab4:	4693      	mov	fp, r2
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	465b      	mov	r3, fp
 8004aba:	4640      	mov	r0, r8
 8004abc:	4649      	mov	r1, r9
 8004abe:	f7fb fb5d 	bl	800017c <__aeabi_uldivmod>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad0:	d308      	bcc.n	8004ae4 <UART_SetConfig+0x288>
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad8:	d204      	bcs.n	8004ae4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6a3a      	ldr	r2, [r7, #32]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e0c9      	b.n	8004c78 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004aea:	e0c5      	b.n	8004c78 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d16d      	bne.n	8004bd2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004af6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004afa:	3b01      	subs	r3, #1
 8004afc:	2b07      	cmp	r3, #7
 8004afe:	d82d      	bhi.n	8004b5c <UART_SetConfig+0x300>
 8004b00:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <UART_SetConfig+0x2ac>)
 8004b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b06:	bf00      	nop
 8004b08:	08004b29 	.word	0x08004b29
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b5d 	.word	0x08004b5d
 8004b14:	08004b37 	.word	0x08004b37
 8004b18:	08004b5d 	.word	0x08004b5d
 8004b1c:	08004b5d 	.word	0x08004b5d
 8004b20:	08004b5d 	.word	0x08004b5d
 8004b24:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fd feaa 	bl	8002880 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b2e:	e01b      	b.n	8004b68 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <UART_SetConfig+0x2f8>)
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b34:	e018      	b.n	8004b68 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fd fe0d 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8004b3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b3c:	e014      	b.n	8004b68 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b44:	e010      	b.n	8004b68 <UART_SetConfig+0x30c>
 8004b46:	bf00      	nop
 8004b48:	cfff69f3 	.word	0xcfff69f3
 8004b4c:	40008000 	.word	0x40008000
 8004b50:	40013800 	.word	0x40013800
 8004b54:	00f42400 	.word	0x00f42400
 8004b58:	080054a0 	.word	0x080054a0
      default:
        pclk = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8084 	beq.w	8004c78 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	4a4b      	ldr	r2, [pc, #300]	; (8004ca4 <UART_SetConfig+0x448>)
 8004b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b82:	005a      	lsls	r2, r3, #1
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	441a      	add	r2, r3
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b94:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	2b0f      	cmp	r3, #15
 8004b9a:	d916      	bls.n	8004bca <UART_SetConfig+0x36e>
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d212      	bcs.n	8004bca <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	f023 030f 	bic.w	r3, r3, #15
 8004bac:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	085b      	lsrs	r3, r3, #1
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	8bfb      	ldrh	r3, [r7, #30]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	8bfa      	ldrh	r2, [r7, #30]
 8004bc6:	60da      	str	r2, [r3, #12]
 8004bc8:	e056      	b.n	8004c78 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004bd0:	e052      	b.n	8004c78 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	2b07      	cmp	r3, #7
 8004bda:	d822      	bhi.n	8004c22 <UART_SetConfig+0x3c6>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0x388>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c05 	.word	0x08004c05
 8004be8:	08004c0d 	.word	0x08004c0d
 8004bec:	08004c23 	.word	0x08004c23
 8004bf0:	08004c13 	.word	0x08004c13
 8004bf4:	08004c23 	.word	0x08004c23
 8004bf8:	08004c23 	.word	0x08004c23
 8004bfc:	08004c23 	.word	0x08004c23
 8004c00:	08004c1b 	.word	0x08004c1b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c04:	f7fd fe3c 	bl	8002880 <HAL_RCC_GetPCLK2Freq>
 8004c08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c0a:	e010      	b.n	8004c2e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c0c:	4b26      	ldr	r3, [pc, #152]	; (8004ca8 <UART_SetConfig+0x44c>)
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c10:	e00d      	b.n	8004c2e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c12:	f7fd fd9f 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8004c16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c18:	e009      	b.n	8004c2e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c20:	e005      	b.n	8004c2e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c2c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d021      	beq.n	8004c78 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	4a1a      	ldr	r2, [pc, #104]	; (8004ca4 <UART_SetConfig+0x448>)
 8004c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	085b      	lsrs	r3, r3, #1
 8004c4c:	441a      	add	r2, r3
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	2b0f      	cmp	r3, #15
 8004c5c:	d909      	bls.n	8004c72 <UART_SetConfig+0x416>
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c64:	d205      	bcs.n	8004c72 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60da      	str	r2, [r3, #12]
 8004c70:	e002      	b.n	8004c78 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2200      	movs	r2, #0
 8004c92:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3730      	adds	r7, #48	; 0x30
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca2:	bf00      	nop
 8004ca4:	080054a0 	.word	0x080054a0
 8004ca8:	00f42400 	.word	0x00f42400

08004cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	f003 0320 	and.w	r3, r3, #32
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004daa:	d10a      	bne.n	8004dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b098      	sub	sp, #96	; 0x60
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e00:	f7fc f894 	bl	8000f2c <HAL_GetTick>
 8004e04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d12f      	bne.n	8004e74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f88e 	bl	8004f44 <UART_WaitOnFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d022      	beq.n	8004e74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e42:	653b      	str	r3, [r7, #80]	; 0x50
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e4e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e6      	bne.n	8004e2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e063      	b.n	8004f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0304 	and.w	r3, r3, #4
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d149      	bne.n	8004f16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f857 	bl	8004f44 <UART_WaitOnFlagUntilTimeout>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d03c      	beq.n	8004f16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30
 8004ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e6      	bne.n	8004e9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3308      	adds	r3, #8
 8004ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	e853 3f00 	ldrex	r3, [r3]
 8004edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3308      	adds	r3, #8
 8004eec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eee:	61fa      	str	r2, [r7, #28]
 8004ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef2:	69b9      	ldr	r1, [r7, #24]
 8004ef4:	69fa      	ldr	r2, [r7, #28]
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	617b      	str	r3, [r7, #20]
   return(result);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1e5      	bne.n	8004ece <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e012      	b.n	8004f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3758      	adds	r7, #88	; 0x58
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	4613      	mov	r3, r2
 8004f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f54:	e04f      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d04b      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7fb ffe5 	bl	8000f2c <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e04e      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d037      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d034      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d031      	beq.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d110      	bne.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f838 	bl	800501e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2208      	movs	r2, #8
 8004fb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e029      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd0:	d111      	bne.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f81e 	bl	800501e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e00f      	b.n	8005016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	4013      	ands	r3, r2
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	429a      	cmp	r2, r3
 8005004:	bf0c      	ite	eq
 8005006:	2301      	moveq	r3, #1
 8005008:	2300      	movne	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	429a      	cmp	r2, r3
 8005012:	d0a0      	beq.n	8004f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800501e:	b480      	push	{r7}
 8005020:	b095      	sub	sp, #84	; 0x54
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	e853 3f00 	ldrex	r3, [r3]
 8005032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800503a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	461a      	mov	r2, r3
 8005042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005044:	643b      	str	r3, [r7, #64]	; 0x40
 8005046:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800504a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800504c:	e841 2300 	strex	r3, r2, [r1]
 8005050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1e6      	bne.n	8005026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3308      	adds	r3, #8
 800505e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	e853 3f00 	ldrex	r3, [r3]
 8005066:	61fb      	str	r3, [r7, #28]
   return(result);
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	64bb      	str	r3, [r7, #72]	; 0x48
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3308      	adds	r3, #8
 800507a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800507c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005084:	e841 2300 	strex	r3, r2, [r1]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e3      	bne.n	8005058 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d118      	bne.n	80050ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f023 0310 	bic.w	r3, r3, #16
 80050ac:	647b      	str	r3, [r7, #68]	; 0x44
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6979      	ldr	r1, [r7, #20]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	613b      	str	r3, [r7, #16]
   return(result);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e6      	bne.n	8005098 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	675a      	str	r2, [r3, #116]	; 0x74
}
 80050de:	bf00      	nop
 80050e0:	3754      	adds	r7, #84	; 0x54
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d101      	bne.n	8005100 <HAL_UARTEx_DisableFifoMode+0x16>
 80050fc:	2302      	movs	r3, #2
 80050fe:	e027      	b.n	8005150 <HAL_UARTEx_DisableFifoMode+0x66>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	; 0x24
 800510c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0201 	bic.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800512e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3714      	adds	r7, #20
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800516c:	2b01      	cmp	r3, #1
 800516e:	d101      	bne.n	8005174 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005170:	2302      	movs	r3, #2
 8005172:	e02d      	b.n	80051d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2224      	movs	r2, #36	; 0x24
 8005180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f84f 	bl	8005254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051ce:	2300      	movs	r3, #0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3710      	adds	r7, #16
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e02d      	b.n	800524c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2224      	movs	r2, #36	; 0x24
 80051fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f811 	bl	8005254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005260:	2b00      	cmp	r3, #0
 8005262:	d108      	bne.n	8005276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005274:	e031      	b.n	80052da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005276:	2308      	movs	r3, #8
 8005278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800527a:	2308      	movs	r3, #8
 800527c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	0e5b      	lsrs	r3, r3, #25
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	0f5b      	lsrs	r3, r3, #29
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800529e:	7bbb      	ldrb	r3, [r7, #14]
 80052a0:	7b3a      	ldrb	r2, [r7, #12]
 80052a2:	4911      	ldr	r1, [pc, #68]	; (80052e8 <UARTEx_SetNbDataToProcess+0x94>)
 80052a4:	5c8a      	ldrb	r2, [r1, r2]
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052aa:	7b3a      	ldrb	r2, [r7, #12]
 80052ac:	490f      	ldr	r1, [pc, #60]	; (80052ec <UARTEx_SetNbDataToProcess+0x98>)
 80052ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
 80052be:	7b7a      	ldrb	r2, [r7, #13]
 80052c0:	4909      	ldr	r1, [pc, #36]	; (80052e8 <UARTEx_SetNbDataToProcess+0x94>)
 80052c2:	5c8a      	ldrb	r2, [r1, r2]
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052c8:	7b7a      	ldrb	r2, [r7, #13]
 80052ca:	4908      	ldr	r1, [pc, #32]	; (80052ec <UARTEx_SetNbDataToProcess+0x98>)
 80052cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	080054b8 	.word	0x080054b8
 80052ec:	080054c0 	.word	0x080054c0

080052f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80052f8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80052fc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	b29b      	uxth	r3, r3
 800530a:	43db      	mvns	r3, r3
 800530c:	b29b      	uxth	r3, r3
 800530e:	4013      	ands	r3, r2
 8005310:	b29a      	uxth	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005326:	b480      	push	{r7}
 8005328:	b085      	sub	sp, #20
 800532a:	af00      	add	r7, sp, #0
 800532c:	60f8      	str	r0, [r7, #12]
 800532e:	1d3b      	adds	r3, r7, #4
 8005330:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <memset>:
 8005362:	4402      	add	r2, r0
 8005364:	4603      	mov	r3, r0
 8005366:	4293      	cmp	r3, r2
 8005368:	d100      	bne.n	800536c <memset+0xa>
 800536a:	4770      	bx	lr
 800536c:	f803 1b01 	strb.w	r1, [r3], #1
 8005370:	e7f9      	b.n	8005366 <memset+0x4>
	...

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4d0d      	ldr	r5, [pc, #52]	; (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	; (80053b0 <__libc_init_array+0x3c>)
 800537a:	1b64      	subs	r4, r4, r5
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2600      	movs	r6, #0
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4d0b      	ldr	r5, [pc, #44]	; (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	; (80053b8 <__libc_init_array+0x44>)
 8005388:	f000 f818 	bl	80053bc <_init>
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2600      	movs	r6, #0
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	080054d0 	.word	0x080054d0
 80053b0:	080054d0 	.word	0x080054d0
 80053b4:	080054d0 	.word	0x080054d0
 80053b8:	080054d4 	.word	0x080054d4

080053bc <_init>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr

080053c8 <_fini>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr
