
MP_HBS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005710  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000008  080059a8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000564  20000064  08005a04  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200005c8  08005a04  000205c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 11 .debug_info   00015d42  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002c06  00000000  00000000  00035e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001670  00000000  00000000  00038a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001110  00000000  00000000  0003a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002368e  00000000  00000000  0003b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001466c  00000000  00000000  0005e82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e7238  00000000  00000000  00072e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000063f8  00000000  00000000  0015a0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001604cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000064 	.word	0x20000064
 800015c:	00000000 	.word	0x00000000
 8000160:	08005838 	.word	0x08005838

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000068 	.word	0x20000068
 800017c:	08005838 	.word	0x08005838

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800053c:	f023 0218 	bic.w	r2, r3, #24
 8000540:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4013      	ands	r3, r2
 800057a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057c:	68fb      	ldr	r3, [r7, #12]
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fbfa 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f84a 	bl	800062c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000598:	f000 f8be 	bl	8000718 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f9c6 	bl	800092c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f950 	bl	8000844 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005a4:	f000 f99a 	bl	80008dc <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80005a8:	f000 f8e8 	bl	800077c <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80005ac:	4819      	ldr	r0, [pc, #100]	; (8000614 <main+0x88>)
 80005ae:	f000 ffa9 	bl	8001504 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20); //polling method polling the data to convert adc data (other method is interruption)
 80005b2:	2114      	movs	r1, #20
 80005b4:	4817      	ldr	r0, [pc, #92]	; (8000614 <main+0x88>)
 80005b6:	f000 fff9 	bl	80015ac <HAL_ADC_PollForConversion>
	  hbs = HAL_ADC_GetValue(&hadc1);  //get adc value from adc channel 0 hacd1 and put it into lux variable
 80005ba:	4816      	ldr	r0, [pc, #88]	; (8000614 <main+0x88>)
 80005bc:	f001 f883 	bl	80016c6 <HAL_ADC_GetValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <main+0x8c>)
 80005c6:	801a      	strh	r2, [r3, #0]
	  sprintf(msg,"Heart Beat Sensor Value: %hu \r\n", hbs);
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <main+0x8c>)
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	461a      	mov	r2, r3
 80005ce:	4913      	ldr	r1, [pc, #76]	; (800061c <main+0x90>)
 80005d0:	4813      	ldr	r0, [pc, #76]	; (8000620 <main+0x94>)
 80005d2:	f004 fc8d 	bl	8004ef0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);  //will print the light intensity into the serial monitor
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <main+0x94>)
 80005d8:	f7ff fdd2 	bl	8000180 <strlen>
 80005dc:	4603      	mov	r3, r0
 80005de:	b29a      	uxth	r2, r3
 80005e0:	f04f 33ff 	mov.w	r3, #4294967295
 80005e4:	490e      	ldr	r1, [pc, #56]	; (8000620 <main+0x94>)
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <main+0x98>)
 80005e8:	f003 fe6f 	bl	80042ca <HAL_UART_Transmit>
	  //HAL_Delay(500); //not before the condition if because it will not represents the right value after 500 ms

	  if(hbs<4000){
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <main+0x8c>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005f4:	d205      	bcs.n	8000602 <main+0x76>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2120      	movs	r1, #32
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <main+0x9c>)
 80005fc:	f001 ff04 	bl	8002408 <HAL_GPIO_WritePin>
 8000600:	e004      	b.n	800060c <main+0x80>
	  }else{
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	4808      	ldr	r0, [pc, #32]	; (8000628 <main+0x9c>)
 8000608:	f001 fefe 	bl	8002408 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(200); //we don't need it, we can delete it, we leave it just to test
 800060c:	20c8      	movs	r0, #200	; 0xc8
 800060e:	f000 fc41 	bl	8000e94 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000612:	e7cb      	b.n	80005ac <main+0x20>
 8000614:	20000080 	.word	0x20000080
 8000618:	20000454 	.word	0x20000454
 800061c:	08005850 	.word	0x08005850
 8000620:	20000458 	.word	0x20000458
 8000624:	200000e4 	.word	0x200000e4
 8000628:	48000400 	.word	0x48000400

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09a      	sub	sp, #104	; 0x68
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2248      	movs	r2, #72	; 0x48
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fc78 	bl	8004f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8000652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800065c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000660:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8000662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	f023 0303 	bic.w	r3, r3, #3
 800066c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000676:	f001 ffd7 	bl	8002628 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff56 	bl	800052c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	4b24      	ldr	r3, [pc, #144]	; (8000714 <SystemClock_Config+0xe8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <SystemClock_Config+0xe8>)
 800068a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	; (8000714 <SystemClock_Config+0xe8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800069c:	2327      	movs	r3, #39	; 0x27
 800069e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2340      	movs	r3, #64	; 0x40
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b8:	2300      	movs	r3, #0
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fb41 	bl	8002d50 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006d4:	f000 f972 	bl	80009bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80006d8:	236f      	movs	r3, #111	; 0x6f
 80006da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006dc:	2302      	movs	r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2101      	movs	r1, #1
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fe9d 	bl	8003438 <HAL_RCC_ClockConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000704:	f000 f95a 	bl	80009bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000708:	f003 fc58 	bl	8003fbc <HAL_RCCEx_EnableMSIPLLMode>
}
 800070c:	bf00      	nop
 800070e:	3768      	adds	r7, #104	; 0x68
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	58000400 	.word	0x58000400

08000718 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b094      	sub	sp, #80	; 0x50
 800071c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2250      	movs	r2, #80	; 0x50
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f004 fc03 	bl	8004f30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800072a:	f44f 5314 	mov.w	r3, #9472	; 0x2500
 800072e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000730:	2318      	movs	r3, #24
 8000732:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000734:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000738:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800073a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800073e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000740:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000744:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8000746:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800074a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800074c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000752:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000758:	2300      	movs	r3, #0
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800075c:	2300      	movs	r3, #0
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fab4 	bl	8003cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800076e:	f000 f925 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
 8000790:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_ADC1_Init+0xbc>)
 8000794:	4a29      	ldr	r2, [pc, #164]	; (800083c <MX_ADC1_Init+0xc0>)
 8000796:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000798:	4b27      	ldr	r3, [pc, #156]	; (8000838 <MX_ADC1_Init+0xbc>)
 800079a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800079e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007b4:	2204      	movs	r2, #4
 80007b6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007b8:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d2:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007da:	2200      	movs	r2, #0
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f4:	4810      	ldr	r0, [pc, #64]	; (8000838 <MX_ADC1_Init+0xbc>)
 80007f6:	f000 fd39 	bl	800126c <HAL_ADC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000800:	f000 f8dc 	bl	80009bc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_ADC1_Init+0xc4>)
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000808:	2306      	movs	r3, #6
 800080a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800080c:	2302      	movs	r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000810:	237f      	movs	r3, #127	; 0x7f
 8000812:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000814:	2304      	movs	r3, #4
 8000816:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_ADC1_Init+0xbc>)
 8000822:	f000 ff5d 	bl	80016e0 <HAL_ADC_ConfigChannel>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800082c:	f000 f8c6 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000080 	.word	0x20000080
 800083c:	50040000 	.word	0x50040000
 8000840:	04300002 	.word	0x04300002

08000844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <MX_USART1_UART_Init+0x94>)
 800084c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 800088e:	f003 fccc 	bl	800422a <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f890 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 80008a0:	f004 fa22 	bl	8004ce8 <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008aa:	f000 f887 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 80008b2:	f004 fa57 	bl	8004d64 <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 f87e 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_USART1_UART_Init+0x90>)
 80008c2:	f004 f9d8 	bl	8004c76 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008cc:	f000 f876 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200000e4 	.word	0x200000e4
 80008d8:	40013800 	.word	0x40013800

080008dc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USB_PCD_Init+0x48>)
 80008e2:	4a11      	ldr	r2, [pc, #68]	; (8000928 <MX_USB_PCD_Init+0x4c>)
 80008e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USB_PCD_Init+0x48>)
 80008e8:	2208      	movs	r2, #8
 80008ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_USB_PCD_Init+0x48>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USB_PCD_Init+0x48>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_USB_PCD_Init+0x48>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USB_PCD_Init+0x48>)
 8000900:	2200      	movs	r2, #0
 8000902:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_USB_PCD_Init+0x48>)
 8000906:	2200      	movs	r2, #0
 8000908:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USB_PCD_Init+0x48>)
 800090c:	2200      	movs	r2, #0
 800090e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_USB_PCD_Init+0x48>)
 8000912:	f001 fd91 	bl	8002438 <HAL_PCD_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 800091c:	f000 f84e 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000178 	.word	0x20000178
 8000928:	40006800 	.word	0x40006800

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000940:	2004      	movs	r0, #4
 8000942:	f7ff fe09 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff fe06 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fe03 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	2008      	movs	r0, #8
 8000954:	f7ff fe00 	bl	8000558 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	2123      	movs	r1, #35	; 0x23
 800095c:	4814      	ldr	r0, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x84>)
 800095e:	f001 fd53 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	2310      	movs	r3, #16
 8000964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4810      	ldr	r0, [pc, #64]	; (80009b4 <MX_GPIO_Init+0x88>)
 8000974:	f001 fbd8 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000978:	2323      	movs	r3, #35	; 0x23
 800097a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	4619      	mov	r1, r3
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <MX_GPIO_Init+0x84>)
 800098e:	f001 fbcb 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000992:	2303      	movs	r3, #3
 8000994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_GPIO_Init+0x8c>)
 80009a4:	f001 fbc0 	bl	8002128 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	48000400 	.word	0x48000400
 80009b4:	48000800 	.word	0x48000800
 80009b8:	48000c00 	.word	0x48000c00

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <Error_Handler+0x8>

080009c6 <LL_AHB2_GRP1_EnableClock>:
{
 80009c6:	b480      	push	{r7}
 80009c8:	b085      	sub	sp, #20
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4313      	orrs	r3, r2
 80009dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4013      	ands	r3, r2
 80009e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <HAL_ADC_MspInit+0x50>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d112      	bne.n	8000ab4 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a8e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a92:	f7ff ff98 	bl	80009c6 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2004      	movs	r0, #4
 8000a98:	f7ff ff95 	bl	80009c6 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <HAL_ADC_MspInit+0x54>)
 8000ab0:	f001 fb3a 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	50040000 	.word	0x50040000
 8000ac0:	48000800 	.word	0x48000800

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09c      	sub	sp, #112	; 0x70
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2250      	movs	r2, #80	; 0x50
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f004 fa23 	bl	8004f30 <memset>
  if(huart->Instance==USART1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a16      	ldr	r2, [pc, #88]	; (8000b48 <HAL_UART_MspInit+0x84>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d124      	bne.n	8000b3e <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f003 f8e5 	bl	8003cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b0c:	f7ff ff56 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b14:	f7ff ff89 	bl	8000a2a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f7ff ff54 	bl	80009c6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b1e:	23c0      	movs	r3, #192	; 0xc0
 8000b20:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <HAL_UART_MspInit+0x88>)
 8000b3a:	f001 faf5 	bl	8002128 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3770      	adds	r7, #112	; 0x70
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40013800 	.word	0x40013800
 8000b4c:	48000400 	.word	0x48000400

08000b50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <HAL_PCD_MspInit+0x5c>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d118      	bne.n	8000ba4 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff ff27 	bl	80009c6 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b78:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f001 fac6 	bl	8002128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000b9c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ba0:	f7ff ff2a 	bl	80009f8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3720      	adds	r7, #32
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40006800 	.word	0x40006800

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f91e 	bl	8000e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d207      	bcs.n	8000c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c34:	f004 f984 	bl	8004f40 <__errno>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	e009      	b.n	8000c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <_sbrk+0x64>)
 8000c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20030000 	.word	0x20030000
 8000c64:	00000400 	.word	0x00000400
 8000c68:	20000478 	.word	0x20000478
 8000c6c:	200005c8 	.word	0x200005c8

08000c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c74:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <SystemInit+0x98>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a23      	ldr	r2, [pc, #140]	; (8000d08 <SystemInit+0x98>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c98:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000c9c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <SystemInit+0x9c>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cba:	f023 0305 	bic.w	r3, r3, #5
 8000cbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000cca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cda:	4a0d      	ldr	r2, [pc, #52]	; (8000d10 <SystemInit+0xa0>)
 8000cdc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <SystemInit+0xa0>)
 8000ce4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	faf6fefb 	.word	0xfaf6fefb
 8000d10:	22041000 	.word	0x22041000

08000d14 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d14:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d16:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d18:	3304      	adds	r3, #4

08000d1a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d1e:	d3f9      	bcc.n	8000d14 <CopyDataInit>
  bx lr
 8000d20:	4770      	bx	lr

08000d22 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d22:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d24:	3004      	adds	r0, #4

08000d26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d26:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d28:	d3fb      	bcc.n	8000d22 <FillZerobss>
  bx lr
 8000d2a:	4770      	bx	lr

08000d2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d30:	f7ff ff9e 	bl	8000c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <LoopForever+0x6>)
 8000d36:	490c      	ldr	r1, [pc, #48]	; (8000d68 <LoopForever+0xa>)
 8000d38:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <LoopForever+0xe>)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f7ff ffed 	bl	8000d1a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopForever+0x12>)
 8000d42:	490c      	ldr	r1, [pc, #48]	; (8000d74 <LoopForever+0x16>)
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <LoopForever+0x1a>)
 8000d46:	2300      	movs	r3, #0
 8000d48:	f7ff ffe7 	bl	8000d1a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <LoopForever+0x1e>)
 8000d4e:	490c      	ldr	r1, [pc, #48]	; (8000d80 <LoopForever+0x22>)
 8000d50:	2300      	movs	r3, #0
 8000d52:	f7ff ffe8 	bl	8000d26 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d56:	f004 f8f9 	bl	8004f4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d5a:	f7ff fc17 	bl	800058c <main>

08000d5e <LoopForever>:

LoopForever:
  b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   r0, =_estack
 8000d60:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000064 	.word	0x20000064
 8000d6c:	080059a8 	.word	0x080059a8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d70:	20030000 	.word	0x20030000
 8000d74:	20030000 	.word	0x20030000
 8000d78:	08005a04 	.word	0x08005a04
  INIT_BSS _sbss, _ebss
 8000d7c:	20000064 	.word	0x20000064
 8000d80:	200005c8 	.word	0x200005c8

08000d84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC1_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_Init+0x3c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_Init+0x3c>)
 8000d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9e:	2003      	movs	r0, #3
 8000da0:	f001 f990 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f80f 	bl	8000dc8 <HAL_InitTick>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d002      	beq.n	8000db6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	71fb      	strb	r3, [r7, #7]
 8000db4:	e001      	b.n	8000dba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db6:	f7ff fe51 	bl	8000a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58004000 	.word	0x58004000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_InitTick+0x6c>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d024      	beq.n	8000e26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ddc:	f002 fcd8 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 8000de0:	4602      	mov	r2, r0
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_InitTick+0x6c>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4619      	mov	r1, r3
 8000de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df4:	4618      	mov	r0, r3
 8000df6:	f001 f98a 	bl	800210e <HAL_SYSTICK_Config>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10f      	bne.n	8000e20 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b0f      	cmp	r3, #15
 8000e04:	d809      	bhi.n	8000e1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	2200      	movs	r2, #0
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0e:	f001 f964 	bl	80020da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_InitTick+0x70>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	e007      	b.n	8000e2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	73fb      	strb	r3, [r7, #15]
 8000e1e:	e004      	b.n	8000e2a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
 8000e24:	e001      	b.n	8000e2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3710      	adds	r7, #16
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000010 	.word	0x20000010
 8000e38:	2000000c 	.word	0x2000000c

08000e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x20>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x24>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <HAL_IncTick+0x24>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	2000047c 	.word	0x2000047c

08000e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return uwTick;
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <HAL_GetTick+0x14>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	2000047c 	.word	0x2000047c

08000e7c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTickPrio+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	2000000c 	.word	0x2000000c

08000e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e9c:	f7ff ffe2 	bl	8000e64 <HAL_GetTick>
 8000ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eac:	d005      	beq.n	8000eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <HAL_Delay+0x44>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eba:	bf00      	nop
 8000ebc:	f7ff ffd2 	bl	8000e64 <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f7      	bhi.n	8000ebc <HAL_Delay+0x28>
  {
  }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000010 	.word	0x20000010

08000edc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	3360      	adds	r3, #96	; 0x60
 8000f56:	461a      	mov	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <LL_ADC_SetOffset+0x44>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	4313      	orrs	r3, r2
 8000f74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	03fff000 	.word	0x03fff000

08000f8c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3360      	adds	r3, #96	; 0x60
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3360      	adds	r3, #96	; 0x60
 8000fc8:	461a      	mov	r2, r3
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000fe2:	bf00      	nop
 8000fe4:	371c      	adds	r7, #28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001002:	2301      	movs	r3, #1
 8001004:	e000      	b.n	8001008 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001006:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3330      	adds	r3, #48	; 0x30
 8001024:	461a      	mov	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	4413      	add	r3, r2
 8001032:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	211f      	movs	r1, #31
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0e9b      	lsrs	r3, r3, #26
 800104c:	f003 011f 	and.w	r1, r3, #31
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	431a      	orrs	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001060:	bf00      	nop
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3314      	adds	r3, #20
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	0e5b      	lsrs	r3, r3, #25
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	4413      	add	r3, r2
 800108a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	0d1b      	lsrs	r3, r3, #20
 8001094:	f003 031f 	and.w	r3, r3, #31
 8001098:	2107      	movs	r1, #7
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	401a      	ands	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	0d1b      	lsrs	r3, r3, #20
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	431a      	orrs	r2, r3
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80010b6:	bf00      	nop
 80010b8:	371c      	adds	r7, #28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010dc:	43db      	mvns	r3, r3
 80010de:	401a      	ands	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0318 	and.w	r3, r3, #24
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80010e8:	40d9      	lsrs	r1, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	400b      	ands	r3, r1
 80010ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010f2:	431a      	orrs	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	0007ffff 	.word	0x0007ffff

0800110c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800111c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	6093      	str	r3, [r2, #8]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001144:	d101      	bne.n	800114a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800114a:	2300      	movs	r3, #0
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001168:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800116c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001194:	d101      	bne.n	800119a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011bc:	f043 0201 	orr.w	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <LL_ADC_IsEnabled+0x18>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <LL_ADC_IsEnabled+0x1a>
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001206:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800120a:	f043 0204 	orr.w	r2, r3, #4
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b04      	cmp	r3, #4
 8001230:	d101      	bne.n	8001236 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b08      	cmp	r3, #8
 8001256:	d101      	bne.n	800125c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8001278:	2300      	movs	r3, #0
 800127a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e12e      	b.n	80014e8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f7ff fbe7 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff3d 	bl	8001130 <LL_ADC_IsDeepPowerDownEnabled>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d004      	beq.n	80012c6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff23 	bl	800110c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff58 	bl	8001180 <LL_ADC_IsInternalRegulatorEnabled>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d115      	bne.n	8001302 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff3c 	bl	8001158 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012e0:	4b83      	ldr	r3, [pc, #524]	; (80014f0 <HAL_ADC_Init+0x284>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	099b      	lsrs	r3, r3, #6
 80012e6:	4a83      	ldr	r2, [pc, #524]	; (80014f4 <HAL_ADC_Init+0x288>)
 80012e8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ec:	099b      	lsrs	r3, r3, #6
 80012ee:	3301      	adds	r3, #1
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012f4:	e002      	b.n	80012fc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	3b01      	subs	r3, #1
 80012fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f9      	bne.n	80012f6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff ff3a 	bl	8001180 <LL_ADC_IsInternalRegulatorEnabled>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10d      	bne.n	800132e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff73 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 8001338:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	f040 80c7 	bne.w	80014d6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f040 80c3 	bne.w	80014d6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001354:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001358:	f043 0202 	orr.w	r2, r3, #2
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff33 	bl	80011d0 <LL_ADC_IsEnabled>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10b      	bne.n	8001388 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001370:	4861      	ldr	r0, [pc, #388]	; (80014f8 <HAL_ADC_Init+0x28c>)
 8001372:	f7ff ff2d 	bl	80011d0 <LL_ADC_IsEnabled>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d105      	bne.n	8001388 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	4619      	mov	r1, r3
 8001382:	485e      	ldr	r0, [pc, #376]	; (80014fc <HAL_ADC_Init+0x290>)
 8001384:	f7ff fdaa 	bl	8000edc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	7e5b      	ldrb	r3, [r3, #25]
 800138c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001392:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001398:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800139e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80013a8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d106      	bne.n	80013c8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	3b01      	subs	r3, #1
 80013c0:	045b      	lsls	r3, r3, #17
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d009      	beq.n	80013e4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013dc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	4b45      	ldr	r3, [pc, #276]	; (8001500 <HAL_ADC_Init+0x294>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	69b9      	ldr	r1, [r7, #24]
 80013f4:	430b      	orrs	r3, r1
 80013f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff0e 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 8001402:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff1b 	bl	8001244 <LL_ADC_INJ_IsConversionOngoing>
 800140e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d13d      	bne.n	8001492 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d13a      	bne.n	8001492 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001420:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001428:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001438:	f023 0302 	bic.w	r3, r3, #2
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	69b9      	ldr	r1, [r7, #24]
 8001442:	430b      	orrs	r3, r1
 8001444:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800144c:	2b01      	cmp	r3, #1
 800144e:	d118      	bne.n	8001482 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800145a:	f023 0304 	bic.w	r3, r3, #4
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001466:	4311      	orrs	r1, r2
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800146c:	4311      	orrs	r1, r2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001472:	430a      	orrs	r2, r1
 8001474:	431a      	orrs	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	e007      	b.n	8001492 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0201 	bic.w	r2, r2, #1
 8001490:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d10c      	bne.n	80014b4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f023 010f 	bic.w	r1, r3, #15
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	1e5a      	subs	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
 80014b2:	e007      	b.n	80014c4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 020f 	bic.w	r2, r2, #15
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c8:	f023 0303 	bic.w	r3, r3, #3
 80014cc:	f043 0201 	orr.w	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
 80014d4:	e007      	b.n	80014e6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	f043 0210 	orr.w	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80014e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000008 	.word	0x20000008
 80014f4:	053e2d63 	.word	0x053e2d63
 80014f8:	50040000 	.word	0x50040000
 80014fc:	50040300 	.word	0x50040300
 8001500:	fff0c007 	.word	0xfff0c007

08001504 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe84 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d140      	bne.n	800159e <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_ADC_Start+0x26>
 8001526:	2302      	movs	r3, #2
 8001528:	e03c      	b.n	80015a4 <HAL_ADC_Start+0xa0>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 fc9a 	bl	8001e6c <ADC_Enable>
 8001538:	4603      	mov	r3, r0
 800153a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d128      	bne.n	8001594 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001546:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800155e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001562:	d106      	bne.n	8001572 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001568:	f023 0206 	bic.w	r2, r3, #6
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	659a      	str	r2, [r3, #88]	; 0x58
 8001570:	e002      	b.n	8001578 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	221c      	movs	r2, #28
 800157e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe32 	bl	80011f6 <LL_ADC_REG_StartConversion>
 8001592:	e006      	b.n	80015a2 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800159c:	e001      	b.n	80015a2 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800159e:	2302      	movs	r3, #2
 80015a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d102      	bne.n	80015c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80015be:	2308      	movs	r3, #8
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	e010      	b.n	80015e6 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	f043 0220 	orr.w	r2, r3, #32
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	655a      	str	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e06d      	b.n	80016be <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80015e2:	2304      	movs	r3, #4
 80015e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80015e6:	f7ff fc3d 	bl	8000e64 <HAL_GetTick>
 80015ea:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80015ec:	e021      	b.n	8001632 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f4:	d01d      	beq.n	8001632 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80015f6:	f7ff fc35 	bl	8000e64 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d302      	bcc.n	800160c <HAL_ADC_PollForConversion+0x60>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d112      	bne.n	8001632 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10b      	bne.n	8001632 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	f043 0204 	orr.w	r2, r3, #4
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e045      	b.n	80016be <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0d6      	beq.n	80015ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001644:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fccc 	bl	8000fee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01c      	beq.n	8001696 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e5b      	ldrb	r3, [r3, #25]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d118      	bne.n	8001696 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b08      	cmp	r3, #8
 8001670:	d111      	bne.n	8001696 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d105      	bne.n	8001696 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b08      	cmp	r3, #8
 800169a:	d104      	bne.n	80016a6 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2208      	movs	r2, #8
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e00a      	b.n	80016bc <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	220c      	movs	r2, #12
 80016ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0b6      	sub	sp, #216	; 0xd8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d101      	bne.n	8001702 <HAL_ADC_ConfigChannel+0x22>
 80016fe:	2302      	movs	r3, #2
 8001700:	e39f      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x762>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd85 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	f040 8384 	bne.w	8001e24 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6818      	ldr	r0, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	f7ff fc73 	bl	8001014 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fd73 	bl	800121e <LL_ADC_REG_IsConversionOngoing>
 8001738:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fd7f 	bl	8001244 <LL_ADC_INJ_IsConversionOngoing>
 8001746:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800174a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800174e:	2b00      	cmp	r3, #0
 8001750:	f040 81a6 	bne.w	8001aa0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001758:	2b00      	cmp	r3, #0
 800175a:	f040 81a1 	bne.w	8001aa0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	461a      	mov	r2, r3
 800176c:	f7ff fc7e 	bl	800106c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	08db      	lsrs	r3, r3, #3
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d00a      	beq.n	80017a8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	6919      	ldr	r1, [r3, #16]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80017a2:	f7ff fbcf 	bl	8000f44 <LL_ADC_SetOffset>
 80017a6:	e17b      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2100      	movs	r1, #0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff fbec 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10a      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0xf4>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fbe1 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	0e9b      	lsrs	r3, r3, #26
 80017ce:	f003 021f 	and.w	r2, r3, #31
 80017d2:	e01e      	b.n	8001812 <HAL_ADC_ConfigChannel+0x132>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fbd6 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80017f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80017fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8001802:	2320      	movs	r3, #32
 8001804:	e004      	b.n	8001810 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8001806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800180a:	fab3 f383 	clz	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	2b00      	cmp	r3, #0
 800181c:	d105      	bne.n	800182a <HAL_ADC_ConfigChannel+0x14a>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0e9b      	lsrs	r3, r3, #26
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	e018      	b.n	800185c <HAL_ADC_ConfigChannel+0x17c>
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800183e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001842:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001846:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800184e:	2320      	movs	r3, #32
 8001850:	e004      	b.n	800185c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8001852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	429a      	cmp	r2, r3
 800185e:	d106      	bne.n	800186e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fba5 	bl	8000fb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2101      	movs	r1, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb89 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 800187a:	4603      	mov	r3, r0
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10a      	bne.n	800189a <HAL_ADC_ConfigChannel+0x1ba>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fb7e 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	0e9b      	lsrs	r3, r3, #26
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	e01e      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x1f8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2101      	movs	r1, #1
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fb73 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80018b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80018bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80018c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80018c8:	2320      	movs	r3, #32
 80018ca:	e004      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80018cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d105      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x210>
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	0e9b      	lsrs	r3, r3, #26
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	e018      	b.n	8001922 <HAL_ADC_ConfigChannel+0x242>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001904:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800190c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8001914:	2320      	movs	r3, #32
 8001916:	e004      	b.n	8001922 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8001918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	429a      	cmp	r2, r3
 8001924:	d106      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	2101      	movs	r1, #1
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fb42 	bl	8000fb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2102      	movs	r1, #2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fb26 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001940:	4603      	mov	r3, r0
 8001942:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10a      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x280>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2102      	movs	r1, #2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff fb1b 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	0e9b      	lsrs	r3, r3, #26
 800195a:	f003 021f 	and.w	r2, r3, #31
 800195e:	e01e      	b.n	800199e <HAL_ADC_ConfigChannel+0x2be>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2102      	movs	r1, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fb10 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 800196c:	4603      	mov	r3, r0
 800196e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800197e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001986:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e004      	b.n	800199c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x2d6>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0e9b      	lsrs	r3, r3, #26
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	e016      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x304>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80019c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80019ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80019ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80019d6:	2320      	movs	r3, #32
 80019d8:	e004      	b.n	80019e4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80019da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d106      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	2102      	movs	r1, #2
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fae1 	bl	8000fb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2103      	movs	r1, #3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fac5 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x342>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2103      	movs	r1, #3
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7ff faba 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	0e9b      	lsrs	r3, r3, #26
 8001a1c:	f003 021f 	and.w	r2, r3, #31
 8001a20:	e017      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x372>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2103      	movs	r1, #3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff faaf 	bl	8000f8c <LL_ADC_GetOffsetChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a3c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8001a44:	2320      	movs	r3, #32
 8001a46:	e003      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8001a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x38a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0e9b      	lsrs	r3, r3, #26
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	e011      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x3ae>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e003      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8001a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d106      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2200      	movs	r2, #0
 8001a98:	2103      	movs	r1, #3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fa8c 	bl	8000fb8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fb93 	bl	80011d0 <LL_ADC_IsEnabled>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 81c2 	bne.w	8001e36 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f7ff fb00 	bl	80010c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4a8e      	ldr	r2, [pc, #568]	; (8001d04 <HAL_ADC_ConfigChannel+0x624>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	f040 8130 	bne.w	8001d30 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10b      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x418>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	0e9b      	lsrs	r3, r3, #26
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f003 031f 	and.w	r3, r3, #31
 8001aec:	2b09      	cmp	r3, #9
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e019      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x44c>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001b06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b08:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8001b10:	2320      	movs	r3, #32
 8001b12:	e003      	b.n	8001b1c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8001b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b16:	fab3 f383 	clz	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	bf94      	ite	ls
 8001b26:	2301      	movls	r3, #1
 8001b28:	2300      	movhi	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d079      	beq.n	8001c24 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x46c>
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0e9b      	lsrs	r3, r3, #26
 8001b42:	3301      	adds	r3, #1
 8001b44:	069b      	lsls	r3, r3, #26
 8001b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b4a:	e015      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x498>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001b64:	2320      	movs	r3, #32
 8001b66:	e003      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	fab3 f383 	clz	r3, r3
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	069b      	lsls	r3, r3, #26
 8001b74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d109      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x4b8>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0e9b      	lsrs	r3, r3, #26
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	2101      	movs	r1, #1
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	e017      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x4e8>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	e003      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8001bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	ea42 0103 	orr.w	r1, r2, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <HAL_ADC_ConfigChannel+0x50e>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e9b      	lsrs	r3, r3, #26
 8001bde:	3301      	adds	r3, #1
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	4613      	mov	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	4413      	add	r3, r2
 8001bea:	051b      	lsls	r3, r3, #20
 8001bec:	e018      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x540>
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c06:	2320      	movs	r3, #32
 8001c08:	e003      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c0c:	fab3 f383 	clz	r3, r3
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	3301      	adds	r3, #1
 8001c14:	f003 021f 	and.w	r2, r3, #31
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c20:	430b      	orrs	r3, r1
 8001c22:	e080      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x560>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	3301      	adds	r3, #1
 8001c38:	069b      	lsls	r3, r3, #26
 8001c3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c3e:	e015      	b.n	8001c6c <HAL_ADC_ConfigChannel+0x58c>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c50:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	e003      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	3301      	adds	r3, #1
 8001c66:	069b      	lsls	r3, r3, #26
 8001c68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x5ac>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	0e9b      	lsrs	r3, r3, #26
 8001c7e:	3301      	adds	r3, #1
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	e017      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x5dc>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	61fb      	str	r3, [r7, #28]
  return result;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	e003      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	ea42 0103 	orr.w	r1, r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10d      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x608>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	0e9b      	lsrs	r3, r3, #26
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b1e      	subs	r3, #30
 8001ce0:	051b      	lsls	r3, r3, #20
 8001ce2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	e01d      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x644>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	fa93 f3a3 	rbit	r3, r3
 8001cf4:	613b      	str	r3, [r7, #16]
  return result;
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8001d00:	2320      	movs	r3, #32
 8001d02:	e005      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x630>
 8001d04:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	3301      	adds	r3, #1
 8001d12:	f003 021f 	and.w	r2, r3, #31
 8001d16:	4613      	mov	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3b1e      	subs	r3, #30
 8001d1e:	051b      	lsls	r3, r3, #20
 8001d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d24:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f7ff f99e 	bl	800106c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b45      	ldr	r3, [pc, #276]	; (8001e4c <HAL_ADC_ConfigChannel+0x76c>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d07c      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d3c:	4844      	ldr	r0, [pc, #272]	; (8001e50 <HAL_ADC_ConfigChannel+0x770>)
 8001d3e:	f7ff f8f3 	bl	8000f28 <LL_ADC_GetCommonPathInternalCh>
 8001d42:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d46:	4843      	ldr	r0, [pc, #268]	; (8001e54 <HAL_ADC_ConfigChannel+0x774>)
 8001d48:	f7ff fa42 	bl	80011d0 <LL_ADC_IsEnabled>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d15e      	bne.n	8001e10 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a40      	ldr	r2, [pc, #256]	; (8001e58 <HAL_ADC_ConfigChannel+0x778>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d127      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x6cc>
 8001d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d121      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a39      	ldr	r2, [pc, #228]	; (8001e54 <HAL_ADC_ConfigChannel+0x774>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d161      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4834      	ldr	r0, [pc, #208]	; (8001e50 <HAL_ADC_ConfigChannel+0x770>)
 8001d7e:	f7ff f8c0 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d82:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_ADC_ConfigChannel+0x77c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	099b      	lsrs	r3, r3, #6
 8001d88:	4a35      	ldr	r2, [pc, #212]	; (8001e60 <HAL_ADC_ConfigChannel+0x780>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	4613      	mov	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001d9c:	e002      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f9      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001daa:	e044      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_ADC_ConfigChannel+0x784>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d113      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x6fe>
 8001db6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a23      	ldr	r2, [pc, #140]	; (8001e54 <HAL_ADC_ConfigChannel+0x774>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d134      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481e      	ldr	r0, [pc, #120]	; (8001e50 <HAL_ADC_ConfigChannel+0x770>)
 8001dd8:	f7ff f893 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ddc:	e02b      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_ADC_ConfigChannel+0x788>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d126      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
 8001de8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d120      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <HAL_ADC_ConfigChannel+0x774>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11b      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001dfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e02:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e06:	4619      	mov	r1, r3
 8001e08:	4811      	ldr	r0, [pc, #68]	; (8001e50 <HAL_ADC_ConfigChannel+0x770>)
 8001e0a:	f7ff f87a 	bl	8000f02 <LL_ADC_SetCommonPathInternalCh>
 8001e0e:	e012      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e14:	f043 0220 	orr.w	r2, r3, #32
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001e22:	e008      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8001e3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	37d8      	adds	r7, #216	; 0xd8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	80080000 	.word	0x80080000
 8001e50:	50040300 	.word	0x50040300
 8001e54:	50040000 	.word	0x50040000
 8001e58:	c7520000 	.word	0xc7520000
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	053e2d63 	.word	0x053e2d63
 8001e64:	cb840000 	.word	0xcb840000
 8001e68:	80000001 	.word	0x80000001

08001e6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f9a7 	bl	80011d0 <LL_ADC_IsEnabled>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d15e      	bne.n	8001f46 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <ADC_Enable+0xe4>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00d      	beq.n	8001eb2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f043 0210 	orr.w	r2, r3, #16
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea6:	f043 0201 	orr.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04a      	b.n	8001f48 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f976 	bl	80011a8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001ebc:	4825      	ldr	r0, [pc, #148]	; (8001f54 <ADC_Enable+0xe8>)
 8001ebe:	f7ff f833 	bl	8000f28 <LL_ADC_GetCommonPathInternalCh>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00f      	beq.n	8001eec <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <ADC_Enable+0xec>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	099b      	lsrs	r3, r3, #6
 8001ed2:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <ADC_Enable+0xf0>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	3301      	adds	r3, #1
 8001edc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001ede:	e002      	b.n	8001ee6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f9      	bne.n	8001ee0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001eec:	f7fe ffba 	bl	8000e64 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ef2:	e021      	b.n	8001f38 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff f969 	bl	80011d0 <LL_ADC_IsEnabled>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff f94d 	bl	80011a8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f0e:	f7fe ffa9 	bl	8000e64 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d90d      	bls.n	8001f38 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	f043 0210 	orr.w	r2, r3, #16
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	659a      	str	r2, [r3, #88]	; 0x58
          
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e007      	b.n	8001f48 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d1d6      	bne.n	8001ef4 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	8000003f 	.word	0x8000003f
 8001f54:	50040300 	.word	0x50040300
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	053e2d63 	.word	0x053e2d63

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff47 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff5e 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff90 	bl	8002018 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5f 	bl	8001fc4 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffb2 	bl	8002080 <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	e14c      	b.n	80023d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2101      	movs	r1, #1
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	4013      	ands	r3, r2
 8002146:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 813e 	beq.w	80023cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d005      	beq.n	8002168 <HAL_GPIO_Init+0x40>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d130      	bne.n	80021ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4013      	ands	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800219e:	2201      	movs	r2, #1
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4013      	ands	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	091b      	lsrs	r3, r3, #4
 80021b4:	f003 0201 	and.w	r2, r3, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d017      	beq.n	8002206 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d123      	bne.n	800225a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	08da      	lsrs	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3208      	adds	r2, #8
 800221a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	220f      	movs	r2, #15
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	6939      	ldr	r1, [r7, #16]
 8002256:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0203 	and.w	r2, r3, #3
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8098 	beq.w	80023cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800229c:	4a54      	ldr	r2, [pc, #336]	; (80023f0 <HAL_GPIO_Init+0x2c8>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022c6:	d019      	beq.n	80022fc <HAL_GPIO_Init+0x1d4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a4a      	ldr	r2, [pc, #296]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d013      	beq.n	80022f8 <HAL_GPIO_Init+0x1d0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a49      	ldr	r2, [pc, #292]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d00d      	beq.n	80022f4 <HAL_GPIO_Init+0x1cc>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a48      	ldr	r2, [pc, #288]	; (80023fc <HAL_GPIO_Init+0x2d4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d007      	beq.n	80022f0 <HAL_GPIO_Init+0x1c8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a47      	ldr	r2, [pc, #284]	; (8002400 <HAL_GPIO_Init+0x2d8>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_GPIO_Init+0x1c4>
 80022e8:	2304      	movs	r3, #4
 80022ea:	e008      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022ec:	2307      	movs	r3, #7
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022f0:	2303      	movs	r3, #3
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x1d6>
 80022fc:	2300      	movs	r3, #0
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800230e:	4938      	ldr	r1, [pc, #224]	; (80023f0 <HAL_GPIO_Init+0x2c8>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800231c:	4b39      	ldr	r3, [pc, #228]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002340:	4a30      	ldr	r2, [pc, #192]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800236a:	4a26      	ldr	r2, [pc, #152]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002370:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 8002372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43db      	mvns	r3, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002396:	4a1b      	ldr	r2, [pc, #108]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 80023a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023c4:	4a0f      	ldr	r2, [pc, #60]	; (8002404 <HAL_GPIO_Init+0x2dc>)
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3301      	adds	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f47f aeab 	bne.w	8002138 <HAL_GPIO_Init+0x10>
  }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40010000 	.word	0x40010000
 80023f4:	48000400 	.word	0x48000400
 80023f8:	48000800 	.word	0x48000800
 80023fc:	48000c00 	.word	0x48000c00
 8002400:	48001000 	.word	0x48001000
 8002404:	58000800 	.word	0x58000800

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002424:	e002      	b.n	800242c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0c0      	b.n	80025cc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7fe fb76 	bl	8000b50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2203      	movs	r2, #3
 8002468:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fd03 	bl	8004e7c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	73fb      	strb	r3, [r7, #15]
 800247a:	e03e      	b.n	80024fa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	440b      	add	r3, r1
 800248a:	3311      	adds	r3, #17
 800248c:	2201      	movs	r2, #1
 800248e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	3310      	adds	r3, #16
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024a4:	7bfa      	ldrb	r2, [r7, #15]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	440b      	add	r3, r1
 80024b2:	3313      	adds	r3, #19
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	440b      	add	r3, r1
 80024c6:	3320      	adds	r3, #32
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	440b      	add	r3, r1
 80024da:	3324      	adds	r3, #36	; 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	791b      	ldrb	r3, [r3, #4]
 80024fe:	7bfa      	ldrb	r2, [r7, #15]
 8002500:	429a      	cmp	r2, r3
 8002502:	d3bb      	bcc.n	800247c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002504:	2300      	movs	r3, #0
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e044      	b.n	8002594 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	f203 1351 	addw	r3, r3, #337	; 0x151
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	3301      	adds	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	791b      	ldrb	r3, [r3, #4]
 8002598:	7bfa      	ldrb	r2, [r7, #15]
 800259a:	429a      	cmp	r2, r3
 800259c:	d3b5      	bcc.n	800250a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3304      	adds	r3, #4
 80025a6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80025aa:	f002 fc82 	bl	8004eb2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7a9b      	ldrb	r3, [r3, #10]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f805 	bl	80025d4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800260c:	b29b      	uxth	r3, r3
 800260e:	f043 0302 	orr.w	r3, r3, #2
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800262c:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a04      	ldr	r2, [pc, #16]	; (8002644 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002632:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	58000400 	.word	0x58000400

08002648 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_PWREx_GetVoltageRange+0x18>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	58000400 	.word	0x58000400

08002664 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002676:	d101      	bne.n	800267c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_RCC_HSE_Enable>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_RCC_HSE_Disable>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80026aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026b8:	6013      	str	r3, [r2, #0]
}
 80026ba:	bf00      	nop
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_RCC_HSE_IsReady>:
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80026c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026d6:	d101      	bne.n	80026dc <LL_RCC_HSE_IsReady+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_RCC_HSE_IsReady+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_RCC_HSI_Enable>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80026ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fa:	6013      	str	r3, [r2, #0]
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <LL_RCC_HSI_Disable>:
{
 8002706:	b480      	push	{r7}
 8002708:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002718:	6013      	str	r3, [r2, #0]
}
 800271a:	bf00      	nop
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <LL_RCC_HSI_IsReady>:
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002736:	d101      	bne.n	800273c <LL_RCC_HSI_IsReady+0x18>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <LL_RCC_HSI_IsReady+0x1a>
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <LL_RCC_HSI48_Enable>:
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800278a:	bf00      	nop
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <LL_RCC_HSI48_Disable>:
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_HSI48_IsReady>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d101      	bne.n	80027ce <LL_RCC_HSI48_IsReady+0x18>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <LL_RCC_HSI48_IsReady+0x1a>
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <LL_RCC_LSE_Enable>:
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_RCC_LSE_Disable>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <LL_RCC_LSE_EnableBypass>:
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002836:	bf00      	nop
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_RCC_LSE_DisableBypass>:
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002850:	f023 0304 	bic.w	r3, r3, #4
 8002854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b02      	cmp	r3, #2
 8002874:	d101      	bne.n	800287a <LL_RCC_LSE_IsReady+0x18>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <LL_RCC_LSE_IsReady+0x1a>
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d101      	bne.n	80028e2 <LL_RCC_LSI1_IsReady+0x18>
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <LL_RCC_LSI1_IsReady+0x1a>
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028fe:	f043 0304 	orr.w	r3, r3, #4
 8002902:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800291c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b08      	cmp	r3, #8
 8002944:	d101      	bne.n	800294a <LL_RCC_LSI2_IsReady+0x18>
 8002946:	2301      	movs	r3, #1
 8002948:	e000      	b.n	800294c <LL_RCC_LSI2_IsReady+0x1a>
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002966:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6013      	str	r3, [r2, #0]
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80029c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d101      	bne.n	80029d6 <LL_RCC_MSI_IsReady+0x16>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <LL_RCC_MSI_IsReady+0x18>
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2bb0      	cmp	r3, #176	; 0xb0
 8002a20:	d901      	bls.n	8002a26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002a22:	23b0      	movs	r3, #176	; 0xb0
 8002a24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002a26:	687b      	ldr	r3, [r7, #4]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	021b      	lsls	r3, r3, #8
 8002a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 0203 	bic.w	r2, r3, #3
 8002a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	608b      	str	r3, [r1, #8]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b02:	f023 020f 	bic.w	r2, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	608b      	str	r3, [r1, #8]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c22:	d101      	bne.n	8002c28 <LL_RCC_PLL_IsReady+0x18>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_RCC_PLL_IsReady+0x1a>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0303 	and.w	r3, r3, #3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d101      	bne.n	8002cae <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cce:	d101      	bne.n	8002cd4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d101      	bne.n	8002cfa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002d06:	b480      	push	{r7}
 8002d08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d18:	d101      	bne.n	8002d1e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d3c:	d101      	bne.n	8002d42 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b08d      	sub	sp, #52	; 0x34
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e363      	b.n	800342a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 808d 	beq.w	8002e8a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d70:	f7ff fe89 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8002d74:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d76:	f7ff ff82 	bl	8002c7e <LL_RCC_PLL_GetMainSource>
 8002d7a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RCC_OscConfig+0x3e>
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	2b0c      	cmp	r3, #12
 8002d86:	d147      	bne.n	8002e18 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d144      	bne.n	8002e18 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69db      	ldr	r3, [r3, #28]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e347      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d9e:	f7ff fe34 	bl	8002a0a <LL_RCC_MSI_GetRange>
 8002da2:	4603      	mov	r3, r0
 8002da4:	429c      	cmp	r4, r3
 8002da6:	d914      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fd2f 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e336      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fe0e 	bl	80029e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fe32 	bl	8002a34 <LL_RCC_MSI_SetCalibTrimming>
 8002dd0:	e013      	b.n	8002dfa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fe03 	bl	80029e2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fe27 	bl	8002a34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 fd10 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e317      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002dfa:	f000 fcc9 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4aa4      	ldr	r2, [pc, #656]	; (8003094 <HAL_RCC_OscConfig+0x344>)
 8002e02:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e04:	4ba4      	ldr	r3, [pc, #656]	; (8003098 <HAL_RCC_OscConfig+0x348>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd ffdd 	bl	8000dc8 <HAL_InitTick>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d039      	beq.n	8002e88 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e308      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01e      	beq.n	8002e5e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e20:	f7ff fdb0 	bl	8002984 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e24:	f7fe f81e 	bl	8000e64 <HAL_GetTick>
 8002e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e2c:	f7fe f81a 	bl	8000e64 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e2f5      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002e3e:	f7ff fdbf 	bl	80029c0 <LL_RCC_MSI_IsReady>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f1      	beq.n	8002e2c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fdc8 	bl	80029e2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fdec 	bl	8002a34 <LL_RCC_MSI_SetCalibTrimming>
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e5e:	f7ff fda0 	bl	80029a2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e62:	f7fd ffff 	bl	8000e64 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e6a:	f7fd fffb 	bl	8000e64 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e2d6      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e7c:	f7ff fda0 	bl	80029c0 <LL_RCC_MSI_IsReady>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f1      	bne.n	8002e6a <HAL_RCC_OscConfig+0x11a>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e88:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d047      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e96:	f7ff fdf6 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8002e9a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	f7ff feef 	bl	8002c7e <LL_RCC_PLL_GetMainSource>
 8002ea0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x164>
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d108      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d134      	bne.n	8002f26 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e2b4      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d102      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x180>
 8002eca:	f7ff fbdd 	bl	8002688 <LL_RCC_HSE_Enable>
 8002ece:	e001      	b.n	8002ed4 <HAL_RCC_OscConfig+0x184>
 8002ed0:	f7ff fbe9 	bl	80026a6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d012      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fd ffc2 	bl	8000e64 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fd ffbe 	bl	8000e64 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e299      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ef6:	f7ff fbe5 	bl	80026c4 <LL_RCC_HSE_IsReady>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f1      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x194>
 8002f00:	e011      	b.n	8002f26 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f02:	f7fd ffaf 	bl	8000e64 <HAL_GetTick>
 8002f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0a:	f7fd ffab 	bl	8000e64 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b64      	cmp	r3, #100	; 0x64
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e286      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002f1c:	f7ff fbd2 	bl	80026c4 <LL_RCC_HSE_IsReady>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f1      	bne.n	8002f0a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d04c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f32:	f7ff fda8 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8002f36:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f38:	f7ff fea1 	bl	8002c7e <LL_RCC_PLL_GetMainSource>
 8002f3c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2b04      	cmp	r3, #4
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x200>
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	2b0c      	cmp	r3, #12
 8002f48:	d10e      	bne.n	8002f68 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d10b      	bne.n	8002f68 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e266      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fbf1 	bl	8002748 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f66:	e031      	b.n	8002fcc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d019      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f70:	f7ff fbba 	bl	80026e8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fd ff76 	bl	8000e64 <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fd ff72 	bl	8000e64 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e24d      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f8e:	f7ff fbc9 	bl	8002724 <LL_RCC_HSI_IsReady>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d0f1      	beq.n	8002f7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fbd3 	bl	8002748 <LL_RCC_HSI_SetCalibTrimming>
 8002fa2:	e013      	b.n	8002fcc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa4:	f7ff fbaf 	bl	8002706 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fd ff5c 	bl	8000e64 <HAL_GetTick>
 8002fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb0:	f7fd ff58 	bl	8000e64 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e233      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002fc2:	f7ff fbaf 	bl	8002724 <LL_RCC_HSI_IsReady>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f1      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a3 	beq.w	800312c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d076      	beq.n	80030dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d046      	beq.n	8003088 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002ffa:	f7ff fc66 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d113      	bne.n	800302c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003004:	f7ff fc3f 	bl	8002886 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003008:	f7fd ff2c 	bl	8000e64 <HAL_GetTick>
 800300c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003010:	f7fd ff28 	bl	8000e64 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e203      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003022:	f7ff fc52 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0f1      	beq.n	8003010 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800302c:	f7ff fc5f 	bl	80028ee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fd ff18 	bl	8000e64 <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003038:	f7fd ff14 	bl	8000e64 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b03      	cmp	r3, #3
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1ef      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800304a:	f7ff fc72 	bl	8002932 <LL_RCC_LSI2_IsReady>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f1      	beq.n	8003038 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fc7c 	bl	8002956 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800305e:	f7ff fc23 	bl	80028a8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fd feff 	bl	8000e64 <HAL_GetTick>
 8003066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800306a:	f7fd fefb 	bl	8000e64 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e1d6      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800307c:	f7ff fc25 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f1      	bne.n	800306a <HAL_RCC_OscConfig+0x31a>
 8003086:	e051      	b.n	800312c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003088:	f7ff fbfd 	bl	8002886 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fd feea 	bl	8000e64 <HAL_GetTick>
 8003090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003092:	e00c      	b.n	80030ae <HAL_RCC_OscConfig+0x35e>
 8003094:	20000008 	.word	0x20000008
 8003098:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800309c:	f7fd fee2 	bl	8000e64 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e1bd      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80030ae:	f7ff fc0c 	bl	80028ca <LL_RCC_LSI1_IsReady>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0f1      	beq.n	800309c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80030b8:	f7ff fc2a 	bl	8002910 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030be:	f7fd fed1 	bl	8000e64 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1ac      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80030d0:	f7ff fc2f 	bl	8002932 <LL_RCC_LSI2_IsReady>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f1      	bne.n	80030be <HAL_RCC_OscConfig+0x36e>
 80030da:	e027      	b.n	800312c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80030dc:	f7ff fc18 	bl	8002910 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd fec0 	bl	8000e64 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80030e8:	f7fd febc 	bl	8000e64 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e197      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030fa:	f7ff fc1a 	bl	8002932 <LL_RCC_LSI2_IsReady>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f1      	bne.n	80030e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003104:	f7ff fbd0 	bl	80028a8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fd feac 	bl	8000e64 <HAL_GetTick>
 800310c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003110:	f7fd fea8 	bl	8000e64 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e183      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003122:	f7ff fbd2 	bl	80028ca <LL_RCC_LSI1_IsReady>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f1      	bne.n	8003110 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d05b      	beq.n	80031f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003138:	4ba7      	ldr	r3, [pc, #668]	; (80033d8 <HAL_RCC_OscConfig+0x688>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d114      	bne.n	800316e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003144:	f7ff fa70 	bl	8002628 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003148:	f7fd fe8c 	bl	8000e64 <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003150:	f7fd fe88 	bl	8000e64 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e163      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003162:	4b9d      	ldr	r3, [pc, #628]	; (80033d8 <HAL_RCC_OscConfig+0x688>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HAL_RCC_OscConfig+0x42c>
 8003176:	f7ff fb30 	bl	80027da <LL_RCC_LSE_Enable>
 800317a:	e00c      	b.n	8003196 <HAL_RCC_OscConfig+0x446>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d104      	bne.n	800318e <HAL_RCC_OscConfig+0x43e>
 8003184:	f7ff fb4b 	bl	800281e <LL_RCC_LSE_EnableBypass>
 8003188:	f7ff fb27 	bl	80027da <LL_RCC_LSE_Enable>
 800318c:	e003      	b.n	8003196 <HAL_RCC_OscConfig+0x446>
 800318e:	f7ff fb35 	bl	80027fc <LL_RCC_LSE_Disable>
 8003192:	f7ff fb55 	bl	8002840 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fd fe61 	bl	8000e64 <HAL_GetTick>
 80031a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80031a4:	e00a      	b.n	80031bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fd fe5d 	bl	8000e64 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e136      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80031bc:	f7ff fb51 	bl	8002862 <LL_RCC_LSE_IsReady>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ef      	beq.n	80031a6 <HAL_RCC_OscConfig+0x456>
 80031c6:	e013      	b.n	80031f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd fe4c 	bl	8000e64 <HAL_GetTick>
 80031cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fd fe48 	bl	8000e64 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	; 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e121      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80031e6:	f7ff fb3c 	bl	8002862 <LL_RCC_LSE_IsReady>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ef      	bne.n	80031d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02c      	beq.n	8003256 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003200:	2b00      	cmp	r3, #0
 8003202:	d014      	beq.n	800322e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003204:	f7ff fab5 	bl	8002772 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003208:	f7fd fe2c 	bl	8000e64 <HAL_GetTick>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003210:	f7fd fe28 	bl	8000e64 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e103      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003222:	f7ff fac8 	bl	80027b6 <LL_RCC_HSI48_IsReady>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f1      	beq.n	8003210 <HAL_RCC_OscConfig+0x4c0>
 800322c:	e013      	b.n	8003256 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800322e:	f7ff fab1 	bl	8002794 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fd fe17 	bl	8000e64 <HAL_GetTick>
 8003236:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800323a:	f7fd fe13 	bl	8000e64 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0ee      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800324c:	f7ff fab3 	bl	80027b6 <LL_RCC_HSI48_IsReady>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f1      	bne.n	800323a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80e4 	beq.w	8003428 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003260:	f7ff fc11 	bl	8002a86 <LL_RCC_GetSysClkSource>
 8003264:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003272:	2b02      	cmp	r3, #2
 8003274:	f040 80b4 	bne.w	80033e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0203 	and.w	r2, r3, #3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	429a      	cmp	r2, r3
 8003284:	d123      	bne.n	80032ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d11c      	bne.n	80032ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d114      	bne.n	80032ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d10d      	bne.n	80032ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d106      	bne.n	80032ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d05d      	beq.n	800338a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d058      	beq.n	8003386 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0a1      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032e6:	f7ff fc84 	bl	8002bf2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ea:	f7fd fdbb 	bl	8000e64 <HAL_GetTick>
 80032ee:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f2:	f7fd fdb7 	bl	8000e64 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e092      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1ef      	bne.n	80032f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x68c>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003324:	4311      	orrs	r1, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800332a:	0212      	lsls	r2, r2, #8
 800332c:	4311      	orrs	r1, r2
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003332:	4311      	orrs	r1, r2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003338:	4311      	orrs	r1, r2
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800333e:	430a      	orrs	r2, r1
 8003340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003344:	4313      	orrs	r3, r2
 8003346:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003348:	f7ff fc44 	bl	8002bd4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800335c:	f7fd fd82 	bl	8000e64 <HAL_GetTick>
 8003360:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fd fd7e 	bl	8000e64 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e059      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	e050      	b.n	8003428 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e04f      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800338a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d147      	bne.n	8003428 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003398:	f7ff fc1c 	bl	8002bd4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ac:	f7fd fd5a 	bl	8000e64 <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b4:	f7fd fd56 	bl	8000e64 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e031      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0ef      	beq.n	80033b4 <HAL_RCC_OscConfig+0x664>
 80033d4:	e028      	b.n	8003428 <HAL_RCC_OscConfig+0x6d8>
 80033d6:	bf00      	nop
 80033d8:	58000400 	.word	0x58000400
 80033dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d01e      	beq.n	8003424 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e6:	f7ff fc04 	bl	8002bf2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fd fd3b 	bl	8000e64 <HAL_GetTick>
 80033ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fd fd37 	bl	8000e64 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e012      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ef      	bne.n	80033f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_RCC_OscConfig+0x6e4>)
 800341e:	4013      	ands	r3, r2
 8003420:	60cb      	str	r3, [r1, #12]
 8003422:	e001      	b.n	8003428 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3734      	adds	r7, #52	; 0x34
 800342e:	46bd      	mov	sp, r7
 8003430:	bd90      	pop	{r4, r7, pc}
 8003432:	bf00      	nop
 8003434:	eefefffc 	.word	0xeefefffc

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e12d      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b98      	ldr	r3, [pc, #608]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d91b      	bls.n	8003492 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b95      	ldr	r3, [pc, #596]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 0207 	bic.w	r2, r3, #7
 8003462:	4993      	ldr	r1, [pc, #588]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800346a:	f7fd fcfb 	bl	8000e64 <HAL_GetTick>
 800346e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003470:	e008      	b.n	8003484 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003472:	f7fd fcf7 	bl	8000e64 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e111      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003484:	4b8a      	ldr	r3, [pc, #552]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d1ef      	bne.n	8003472 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d016      	beq.n	80034cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fafb 	bl	8002a9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034a8:	f7fd fcdc 	bl	8000e64 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034b0:	f7fd fcd8 	bl	8000e64 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e0f2      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80034c2:	f7ff fbe8 	bl	8002c96 <LL_RCC_IsActiveFlag_HPRE>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f1      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d016      	beq.n	8003506 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff faf2 	bl	8002ac6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034e2:	f7fd fcbf 	bl	8000e64 <HAL_GetTick>
 80034e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034ea:	f7fd fcbb 	bl	8000e64 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0d5      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034fc:	f7ff fbdd 	bl	8002cba <LL_RCC_IsActiveFlag_C2HPRE>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f1      	beq.n	80034ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350e:	2b00      	cmp	r3, #0
 8003510:	d016      	beq.n	8003540 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4618      	mov	r0, r3
 8003518:	f7ff faeb 	bl	8002af2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800351c:	f7fd fca2 	bl	8000e64 <HAL_GetTick>
 8003520:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003524:	f7fd fc9e 	bl	8000e64 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0b8      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003536:	f7ff fbd3 	bl	8002ce0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f1      	beq.n	8003524 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d016      	beq.n	800357a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fae5 	bl	8002b20 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003556:	f7fd fc85 	bl	8000e64 <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800355e:	f7fd fc81 	bl	8000e64 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e09b      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003570:	f7ff fbc9 	bl	8002d06 <LL_RCC_IsActiveFlag_PPRE1>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0f1      	beq.n	800355e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d017      	beq.n	80035b6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff fadb 	bl	8002b48 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003592:	f7fd fc67 	bl	8000e64 <HAL_GetTick>
 8003596:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800359a:	f7fd fc63 	bl	8000e64 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e07d      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80035ac:	f7ff fbbd 	bl	8002d2a <LL_RCC_IsActiveFlag_PPRE2>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f1      	beq.n	800359a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d043      	beq.n	800364a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d106      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80035ca:	f7ff f87b 	bl	80026c4 <LL_RCC_HSE_IsReady>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11e      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e067      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d106      	bne.n	80035ee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80035e0:	f7ff fb16 	bl	8002c10 <LL_RCC_PLL_IsReady>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d113      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e05c      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035f6:	f7ff f9e3 	bl	80029c0 <LL_RCC_MSI_IsReady>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e051      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003604:	f7ff f88e 	bl	8002724 <LL_RCC_HSI_IsReady>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e04a      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fa21 	bl	8002a5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361c:	f7fd fc22 	bl	8000e64 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	e00a      	b.n	800363a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003624:	f7fd fc1e 	bl	8000e64 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e036      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363a:	f7ff fa24 	bl	8002a86 <LL_RCC_GetSysClkSource>
 800363e:	4602      	mov	r2, r0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	429a      	cmp	r2, r3
 8003648:	d1ec      	bne.n	8003624 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800364a:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0307 	and.w	r3, r3, #7
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	429a      	cmp	r2, r3
 8003656:	d21b      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f023 0207 	bic.w	r2, r3, #7
 8003660:	4913      	ldr	r1, [pc, #76]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003668:	f7fd fbfc 	bl	8000e64 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	e008      	b.n	8003682 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003670:	f7fd fbf8 	bl	8000e64 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e012      	b.n	80036a8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x278>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d1ef      	bne.n	8003670 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003690:	f000 f87e 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 8003694:	4603      	mov	r3, r0
 8003696:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <HAL_RCC_ClockConfig+0x27c>)
 8003698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800369a:	f7fd fbef 	bl	8000e7c <HAL_GetTickPrio>
 800369e:	4603      	mov	r3, r0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7fd fb91 	bl	8000dc8 <HAL_InitTick>
 80036a6:	4603      	mov	r3, r0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	58004000 	.word	0x58004000
 80036b4:	20000008 	.word	0x20000008

080036b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036be:	f7ff f9e2 	bl	8002a86 <LL_RCC_GetSysClkSource>
 80036c2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10a      	bne.n	80036e0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036ca:	f7ff f99e 	bl	8002a0a <LL_RCC_MSI_GetRange>
 80036ce:	4603      	mov	r3, r0
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	4a2b      	ldr	r2, [pc, #172]	; (8003784 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e04b      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d102      	bne.n	80036ec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80036e6:	4b28      	ldr	r3, [pc, #160]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	e045      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d10a      	bne.n	8003708 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036f2:	f7fe ffb7 	bl	8002664 <LL_RCC_HSE_IsEnabledDiv2>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d102      	bne.n	8003702 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036fc:	4b22      	ldr	r3, [pc, #136]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e03a      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	e037      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003708:	f7ff fab9 	bl	8002c7e <LL_RCC_PLL_GetMainSource>
 800370c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d003      	beq.n	800371c <HAL_RCC_GetSysClockFreq+0x64>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b03      	cmp	r3, #3
 8003718:	d003      	beq.n	8003722 <HAL_RCC_GetSysClockFreq+0x6a>
 800371a:	e00d      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800371c:	4b1a      	ldr	r3, [pc, #104]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 800371e:	60bb      	str	r3, [r7, #8]
        break;
 8003720:	e015      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003722:	f7fe ff9f 	bl	8002664 <LL_RCC_HSE_IsEnabledDiv2>
 8003726:	4603      	mov	r3, r0
 8003728:	2b01      	cmp	r3, #1
 800372a:	d102      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800372c:	4b16      	ldr	r3, [pc, #88]	; (8003788 <HAL_RCC_GetSysClockFreq+0xd0>)
 800372e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003730:	e00d      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003732:	4b16      	ldr	r3, [pc, #88]	; (800378c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003734:	60bb      	str	r3, [r7, #8]
        break;
 8003736:	e00a      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003738:	f7ff f967 	bl	8002a0a <LL_RCC_MSI_GetRange>
 800373c:	4603      	mov	r3, r0
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	4a0f      	ldr	r2, [pc, #60]	; (8003784 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374a:	60bb      	str	r3, [r7, #8]
        break;
 800374c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800374e:	f7ff fa71 	bl	8002c34 <LL_RCC_PLL_GetN>
 8003752:	4602      	mov	r2, r0
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	fb03 f402 	mul.w	r4, r3, r2
 800375a:	f7ff fa84 	bl	8002c66 <LL_RCC_PLL_GetDivider>
 800375e:	4603      	mov	r3, r0
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	3301      	adds	r3, #1
 8003764:	fbb4 f4f3 	udiv	r4, r4, r3
 8003768:	f7ff fa71 	bl	8002c4e <LL_RCC_PLL_GetR>
 800376c:	4603      	mov	r3, r0
 800376e:	0f5b      	lsrs	r3, r3, #29
 8003770:	3301      	adds	r3, #1
 8003772:	fbb4 f3f3 	udiv	r3, r4, r3
 8003776:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bd90      	pop	{r4, r7, pc}
 8003782:	bf00      	nop
 8003784:	080058fc 	.word	0x080058fc
 8003788:	00f42400 	.word	0x00f42400
 800378c:	01e84800 	.word	0x01e84800

08003790 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b598      	push	{r3, r4, r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003794:	f7ff ff90 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 8003798:	4604      	mov	r4, r0
 800379a:	f7ff f9e9 	bl	8002b70 <LL_RCC_GetAHBPrescaler>
 800379e:	4603      	mov	r3, r0
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80037a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	bd98      	pop	{r3, r4, r7, pc}
 80037b4:	0800589c 	.word	0x0800589c

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b598      	push	{r3, r4, r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037bc:	f7ff ffe8 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037c0:	4604      	mov	r4, r0
 80037c2:	f7ff f9ef 	bl	8002ba4 <LL_RCC_GetAPB1Prescaler>
 80037c6:	4603      	mov	r3, r0
 80037c8:	0a1b      	lsrs	r3, r3, #8
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	4a04      	ldr	r2, [pc, #16]	; (80037e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d4:	f003 031f 	and.w	r3, r3, #31
 80037d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd98      	pop	{r3, r4, r7, pc}
 80037e0:	080058dc 	.word	0x080058dc

080037e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e4:	b598      	push	{r3, r4, r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80037e8:	f7ff ffd2 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037ec:	4604      	mov	r4, r0
 80037ee:	f7ff f9e5 	bl	8002bbc <LL_RCC_GetAPB2Prescaler>
 80037f2:	4603      	mov	r3, r0
 80037f4:	0adb      	lsrs	r3, r3, #11
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_RCC_GetPCLK2Freq+0x28>)
 80037fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003800:	f003 031f 	and.w	r3, r3, #31
 8003804:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd98      	pop	{r3, r4, r7, pc}
 800380c:	080058dc 	.word	0x080058dc

08003810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2bb0      	cmp	r3, #176	; 0xb0
 800381c:	d903      	bls.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e007      	b.n	8003836 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	4a11      	ldr	r2, [pc, #68]	; (8003874 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003834:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003836:	f7ff f9a7 	bl	8002b88 <LL_RCC_GetAHB4Prescaler>
 800383a:	4603      	mov	r3, r0
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	4a0d      	ldr	r2, [pc, #52]	; (8003878 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	0c9c      	lsrs	r4, r3, #18
 800385a:	f7fe fef5 	bl	8002648 <HAL_PWREx_GetVoltageRange>
 800385e:	4603      	mov	r3, r0
 8003860:	4619      	mov	r1, r3
 8003862:	4620      	mov	r0, r4
 8003864:	f000 f80c 	bl	8003880 <RCC_SetFlashLatency>
 8003868:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	080058fc 	.word	0x080058fc
 8003878:	0800589c 	.word	0x0800589c
 800387c:	431bde83 	.word	0x431bde83

08003880 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b093      	sub	sp, #76	; 0x4c
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800388a:	4b37      	ldr	r3, [pc, #220]	; (8003968 <RCC_SetFlashLatency+0xe8>)
 800388c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003890:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003896:	4a35      	ldr	r2, [pc, #212]	; (800396c <RCC_SetFlashLatency+0xec>)
 8003898:	f107 031c 	add.w	r3, r7, #28
 800389c:	ca07      	ldmia	r2, {r0, r1, r2}
 800389e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80038a2:	4b33      	ldr	r3, [pc, #204]	; (8003970 <RCC_SetFlashLatency+0xf0>)
 80038a4:	f107 040c 	add.w	r4, r7, #12
 80038a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80038ae:	2300      	movs	r3, #0
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b8:	d11a      	bne.n	80038f0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	643b      	str	r3, [r7, #64]	; 0x40
 80038be:	e013      	b.n	80038e8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80038c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	3348      	adds	r3, #72	; 0x48
 80038c6:	443b      	add	r3, r7
 80038c8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d807      	bhi.n	80038e2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	3348      	adds	r3, #72	; 0x48
 80038d8:	443b      	add	r3, r7
 80038da:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038de:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80038e0:	e020      	b.n	8003924 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80038e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e4:	3301      	adds	r3, #1
 80038e6:	643b      	str	r3, [r7, #64]	; 0x40
 80038e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d9e8      	bls.n	80038c0 <RCC_SetFlashLatency+0x40>
 80038ee:	e019      	b.n	8003924 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038f0:	2300      	movs	r3, #0
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f4:	e013      	b.n	800391e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	3348      	adds	r3, #72	; 0x48
 80038fc:	443b      	add	r3, r7
 80038fe:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d807      	bhi.n	8003918 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	3348      	adds	r3, #72	; 0x48
 800390e:	443b      	add	r3, r7
 8003910:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003914:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003916:	e005      	b.n	8003924 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800391a:	3301      	adds	r3, #1
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	2b02      	cmp	r3, #2
 8003922:	d9e8      	bls.n	80038f6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <RCC_SetFlashLatency+0xf4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 0207 	bic.w	r2, r3, #7
 800392c:	4911      	ldr	r1, [pc, #68]	; (8003974 <RCC_SetFlashLatency+0xf4>)
 800392e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003934:	f7fd fa96 	bl	8000e64 <HAL_GetTick>
 8003938:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800393a:	e008      	b.n	800394e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800393c:	f7fd fa92 	bl	8000e64 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e007      	b.n	800395e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <RCC_SetFlashLatency+0xf4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003958:	429a      	cmp	r2, r3
 800395a:	d1ef      	bne.n	800393c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	374c      	adds	r7, #76	; 0x4c
 8003962:	46bd      	mov	sp, r7
 8003964:	bd90      	pop	{r4, r7, pc}
 8003966:	bf00      	nop
 8003968:	08005870 	.word	0x08005870
 800396c:	08005880 	.word	0x08005880
 8003970:	0800588c 	.word	0x0800588c
 8003974:	58004000 	.word	0x58004000

08003978 <LL_RCC_LSE_IsEnabled>:
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <LL_RCC_LSE_IsEnabled+0x18>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_RCC_LSE_IsEnabled+0x1a>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_RCC_LSE_IsReady>:
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80039a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d101      	bne.n	80039b4 <LL_RCC_LSE_IsReady+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <LL_RCC_LSE_IsReady+0x1a>
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_RCC_MSI_EnablePLLMode>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ce:	f043 0304 	orr.w	r3, r3, #4
 80039d2:	6013      	str	r3, [r2, #0]
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <LL_RCC_SetRFWKPClockSource>:
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80039e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_RCC_SetSMPSClockSource>:
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f023 0203 	bic.w	r2, r3, #3
 8003a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_RCC_SetSMPSPrescaler>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <LL_RCC_SetUSARTClockSource>:
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	b083      	sub	sp, #12
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6a:	f023 0203 	bic.w	r2, r3, #3
 8003a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <LL_RCC_SetLPUARTClockSource>:
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <LL_RCC_SetI2CClockSource>:
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	091b      	lsrs	r3, r3, #4
 8003ac6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003aca:	43db      	mvns	r3, r3
 8003acc:	401a      	ands	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_RCC_SetLPTIMClockSource>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	041b      	lsls	r3, r3, #16
 8003b02:	43db      	mvns	r3, r3
 8003b04:	401a      	ands	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	041b      	lsls	r3, r3, #16
 8003b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_RCC_SetSAIClockSource>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_RCC_SetRNGClockSource>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_RCC_SetCLK48ClockSource>:
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_SetUSBClockSource>:
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ffe3 	bl	8003b78 <LL_RCC_SetCLK48ClockSource>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <LL_RCC_SetADCClockSource>:
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <LL_RCC_SetRTCClockSource>:
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_RCC_GetRTCClockSource>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_RCC_ForceBackupDomainReset>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <LL_RCC_PLLSAI1_Enable>:
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c82:	6013      	str	r3, [r2, #0]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_RCC_PLLSAI1_Disable>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	6013      	str	r3, [r2, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_RCC_PLLSAI1_IsReady>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbe:	d101      	bne.n	8003cc4 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003cd8:	2300      	movs	r3, #0
 8003cda:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003cdc:	2300      	movs	r3, #0
 8003cde:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d034      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cf4:	d021      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003cf6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cfa:	d81b      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d00:	d01d      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003d02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d06:	d815      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00b      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d10:	d110      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d20:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d22:	e00d      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f94d 	bl	8003fc8 <RCCEx_PLLSAI1_ConfigNP>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	77fb      	strb	r3, [r7, #31]
        break;
 8003d38:	e002      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d3a:	bf00      	nop
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d40:	7ffb      	ldrb	r3, [r7, #31]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d105      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7ff fee8 	bl	8003b20 <LL_RCC_SetSAIClockSource>
 8003d50:	e001      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
 8003d54:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d046      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003d62:	f7ff ff56 	bl	8003c12 <LL_RCC_GetRTCClockSource>
 8003d66:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d03c      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d72:	f7fe fc59 	bl	8002628 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff30 	bl	8003be6 <LL_RCC_SetRTCClockSource>
 8003d86:	e02e      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d90:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d92:	f7ff ff4b 	bl	8003c2c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d96:	f7ff ff5a 	bl	8003c4e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003db2:	f7ff fde1 	bl	8003978 <LL_RCC_LSE_IsEnabled>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d114      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dbc:	f7fd f852 	bl	8000e64 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003dc2:	e00b      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc4:	f7fd f84e 	bl	8000e64 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d902      	bls.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	77fb      	strb	r3, [r7, #31]
              break;
 8003dda:	e004      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003ddc:	f7ff fdde 	bl	800399c <LL_RCC_LSE_IsReady>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003de6:	7ffb      	ldrb	r3, [r7, #31]
 8003de8:	77bb      	strb	r3, [r7, #30]
 8003dea:	e001      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	7ffb      	ldrb	r3, [r7, #31]
 8003dee:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fe2a 	bl	8003a5a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fe35 	bl	8003a86 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fe5d 	bl	8003aec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d004      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fe52 	bl	8003aec <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d004      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fe2a 	bl	8003ab2 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fe1f 	bl	8003ab2 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d022      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fe8d 	bl	8003ba4 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f8e3 	bl	800407e <RCCEx_PLLSAI1_ConfigNQ>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003ec2:	7ffb      	ldrb	r3, [r7, #31]
 8003ec4:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02b      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eda:	d008      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ee4:	d003      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d105      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fe2a 	bl	8003b4c <LL_RCC_SetRNGClockSource>
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7ff fe21 	bl	8003b4c <LL_RCC_SetRNGClockSource>
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fe34 	bl	8003b78 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003f18:	d107      	bne.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f28:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d022      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fe3d 	bl	8003bba <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f48:	d107      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f62:	d10b      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 f8e3 	bl	8004134 <RCCEx_PLLSAI1_ConfigNR>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f72:	7ffb      	ldrb	r3, [r7, #31]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003f78:	7ffb      	ldrb	r3, [r7, #31]
 8003f7a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff fd26 	bl	80039de <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fd45 	bl	8003a32 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fd2c 	bl	8003a0a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003fb2:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8003fc0:	f7ff fcfe 	bl	80039c0 <LL_RCC_MSI_EnablePLLMode>
}
 8003fc4:	bf00      	nop
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003fd4:	f7ff fe5b 	bl	8003c8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003fd8:	f7fc ff44 	bl	8000e64 <HAL_GetTick>
 8003fdc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003fde:	e009      	b.n	8003ff4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fe0:	f7fc ff40 	bl	8000e64 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d902      	bls.n	8003ff4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ff2:	e004      	b.n	8003ffe <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003ff4:	f7ff fe5a 	bl	8003cac <LL_RCC_PLLSAI1_IsReady>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d137      	bne.n	8004074 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004018:	4313      	orrs	r3, r2
 800401a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800401c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800402e:	4313      	orrs	r3, r2
 8004030:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004032:	f7ff fe1d 	bl	8003c70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fc ff15 	bl	8000e64 <HAL_GetTick>
 800403a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800403c:	e009      	b.n	8004052 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800403e:	f7fc ff11 	bl	8000e64 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d902      	bls.n	8004052 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	73fb      	strb	r3, [r7, #15]
        break;
 8004050:	e004      	b.n	800405c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004052:	f7ff fe2b 	bl	8003cac <LL_RCC_PLLSAI1_IsReady>
 8004056:	4603      	mov	r3, r0
 8004058:	2b01      	cmp	r3, #1
 800405a:	d1f0      	bne.n	800403e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d108      	bne.n	8004074 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004070:	4313      	orrs	r3, r2
 8004072:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004074:	7bfb      	ldrb	r3, [r7, #15]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800408a:	f7ff fe00 	bl	8003c8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800408e:	f7fc fee9 	bl	8000e64 <HAL_GetTick>
 8004092:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004094:	e009      	b.n	80040aa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004096:	f7fc fee5 	bl	8000e64 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d902      	bls.n	80040aa <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	e004      	b.n	80040b4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040aa:	f7ff fdff 	bl	8003cac <LL_RCC_PLLSAI1_IsReady>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f0      	bne.n	8004096 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d137      	bne.n	800412a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80040d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e4:	4313      	orrs	r3, r2
 80040e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80040e8:	f7ff fdc2 	bl	8003c70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040ec:	f7fc feba 	bl	8000e64 <HAL_GetTick>
 80040f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80040f2:	e009      	b.n	8004108 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f4:	f7fc feb6 	bl	8000e64 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d902      	bls.n	8004108 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	73fb      	strb	r3, [r7, #15]
        break;
 8004106:	e004      	b.n	8004112 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004108:	f7ff fdd0 	bl	8003cac <LL_RCC_PLLSAI1_IsReady>
 800410c:	4603      	mov	r3, r0
 800410e:	2b01      	cmp	r3, #1
 8004110:	d1f0      	bne.n	80040f4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004112:	7bfb      	ldrb	r3, [r7, #15]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d108      	bne.n	800412a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	691a      	ldr	r2, [r3, #16]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004126:	4313      	orrs	r3, r2
 8004128:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004140:	f7ff fda5 	bl	8003c8e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004144:	f7fc fe8e 	bl	8000e64 <HAL_GetTick>
 8004148:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800414a:	e009      	b.n	8004160 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800414c:	f7fc fe8a 	bl	8000e64 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d902      	bls.n	8004160 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	73fb      	strb	r3, [r7, #15]
      break;
 800415e:	e004      	b.n	800416a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004160:	f7ff fda4 	bl	8003cac <LL_RCC_PLLSAI1_IsReady>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d137      	bne.n	80041e0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004184:	4313      	orrs	r3, r2
 8004186:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419a:	4313      	orrs	r3, r2
 800419c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800419e:	f7ff fd67 	bl	8003c70 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a2:	f7fc fe5f 	bl	8000e64 <HAL_GetTick>
 80041a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041a8:	e009      	b.n	80041be <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041aa:	f7fc fe5b 	bl	8000e64 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d902      	bls.n	80041be <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	73fb      	strb	r3, [r7, #15]
        break;
 80041bc:	e004      	b.n	80041c8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80041be:	f7ff fd75 	bl	8003cac <LL_RCC_PLLSAI1_IsReady>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d1f0      	bne.n	80041aa <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d108      	bne.n	80041e0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041dc:	4313      	orrs	r3, r2
 80041de:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80041e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <LL_RCC_GetUSARTClockSource>:
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4013      	ands	r3, r2
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <LL_RCC_GetLPUARTClockSource>:
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4013      	ands	r3, r2
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e042      	b.n	80042c2 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fc fc38 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f022 0201 	bic.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fadf 	bl	8004838 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f8b4 	bl	80043e8 <UART_SetConfig>
 8004280:	4603      	mov	r3, r0
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e01b      	b.n	80042c2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004298:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fb5e 	bl	800497c <UART_CheckIdleState>
 80042c0:	4603      	mov	r3, r0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d17b      	bne.n	80043dc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_UART_Transmit+0x26>
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e074      	b.n	80043de <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2221      	movs	r2, #33	; 0x21
 8004300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004304:	f7fc fdae 	bl	8000e64 <HAL_GetTick>
 8004308:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d108      	bne.n	8004336 <HAL_UART_Transmit+0x6c>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e003      	b.n	800433e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800433e:	e030      	b.n	80043a2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	2200      	movs	r2, #0
 8004348:	2180      	movs	r1, #128	; 0x80
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fbc0 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d005      	beq.n	8004362 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e03d      	b.n	80043de <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10b      	bne.n	8004380 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	881b      	ldrh	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	3302      	adds	r3, #2
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	e007      	b.n	8004390 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	3301      	adds	r3, #1
 800438e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1c8      	bne.n	8004340 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2200      	movs	r2, #0
 80043b6:	2140      	movs	r1, #64	; 0x40
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fb89 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e006      	b.n	80043de <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80043d8:	2300      	movs	r3, #0
 80043da:	e000      	b.n	80043de <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80043dc:	2302      	movs	r3, #2
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3720      	adds	r7, #32
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ec:	b08c      	sub	sp, #48	; 0x30
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	431a      	orrs	r2, r3
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	431a      	orrs	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	69db      	ldr	r3, [r3, #28]
 800440c:	4313      	orrs	r3, r2
 800440e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4baf      	ldr	r3, [pc, #700]	; (80046d4 <UART_SetConfig+0x2ec>)
 8004418:	4013      	ands	r3, r2
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	6812      	ldr	r2, [r2, #0]
 800441e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004420:	430b      	orrs	r3, r1
 8004422:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4aa4      	ldr	r2, [pc, #656]	; (80046d8 <UART_SetConfig+0x2f0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d004      	beq.n	8004454 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004450:	4313      	orrs	r3, r2
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800445e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004468:	430b      	orrs	r3, r1
 800446a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	f023 010f 	bic.w	r1, r3, #15
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a95      	ldr	r2, [pc, #596]	; (80046dc <UART_SetConfig+0x2f4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d125      	bne.n	80044d8 <UART_SetConfig+0xf0>
 800448c:	2003      	movs	r0, #3
 800448e:	f7ff feac 	bl	80041ea <LL_RCC_GetUSARTClockSource>
 8004492:	4603      	mov	r3, r0
 8004494:	2b03      	cmp	r3, #3
 8004496:	d81b      	bhi.n	80044d0 <UART_SetConfig+0xe8>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0xb8>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044b1 	.word	0x080044b1
 80044a4:	080044c1 	.word	0x080044c1
 80044a8:	080044b9 	.word	0x080044b9
 80044ac:	080044c9 	.word	0x080044c9
 80044b0:	2301      	movs	r3, #1
 80044b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044b6:	e042      	b.n	800453e <UART_SetConfig+0x156>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044be:	e03e      	b.n	800453e <UART_SetConfig+0x156>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044c6:	e03a      	b.n	800453e <UART_SetConfig+0x156>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ce:	e036      	b.n	800453e <UART_SetConfig+0x156>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044d6:	e032      	b.n	800453e <UART_SetConfig+0x156>
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a7e      	ldr	r2, [pc, #504]	; (80046d8 <UART_SetConfig+0x2f0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d12a      	bne.n	8004538 <UART_SetConfig+0x150>
 80044e2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80044e6:	f7ff fe90 	bl	800420a <LL_RCC_GetLPUARTClockSource>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044f0:	d01a      	beq.n	8004528 <UART_SetConfig+0x140>
 80044f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044f6:	d81b      	bhi.n	8004530 <UART_SetConfig+0x148>
 80044f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044fc:	d00c      	beq.n	8004518 <UART_SetConfig+0x130>
 80044fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004502:	d815      	bhi.n	8004530 <UART_SetConfig+0x148>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <UART_SetConfig+0x128>
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450c:	d008      	beq.n	8004520 <UART_SetConfig+0x138>
 800450e:	e00f      	b.n	8004530 <UART_SetConfig+0x148>
 8004510:	2300      	movs	r3, #0
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004516:	e012      	b.n	800453e <UART_SetConfig+0x156>
 8004518:	2302      	movs	r3, #2
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451e:	e00e      	b.n	800453e <UART_SetConfig+0x156>
 8004520:	2304      	movs	r3, #4
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004526:	e00a      	b.n	800453e <UART_SetConfig+0x156>
 8004528:	2308      	movs	r3, #8
 800452a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800452e:	e006      	b.n	800453e <UART_SetConfig+0x156>
 8004530:	2310      	movs	r3, #16
 8004532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004536:	e002      	b.n	800453e <UART_SetConfig+0x156>
 8004538:	2310      	movs	r3, #16
 800453a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a65      	ldr	r2, [pc, #404]	; (80046d8 <UART_SetConfig+0x2f0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	f040 8097 	bne.w	8004678 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800454a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800454e:	2b08      	cmp	r3, #8
 8004550:	d823      	bhi.n	800459a <UART_SetConfig+0x1b2>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x170>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	0800457d 	.word	0x0800457d
 800455c:	0800459b 	.word	0x0800459b
 8004560:	08004585 	.word	0x08004585
 8004564:	0800459b 	.word	0x0800459b
 8004568:	0800458b 	.word	0x0800458b
 800456c:	0800459b 	.word	0x0800459b
 8004570:	0800459b 	.word	0x0800459b
 8004574:	0800459b 	.word	0x0800459b
 8004578:	08004593 	.word	0x08004593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457c:	f7ff f91c 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004582:	e010      	b.n	80045a6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <UART_SetConfig+0x2f8>)
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004588:	e00d      	b.n	80045a6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7ff f895 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 800458e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004590:	e009      	b.n	80045a6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004598:	e005      	b.n	80045a6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 812b 	beq.w	8004804 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	4a4c      	ldr	r2, [pc, #304]	; (80046e4 <UART_SetConfig+0x2fc>)
 80045b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d305      	bcc.n	80045de <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d903      	bls.n	80045e6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045e4:	e10e      	b.n	8004804 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	2200      	movs	r2, #0
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	60fa      	str	r2, [r7, #12]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	4a3c      	ldr	r2, [pc, #240]	; (80046e4 <UART_SetConfig+0x2fc>)
 80045f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2200      	movs	r2, #0
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004604:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004608:	f7fb fe12 	bl	8000230 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	f04f 0300 	mov.w	r3, #0
 800461c:	020b      	lsls	r3, r1, #8
 800461e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004622:	0202      	lsls	r2, r0, #8
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	6849      	ldr	r1, [r1, #4]
 8004628:	0849      	lsrs	r1, r1, #1
 800462a:	2000      	movs	r0, #0
 800462c:	460c      	mov	r4, r1
 800462e:	4605      	mov	r5, r0
 8004630:	eb12 0804 	adds.w	r8, r2, r4
 8004634:	eb43 0905 	adc.w	r9, r3, r5
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	469a      	mov	sl, r3
 8004640:	4693      	mov	fp, r2
 8004642:	4652      	mov	r2, sl
 8004644:	465b      	mov	r3, fp
 8004646:	4640      	mov	r0, r8
 8004648:	4649      	mov	r1, r9
 800464a:	f7fb fdf1 	bl	8000230 <__aeabi_uldivmod>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4613      	mov	r3, r2
 8004654:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465c:	d308      	bcc.n	8004670 <UART_SetConfig+0x288>
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004664:	d204      	bcs.n	8004670 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a3a      	ldr	r2, [r7, #32]
 800466c:	60da      	str	r2, [r3, #12]
 800466e:	e0c9      	b.n	8004804 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004676:	e0c5      	b.n	8004804 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004680:	d16d      	bne.n	800475e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004686:	3b01      	subs	r3, #1
 8004688:	2b07      	cmp	r3, #7
 800468a:	d82d      	bhi.n	80046e8 <UART_SetConfig+0x300>
 800468c:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <UART_SetConfig+0x2ac>)
 800468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004692:	bf00      	nop
 8004694:	080046b5 	.word	0x080046b5
 8004698:	080046bd 	.word	0x080046bd
 800469c:	080046e9 	.word	0x080046e9
 80046a0:	080046c3 	.word	0x080046c3
 80046a4:	080046e9 	.word	0x080046e9
 80046a8:	080046e9 	.word	0x080046e9
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	080046cb 	.word	0x080046cb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046b4:	f7ff f896 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 80046b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046ba:	e01b      	b.n	80046f4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <UART_SetConfig+0x2f8>)
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046c0:	e018      	b.n	80046f4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046c2:	f7fe fff9 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 80046c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046c8:	e014      	b.n	80046f4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046d0:	e010      	b.n	80046f4 <UART_SetConfig+0x30c>
 80046d2:	bf00      	nop
 80046d4:	cfff69f3 	.word	0xcfff69f3
 80046d8:	40008000 	.word	0x40008000
 80046dc:	40013800 	.word	0x40013800
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	0800593c 	.word	0x0800593c
      default:
        pclk = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8084 	beq.w	8004804 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	4a4b      	ldr	r2, [pc, #300]	; (8004830 <UART_SetConfig+0x448>)
 8004702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004706:	461a      	mov	r2, r3
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	fbb3 f3f2 	udiv	r3, r3, r2
 800470e:	005a      	lsls	r2, r3, #1
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	085b      	lsrs	r3, r3, #1
 8004716:	441a      	add	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004720:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d916      	bls.n	8004756 <UART_SetConfig+0x36e>
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472e:	d212      	bcs.n	8004756 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004730:	6a3b      	ldr	r3, [r7, #32]
 8004732:	b29b      	uxth	r3, r3
 8004734:	f023 030f 	bic.w	r3, r3, #15
 8004738:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	b29b      	uxth	r3, r3
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	b29a      	uxth	r2, r3
 8004746:	8bfb      	ldrh	r3, [r7, #30]
 8004748:	4313      	orrs	r3, r2
 800474a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	8bfa      	ldrh	r2, [r7, #30]
 8004752:	60da      	str	r2, [r3, #12]
 8004754:	e056      	b.n	8004804 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800475c:	e052      	b.n	8004804 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800475e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004762:	3b01      	subs	r3, #1
 8004764:	2b07      	cmp	r3, #7
 8004766:	d822      	bhi.n	80047ae <UART_SetConfig+0x3c6>
 8004768:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0x388>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	08004791 	.word	0x08004791
 8004774:	08004799 	.word	0x08004799
 8004778:	080047af 	.word	0x080047af
 800477c:	0800479f 	.word	0x0800479f
 8004780:	080047af 	.word	0x080047af
 8004784:	080047af 	.word	0x080047af
 8004788:	080047af 	.word	0x080047af
 800478c:	080047a7 	.word	0x080047a7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004790:	f7ff f828 	bl	80037e4 <HAL_RCC_GetPCLK2Freq>
 8004794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004796:	e010      	b.n	80047ba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004798:	4b26      	ldr	r3, [pc, #152]	; (8004834 <UART_SetConfig+0x44c>)
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800479c:	e00d      	b.n	80047ba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479e:	f7fe ff8b 	bl	80036b8 <HAL_RCC_GetSysClockFreq>
 80047a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80047a4:	e009      	b.n	80047ba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80047ac:	e005      	b.n	80047ba <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80047b8:	bf00      	nop
    }

    if (pclk != 0U)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d021      	beq.n	8004804 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <UART_SetConfig+0x448>)
 80047c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ca:	461a      	mov	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	441a      	add	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	2b0f      	cmp	r3, #15
 80047e8:	d909      	bls.n	80047fe <UART_SetConfig+0x416>
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d205      	bcs.n	80047fe <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e002      	b.n	8004804 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2201      	movs	r2, #1
 8004808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	2201      	movs	r2, #1
 8004810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2200      	movs	r2, #0
 8004818:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004820:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004824:	4618      	mov	r0, r3
 8004826:	3730      	adds	r7, #48	; 0x30
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482e:	bf00      	nop
 8004830:	0800593c 	.word	0x0800593c
 8004834:	00f42400 	.word	0x00f42400

08004838 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	f003 0310 	and.w	r3, r3, #16
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01a      	beq.n	800494e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004936:	d10a      	bne.n	800494e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b098      	sub	sp, #96	; 0x60
 8004980:	af02      	add	r7, sp, #8
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800498c:	f7fc fa6a 	bl	8000e64 <HAL_GetTick>
 8004990:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0308 	and.w	r3, r3, #8
 800499c:	2b08      	cmp	r3, #8
 800499e:	d12f      	bne.n	8004a00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f88e 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d022      	beq.n	8004a00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ce:	653b      	str	r3, [r7, #80]	; 0x50
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049d8:	647b      	str	r3, [r7, #68]	; 0x44
 80049da:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e063      	b.n	8004ac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d149      	bne.n	8004aa2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a0e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a16:	2200      	movs	r2, #0
 8004a18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f857 	bl	8004ad0 <UART_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d03c      	beq.n	8004aa2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a30:	e853 3f00 	ldrex	r3, [r3]
 8004a34:	623b      	str	r3, [r7, #32]
   return(result);
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a46:	633b      	str	r3, [r7, #48]	; 0x30
 8004a48:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1e6      	bne.n	8004a28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a7a:	61fa      	str	r2, [r7, #28]
 8004a7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	69b9      	ldr	r1, [r7, #24]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	617b      	str	r3, [r7, #20]
   return(result);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e012      	b.n	8004ac8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3758      	adds	r7, #88	; 0x58
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae0:	e04f      	b.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d04b      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aea:	f7fc f9bb 	bl	8000e64 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e04e      	b.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d037      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d034      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b40      	cmp	r3, #64	; 0x40
 8004b1c:	d031      	beq.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d110      	bne.n	8004b4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2208      	movs	r2, #8
 8004b32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f000 f838 	bl	8004baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e029      	b.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5c:	d111      	bne.n	8004b82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f81e 	bl	8004baa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e00f      	b.n	8004ba2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	bf0c      	ite	eq
 8004b92:	2301      	moveq	r3, #1
 8004b94:	2300      	movne	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d0a0      	beq.n	8004ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b095      	sub	sp, #84	; 0x54
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e6      	bne.n	8004bb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3308      	adds	r3, #8
 8004bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3308      	adds	r3, #8
 8004c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e3      	bne.n	8004be4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d118      	bne.n	8004c56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f023 0310 	bic.w	r3, r3, #16
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c46:	6979      	ldr	r1, [r7, #20]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	e841 2300 	strex	r3, r2, [r1]
 8004c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1e6      	bne.n	8004c24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004c6a:	bf00      	nop
 8004c6c:	3754      	adds	r7, #84	; 0x54
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_UARTEx_DisableFifoMode+0x16>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e027      	b.n	8004cdc <HAL_UARTEx_DisableFifoMode+0x66>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0201 	bic.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004cba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e02d      	b.n	8004d5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0201 	bic.w	r2, r2, #1
 8004d26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f84f 	bl	8004de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e02d      	b.n	8004dd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2224      	movs	r2, #36	; 0x24
 8004d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f811 	bl	8004de0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d108      	bne.n	8004e02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e00:	e031      	b.n	8004e66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e02:	2308      	movs	r3, #8
 8004e04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e06:	2308      	movs	r3, #8
 8004e08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	0e5b      	lsrs	r3, r3, #25
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	0f5b      	lsrs	r3, r3, #29
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e2a:	7bbb      	ldrb	r3, [r7, #14]
 8004e2c:	7b3a      	ldrb	r2, [r7, #12]
 8004e2e:	4911      	ldr	r1, [pc, #68]	; (8004e74 <UARTEx_SetNbDataToProcess+0x94>)
 8004e30:	5c8a      	ldrb	r2, [r1, r2]
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e36:	7b3a      	ldrb	r2, [r7, #12]
 8004e38:	490f      	ldr	r1, [pc, #60]	; (8004e78 <UARTEx_SetNbDataToProcess+0x98>)
 8004e3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	7b7a      	ldrb	r2, [r7, #13]
 8004e4c:	4909      	ldr	r1, [pc, #36]	; (8004e74 <UARTEx_SetNbDataToProcess+0x94>)
 8004e4e:	5c8a      	ldrb	r2, [r1, r2]
 8004e50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e54:	7b7a      	ldrb	r2, [r7, #13]
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <UARTEx_SetNbDataToProcess+0x98>)
 8004e58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	08005954 	.word	0x08005954
 8004e78:	0800595c 	.word	0x0800595c

08004e7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004e84:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004e88:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	43db      	mvns	r3, r3
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	1d3b      	adds	r3, r7, #4
 8004ebc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
	...

08004ef0 <siprintf>:
 8004ef0:	b40e      	push	{r1, r2, r3}
 8004ef2:	b500      	push	{lr}
 8004ef4:	b09c      	sub	sp, #112	; 0x70
 8004ef6:	ab1d      	add	r3, sp, #116	; 0x74
 8004ef8:	9002      	str	r0, [sp, #8]
 8004efa:	9006      	str	r0, [sp, #24]
 8004efc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f00:	4809      	ldr	r0, [pc, #36]	; (8004f28 <siprintf+0x38>)
 8004f02:	9107      	str	r1, [sp, #28]
 8004f04:	9104      	str	r1, [sp, #16]
 8004f06:	4909      	ldr	r1, [pc, #36]	; (8004f2c <siprintf+0x3c>)
 8004f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0c:	9105      	str	r1, [sp, #20]
 8004f0e:	6800      	ldr	r0, [r0, #0]
 8004f10:	9301      	str	r3, [sp, #4]
 8004f12:	a902      	add	r1, sp, #8
 8004f14:	f000 f992 	bl	800523c <_svfiprintf_r>
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	b01c      	add	sp, #112	; 0x70
 8004f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f24:	b003      	add	sp, #12
 8004f26:	4770      	bx	lr
 8004f28:	20000060 	.word	0x20000060
 8004f2c:	ffff0208 	.word	0xffff0208

08004f30 <memset>:
 8004f30:	4402      	add	r2, r0
 8004f32:	4603      	mov	r3, r0
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d100      	bne.n	8004f3a <memset+0xa>
 8004f38:	4770      	bx	lr
 8004f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f3e:	e7f9      	b.n	8004f34 <memset+0x4>

08004f40 <__errno>:
 8004f40:	4b01      	ldr	r3, [pc, #4]	; (8004f48 <__errno+0x8>)
 8004f42:	6818      	ldr	r0, [r3, #0]
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000060 	.word	0x20000060

08004f4c <__libc_init_array>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4d0d      	ldr	r5, [pc, #52]	; (8004f84 <__libc_init_array+0x38>)
 8004f50:	4c0d      	ldr	r4, [pc, #52]	; (8004f88 <__libc_init_array+0x3c>)
 8004f52:	1b64      	subs	r4, r4, r5
 8004f54:	10a4      	asrs	r4, r4, #2
 8004f56:	2600      	movs	r6, #0
 8004f58:	42a6      	cmp	r6, r4
 8004f5a:	d109      	bne.n	8004f70 <__libc_init_array+0x24>
 8004f5c:	4d0b      	ldr	r5, [pc, #44]	; (8004f8c <__libc_init_array+0x40>)
 8004f5e:	4c0c      	ldr	r4, [pc, #48]	; (8004f90 <__libc_init_array+0x44>)
 8004f60:	f000 fc6a 	bl	8005838 <_init>
 8004f64:	1b64      	subs	r4, r4, r5
 8004f66:	10a4      	asrs	r4, r4, #2
 8004f68:	2600      	movs	r6, #0
 8004f6a:	42a6      	cmp	r6, r4
 8004f6c:	d105      	bne.n	8004f7a <__libc_init_array+0x2e>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f74:	4798      	blx	r3
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7ee      	b.n	8004f58 <__libc_init_array+0xc>
 8004f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f7e:	4798      	blx	r3
 8004f80:	3601      	adds	r6, #1
 8004f82:	e7f2      	b.n	8004f6a <__libc_init_array+0x1e>
 8004f84:	080059a0 	.word	0x080059a0
 8004f88:	080059a0 	.word	0x080059a0
 8004f8c:	080059a0 	.word	0x080059a0
 8004f90:	080059a4 	.word	0x080059a4

08004f94 <__retarget_lock_acquire_recursive>:
 8004f94:	4770      	bx	lr

08004f96 <__retarget_lock_release_recursive>:
 8004f96:	4770      	bx	lr

08004f98 <_free_r>:
 8004f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f9a:	2900      	cmp	r1, #0
 8004f9c:	d044      	beq.n	8005028 <_free_r+0x90>
 8004f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fa2:	9001      	str	r0, [sp, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f1a1 0404 	sub.w	r4, r1, #4
 8004faa:	bfb8      	it	lt
 8004fac:	18e4      	addlt	r4, r4, r3
 8004fae:	f000 f8df 	bl	8005170 <__malloc_lock>
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <_free_r+0x94>)
 8004fb4:	9801      	ldr	r0, [sp, #4]
 8004fb6:	6813      	ldr	r3, [r2, #0]
 8004fb8:	b933      	cbnz	r3, 8004fc8 <_free_r+0x30>
 8004fba:	6063      	str	r3, [r4, #4]
 8004fbc:	6014      	str	r4, [r2, #0]
 8004fbe:	b003      	add	sp, #12
 8004fc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fc4:	f000 b8da 	b.w	800517c <__malloc_unlock>
 8004fc8:	42a3      	cmp	r3, r4
 8004fca:	d908      	bls.n	8004fde <_free_r+0x46>
 8004fcc:	6825      	ldr	r5, [r4, #0]
 8004fce:	1961      	adds	r1, r4, r5
 8004fd0:	428b      	cmp	r3, r1
 8004fd2:	bf01      	itttt	eq
 8004fd4:	6819      	ldreq	r1, [r3, #0]
 8004fd6:	685b      	ldreq	r3, [r3, #4]
 8004fd8:	1949      	addeq	r1, r1, r5
 8004fda:	6021      	streq	r1, [r4, #0]
 8004fdc:	e7ed      	b.n	8004fba <_free_r+0x22>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b10b      	cbz	r3, 8004fe8 <_free_r+0x50>
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d9fa      	bls.n	8004fde <_free_r+0x46>
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	1855      	adds	r5, r2, r1
 8004fec:	42a5      	cmp	r5, r4
 8004fee:	d10b      	bne.n	8005008 <_free_r+0x70>
 8004ff0:	6824      	ldr	r4, [r4, #0]
 8004ff2:	4421      	add	r1, r4
 8004ff4:	1854      	adds	r4, r2, r1
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	d1e0      	bne.n	8004fbe <_free_r+0x26>
 8004ffc:	681c      	ldr	r4, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	6053      	str	r3, [r2, #4]
 8005002:	440c      	add	r4, r1
 8005004:	6014      	str	r4, [r2, #0]
 8005006:	e7da      	b.n	8004fbe <_free_r+0x26>
 8005008:	d902      	bls.n	8005010 <_free_r+0x78>
 800500a:	230c      	movs	r3, #12
 800500c:	6003      	str	r3, [r0, #0]
 800500e:	e7d6      	b.n	8004fbe <_free_r+0x26>
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	1961      	adds	r1, r4, r5
 8005014:	428b      	cmp	r3, r1
 8005016:	bf04      	itt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	bf04      	itt	eq
 8005020:	1949      	addeq	r1, r1, r5
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	6054      	str	r4, [r2, #4]
 8005026:	e7ca      	b.n	8004fbe <_free_r+0x26>
 8005028:	b003      	add	sp, #12
 800502a:	bd30      	pop	{r4, r5, pc}
 800502c:	200005c0 	.word	0x200005c0

08005030 <sbrk_aligned>:
 8005030:	b570      	push	{r4, r5, r6, lr}
 8005032:	4e0e      	ldr	r6, [pc, #56]	; (800506c <sbrk_aligned+0x3c>)
 8005034:	460c      	mov	r4, r1
 8005036:	6831      	ldr	r1, [r6, #0]
 8005038:	4605      	mov	r5, r0
 800503a:	b911      	cbnz	r1, 8005042 <sbrk_aligned+0x12>
 800503c:	f000 fba6 	bl	800578c <_sbrk_r>
 8005040:	6030      	str	r0, [r6, #0]
 8005042:	4621      	mov	r1, r4
 8005044:	4628      	mov	r0, r5
 8005046:	f000 fba1 	bl	800578c <_sbrk_r>
 800504a:	1c43      	adds	r3, r0, #1
 800504c:	d00a      	beq.n	8005064 <sbrk_aligned+0x34>
 800504e:	1cc4      	adds	r4, r0, #3
 8005050:	f024 0403 	bic.w	r4, r4, #3
 8005054:	42a0      	cmp	r0, r4
 8005056:	d007      	beq.n	8005068 <sbrk_aligned+0x38>
 8005058:	1a21      	subs	r1, r4, r0
 800505a:	4628      	mov	r0, r5
 800505c:	f000 fb96 	bl	800578c <_sbrk_r>
 8005060:	3001      	adds	r0, #1
 8005062:	d101      	bne.n	8005068 <sbrk_aligned+0x38>
 8005064:	f04f 34ff 	mov.w	r4, #4294967295
 8005068:	4620      	mov	r0, r4
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	200005c4 	.word	0x200005c4

08005070 <_malloc_r>:
 8005070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005074:	1ccd      	adds	r5, r1, #3
 8005076:	f025 0503 	bic.w	r5, r5, #3
 800507a:	3508      	adds	r5, #8
 800507c:	2d0c      	cmp	r5, #12
 800507e:	bf38      	it	cc
 8005080:	250c      	movcc	r5, #12
 8005082:	2d00      	cmp	r5, #0
 8005084:	4607      	mov	r7, r0
 8005086:	db01      	blt.n	800508c <_malloc_r+0x1c>
 8005088:	42a9      	cmp	r1, r5
 800508a:	d905      	bls.n	8005098 <_malloc_r+0x28>
 800508c:	230c      	movs	r3, #12
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	2600      	movs	r6, #0
 8005092:	4630      	mov	r0, r6
 8005094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005098:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800516c <_malloc_r+0xfc>
 800509c:	f000 f868 	bl	8005170 <__malloc_lock>
 80050a0:	f8d8 3000 	ldr.w	r3, [r8]
 80050a4:	461c      	mov	r4, r3
 80050a6:	bb5c      	cbnz	r4, 8005100 <_malloc_r+0x90>
 80050a8:	4629      	mov	r1, r5
 80050aa:	4638      	mov	r0, r7
 80050ac:	f7ff ffc0 	bl	8005030 <sbrk_aligned>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	4604      	mov	r4, r0
 80050b4:	d155      	bne.n	8005162 <_malloc_r+0xf2>
 80050b6:	f8d8 4000 	ldr.w	r4, [r8]
 80050ba:	4626      	mov	r6, r4
 80050bc:	2e00      	cmp	r6, #0
 80050be:	d145      	bne.n	800514c <_malloc_r+0xdc>
 80050c0:	2c00      	cmp	r4, #0
 80050c2:	d048      	beq.n	8005156 <_malloc_r+0xe6>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	4631      	mov	r1, r6
 80050c8:	4638      	mov	r0, r7
 80050ca:	eb04 0903 	add.w	r9, r4, r3
 80050ce:	f000 fb5d 	bl	800578c <_sbrk_r>
 80050d2:	4581      	cmp	r9, r0
 80050d4:	d13f      	bne.n	8005156 <_malloc_r+0xe6>
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	1a6d      	subs	r5, r5, r1
 80050da:	4629      	mov	r1, r5
 80050dc:	4638      	mov	r0, r7
 80050de:	f7ff ffa7 	bl	8005030 <sbrk_aligned>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d037      	beq.n	8005156 <_malloc_r+0xe6>
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	442b      	add	r3, r5
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	f8d8 3000 	ldr.w	r3, [r8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d038      	beq.n	8005166 <_malloc_r+0xf6>
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	42a2      	cmp	r2, r4
 80050f8:	d12b      	bne.n	8005152 <_malloc_r+0xe2>
 80050fa:	2200      	movs	r2, #0
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	e00f      	b.n	8005120 <_malloc_r+0xb0>
 8005100:	6822      	ldr	r2, [r4, #0]
 8005102:	1b52      	subs	r2, r2, r5
 8005104:	d41f      	bmi.n	8005146 <_malloc_r+0xd6>
 8005106:	2a0b      	cmp	r2, #11
 8005108:	d917      	bls.n	800513a <_malloc_r+0xca>
 800510a:	1961      	adds	r1, r4, r5
 800510c:	42a3      	cmp	r3, r4
 800510e:	6025      	str	r5, [r4, #0]
 8005110:	bf18      	it	ne
 8005112:	6059      	strne	r1, [r3, #4]
 8005114:	6863      	ldr	r3, [r4, #4]
 8005116:	bf08      	it	eq
 8005118:	f8c8 1000 	streq.w	r1, [r8]
 800511c:	5162      	str	r2, [r4, r5]
 800511e:	604b      	str	r3, [r1, #4]
 8005120:	4638      	mov	r0, r7
 8005122:	f104 060b 	add.w	r6, r4, #11
 8005126:	f000 f829 	bl	800517c <__malloc_unlock>
 800512a:	f026 0607 	bic.w	r6, r6, #7
 800512e:	1d23      	adds	r3, r4, #4
 8005130:	1af2      	subs	r2, r6, r3
 8005132:	d0ae      	beq.n	8005092 <_malloc_r+0x22>
 8005134:	1b9b      	subs	r3, r3, r6
 8005136:	50a3      	str	r3, [r4, r2]
 8005138:	e7ab      	b.n	8005092 <_malloc_r+0x22>
 800513a:	42a3      	cmp	r3, r4
 800513c:	6862      	ldr	r2, [r4, #4]
 800513e:	d1dd      	bne.n	80050fc <_malloc_r+0x8c>
 8005140:	f8c8 2000 	str.w	r2, [r8]
 8005144:	e7ec      	b.n	8005120 <_malloc_r+0xb0>
 8005146:	4623      	mov	r3, r4
 8005148:	6864      	ldr	r4, [r4, #4]
 800514a:	e7ac      	b.n	80050a6 <_malloc_r+0x36>
 800514c:	4634      	mov	r4, r6
 800514e:	6876      	ldr	r6, [r6, #4]
 8005150:	e7b4      	b.n	80050bc <_malloc_r+0x4c>
 8005152:	4613      	mov	r3, r2
 8005154:	e7cc      	b.n	80050f0 <_malloc_r+0x80>
 8005156:	230c      	movs	r3, #12
 8005158:	603b      	str	r3, [r7, #0]
 800515a:	4638      	mov	r0, r7
 800515c:	f000 f80e 	bl	800517c <__malloc_unlock>
 8005160:	e797      	b.n	8005092 <_malloc_r+0x22>
 8005162:	6025      	str	r5, [r4, #0]
 8005164:	e7dc      	b.n	8005120 <_malloc_r+0xb0>
 8005166:	605b      	str	r3, [r3, #4]
 8005168:	deff      	udf	#255	; 0xff
 800516a:	bf00      	nop
 800516c:	200005c0 	.word	0x200005c0

08005170 <__malloc_lock>:
 8005170:	4801      	ldr	r0, [pc, #4]	; (8005178 <__malloc_lock+0x8>)
 8005172:	f7ff bf0f 	b.w	8004f94 <__retarget_lock_acquire_recursive>
 8005176:	bf00      	nop
 8005178:	200005bc 	.word	0x200005bc

0800517c <__malloc_unlock>:
 800517c:	4801      	ldr	r0, [pc, #4]	; (8005184 <__malloc_unlock+0x8>)
 800517e:	f7ff bf0a 	b.w	8004f96 <__retarget_lock_release_recursive>
 8005182:	bf00      	nop
 8005184:	200005bc 	.word	0x200005bc

08005188 <__ssputs_r>:
 8005188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800518c:	688e      	ldr	r6, [r1, #8]
 800518e:	461f      	mov	r7, r3
 8005190:	42be      	cmp	r6, r7
 8005192:	680b      	ldr	r3, [r1, #0]
 8005194:	4682      	mov	sl, r0
 8005196:	460c      	mov	r4, r1
 8005198:	4690      	mov	r8, r2
 800519a:	d82c      	bhi.n	80051f6 <__ssputs_r+0x6e>
 800519c:	898a      	ldrh	r2, [r1, #12]
 800519e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051a2:	d026      	beq.n	80051f2 <__ssputs_r+0x6a>
 80051a4:	6965      	ldr	r5, [r4, #20]
 80051a6:	6909      	ldr	r1, [r1, #16]
 80051a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051ac:	eba3 0901 	sub.w	r9, r3, r1
 80051b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051b4:	1c7b      	adds	r3, r7, #1
 80051b6:	444b      	add	r3, r9
 80051b8:	106d      	asrs	r5, r5, #1
 80051ba:	429d      	cmp	r5, r3
 80051bc:	bf38      	it	cc
 80051be:	461d      	movcc	r5, r3
 80051c0:	0553      	lsls	r3, r2, #21
 80051c2:	d527      	bpl.n	8005214 <__ssputs_r+0x8c>
 80051c4:	4629      	mov	r1, r5
 80051c6:	f7ff ff53 	bl	8005070 <_malloc_r>
 80051ca:	4606      	mov	r6, r0
 80051cc:	b360      	cbz	r0, 8005228 <__ssputs_r+0xa0>
 80051ce:	6921      	ldr	r1, [r4, #16]
 80051d0:	464a      	mov	r2, r9
 80051d2:	f000 faeb 	bl	80057ac <memcpy>
 80051d6:	89a3      	ldrh	r3, [r4, #12]
 80051d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	6126      	str	r6, [r4, #16]
 80051e4:	6165      	str	r5, [r4, #20]
 80051e6:	444e      	add	r6, r9
 80051e8:	eba5 0509 	sub.w	r5, r5, r9
 80051ec:	6026      	str	r6, [r4, #0]
 80051ee:	60a5      	str	r5, [r4, #8]
 80051f0:	463e      	mov	r6, r7
 80051f2:	42be      	cmp	r6, r7
 80051f4:	d900      	bls.n	80051f8 <__ssputs_r+0x70>
 80051f6:	463e      	mov	r6, r7
 80051f8:	6820      	ldr	r0, [r4, #0]
 80051fa:	4632      	mov	r2, r6
 80051fc:	4641      	mov	r1, r8
 80051fe:	f000 faab 	bl	8005758 <memmove>
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	1b9b      	subs	r3, r3, r6
 8005206:	60a3      	str	r3, [r4, #8]
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	4433      	add	r3, r6
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	2000      	movs	r0, #0
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	462a      	mov	r2, r5
 8005216:	f000 fad7 	bl	80057c8 <_realloc_r>
 800521a:	4606      	mov	r6, r0
 800521c:	2800      	cmp	r0, #0
 800521e:	d1e0      	bne.n	80051e2 <__ssputs_r+0x5a>
 8005220:	6921      	ldr	r1, [r4, #16]
 8005222:	4650      	mov	r0, sl
 8005224:	f7ff feb8 	bl	8004f98 <_free_r>
 8005228:	230c      	movs	r3, #12
 800522a:	f8ca 3000 	str.w	r3, [sl]
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	f04f 30ff 	mov.w	r0, #4294967295
 800523a:	e7e9      	b.n	8005210 <__ssputs_r+0x88>

0800523c <_svfiprintf_r>:
 800523c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005240:	4698      	mov	r8, r3
 8005242:	898b      	ldrh	r3, [r1, #12]
 8005244:	061b      	lsls	r3, r3, #24
 8005246:	b09d      	sub	sp, #116	; 0x74
 8005248:	4607      	mov	r7, r0
 800524a:	460d      	mov	r5, r1
 800524c:	4614      	mov	r4, r2
 800524e:	d50e      	bpl.n	800526e <_svfiprintf_r+0x32>
 8005250:	690b      	ldr	r3, [r1, #16]
 8005252:	b963      	cbnz	r3, 800526e <_svfiprintf_r+0x32>
 8005254:	2140      	movs	r1, #64	; 0x40
 8005256:	f7ff ff0b 	bl	8005070 <_malloc_r>
 800525a:	6028      	str	r0, [r5, #0]
 800525c:	6128      	str	r0, [r5, #16]
 800525e:	b920      	cbnz	r0, 800526a <_svfiprintf_r+0x2e>
 8005260:	230c      	movs	r3, #12
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	e0d0      	b.n	800540c <_svfiprintf_r+0x1d0>
 800526a:	2340      	movs	r3, #64	; 0x40
 800526c:	616b      	str	r3, [r5, #20]
 800526e:	2300      	movs	r3, #0
 8005270:	9309      	str	r3, [sp, #36]	; 0x24
 8005272:	2320      	movs	r3, #32
 8005274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005278:	f8cd 800c 	str.w	r8, [sp, #12]
 800527c:	2330      	movs	r3, #48	; 0x30
 800527e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005424 <_svfiprintf_r+0x1e8>
 8005282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005286:	f04f 0901 	mov.w	r9, #1
 800528a:	4623      	mov	r3, r4
 800528c:	469a      	mov	sl, r3
 800528e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005292:	b10a      	cbz	r2, 8005298 <_svfiprintf_r+0x5c>
 8005294:	2a25      	cmp	r2, #37	; 0x25
 8005296:	d1f9      	bne.n	800528c <_svfiprintf_r+0x50>
 8005298:	ebba 0b04 	subs.w	fp, sl, r4
 800529c:	d00b      	beq.n	80052b6 <_svfiprintf_r+0x7a>
 800529e:	465b      	mov	r3, fp
 80052a0:	4622      	mov	r2, r4
 80052a2:	4629      	mov	r1, r5
 80052a4:	4638      	mov	r0, r7
 80052a6:	f7ff ff6f 	bl	8005188 <__ssputs_r>
 80052aa:	3001      	adds	r0, #1
 80052ac:	f000 80a9 	beq.w	8005402 <_svfiprintf_r+0x1c6>
 80052b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052b2:	445a      	add	r2, fp
 80052b4:	9209      	str	r2, [sp, #36]	; 0x24
 80052b6:	f89a 3000 	ldrb.w	r3, [sl]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80a1 	beq.w	8005402 <_svfiprintf_r+0x1c6>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052ca:	f10a 0a01 	add.w	sl, sl, #1
 80052ce:	9304      	str	r3, [sp, #16]
 80052d0:	9307      	str	r3, [sp, #28]
 80052d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052d6:	931a      	str	r3, [sp, #104]	; 0x68
 80052d8:	4654      	mov	r4, sl
 80052da:	2205      	movs	r2, #5
 80052dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e0:	4850      	ldr	r0, [pc, #320]	; (8005424 <_svfiprintf_r+0x1e8>)
 80052e2:	f7fa ff55 	bl	8000190 <memchr>
 80052e6:	9a04      	ldr	r2, [sp, #16]
 80052e8:	b9d8      	cbnz	r0, 8005322 <_svfiprintf_r+0xe6>
 80052ea:	06d0      	lsls	r0, r2, #27
 80052ec:	bf44      	itt	mi
 80052ee:	2320      	movmi	r3, #32
 80052f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052f4:	0711      	lsls	r1, r2, #28
 80052f6:	bf44      	itt	mi
 80052f8:	232b      	movmi	r3, #43	; 0x2b
 80052fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005302:	2b2a      	cmp	r3, #42	; 0x2a
 8005304:	d015      	beq.n	8005332 <_svfiprintf_r+0xf6>
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	4654      	mov	r4, sl
 800530a:	2000      	movs	r0, #0
 800530c:	f04f 0c0a 	mov.w	ip, #10
 8005310:	4621      	mov	r1, r4
 8005312:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005316:	3b30      	subs	r3, #48	; 0x30
 8005318:	2b09      	cmp	r3, #9
 800531a:	d94d      	bls.n	80053b8 <_svfiprintf_r+0x17c>
 800531c:	b1b0      	cbz	r0, 800534c <_svfiprintf_r+0x110>
 800531e:	9207      	str	r2, [sp, #28]
 8005320:	e014      	b.n	800534c <_svfiprintf_r+0x110>
 8005322:	eba0 0308 	sub.w	r3, r0, r8
 8005326:	fa09 f303 	lsl.w	r3, r9, r3
 800532a:	4313      	orrs	r3, r2
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	46a2      	mov	sl, r4
 8005330:	e7d2      	b.n	80052d8 <_svfiprintf_r+0x9c>
 8005332:	9b03      	ldr	r3, [sp, #12]
 8005334:	1d19      	adds	r1, r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	9103      	str	r1, [sp, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	bfbb      	ittet	lt
 800533e:	425b      	neglt	r3, r3
 8005340:	f042 0202 	orrlt.w	r2, r2, #2
 8005344:	9307      	strge	r3, [sp, #28]
 8005346:	9307      	strlt	r3, [sp, #28]
 8005348:	bfb8      	it	lt
 800534a:	9204      	strlt	r2, [sp, #16]
 800534c:	7823      	ldrb	r3, [r4, #0]
 800534e:	2b2e      	cmp	r3, #46	; 0x2e
 8005350:	d10c      	bne.n	800536c <_svfiprintf_r+0x130>
 8005352:	7863      	ldrb	r3, [r4, #1]
 8005354:	2b2a      	cmp	r3, #42	; 0x2a
 8005356:	d134      	bne.n	80053c2 <_svfiprintf_r+0x186>
 8005358:	9b03      	ldr	r3, [sp, #12]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	9203      	str	r2, [sp, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	bfb8      	it	lt
 8005364:	f04f 33ff 	movlt.w	r3, #4294967295
 8005368:	3402      	adds	r4, #2
 800536a:	9305      	str	r3, [sp, #20]
 800536c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005434 <_svfiprintf_r+0x1f8>
 8005370:	7821      	ldrb	r1, [r4, #0]
 8005372:	2203      	movs	r2, #3
 8005374:	4650      	mov	r0, sl
 8005376:	f7fa ff0b 	bl	8000190 <memchr>
 800537a:	b138      	cbz	r0, 800538c <_svfiprintf_r+0x150>
 800537c:	9b04      	ldr	r3, [sp, #16]
 800537e:	eba0 000a 	sub.w	r0, r0, sl
 8005382:	2240      	movs	r2, #64	; 0x40
 8005384:	4082      	lsls	r2, r0
 8005386:	4313      	orrs	r3, r2
 8005388:	3401      	adds	r4, #1
 800538a:	9304      	str	r3, [sp, #16]
 800538c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005390:	4825      	ldr	r0, [pc, #148]	; (8005428 <_svfiprintf_r+0x1ec>)
 8005392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005396:	2206      	movs	r2, #6
 8005398:	f7fa fefa 	bl	8000190 <memchr>
 800539c:	2800      	cmp	r0, #0
 800539e:	d038      	beq.n	8005412 <_svfiprintf_r+0x1d6>
 80053a0:	4b22      	ldr	r3, [pc, #136]	; (800542c <_svfiprintf_r+0x1f0>)
 80053a2:	bb1b      	cbnz	r3, 80053ec <_svfiprintf_r+0x1b0>
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	3307      	adds	r3, #7
 80053a8:	f023 0307 	bic.w	r3, r3, #7
 80053ac:	3308      	adds	r3, #8
 80053ae:	9303      	str	r3, [sp, #12]
 80053b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b2:	4433      	add	r3, r6
 80053b4:	9309      	str	r3, [sp, #36]	; 0x24
 80053b6:	e768      	b.n	800528a <_svfiprintf_r+0x4e>
 80053b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80053bc:	460c      	mov	r4, r1
 80053be:	2001      	movs	r0, #1
 80053c0:	e7a6      	b.n	8005310 <_svfiprintf_r+0xd4>
 80053c2:	2300      	movs	r3, #0
 80053c4:	3401      	adds	r4, #1
 80053c6:	9305      	str	r3, [sp, #20]
 80053c8:	4619      	mov	r1, r3
 80053ca:	f04f 0c0a 	mov.w	ip, #10
 80053ce:	4620      	mov	r0, r4
 80053d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d4:	3a30      	subs	r2, #48	; 0x30
 80053d6:	2a09      	cmp	r2, #9
 80053d8:	d903      	bls.n	80053e2 <_svfiprintf_r+0x1a6>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0c6      	beq.n	800536c <_svfiprintf_r+0x130>
 80053de:	9105      	str	r1, [sp, #20]
 80053e0:	e7c4      	b.n	800536c <_svfiprintf_r+0x130>
 80053e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80053e6:	4604      	mov	r4, r0
 80053e8:	2301      	movs	r3, #1
 80053ea:	e7f0      	b.n	80053ce <_svfiprintf_r+0x192>
 80053ec:	ab03      	add	r3, sp, #12
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	462a      	mov	r2, r5
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <_svfiprintf_r+0x1f4>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	4638      	mov	r0, r7
 80053f8:	f3af 8000 	nop.w
 80053fc:	1c42      	adds	r2, r0, #1
 80053fe:	4606      	mov	r6, r0
 8005400:	d1d6      	bne.n	80053b0 <_svfiprintf_r+0x174>
 8005402:	89ab      	ldrh	r3, [r5, #12]
 8005404:	065b      	lsls	r3, r3, #25
 8005406:	f53f af2d 	bmi.w	8005264 <_svfiprintf_r+0x28>
 800540a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800540c:	b01d      	add	sp, #116	; 0x74
 800540e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005412:	ab03      	add	r3, sp, #12
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	462a      	mov	r2, r5
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <_svfiprintf_r+0x1f4>)
 800541a:	a904      	add	r1, sp, #16
 800541c:	4638      	mov	r0, r7
 800541e:	f000 f879 	bl	8005514 <_printf_i>
 8005422:	e7eb      	b.n	80053fc <_svfiprintf_r+0x1c0>
 8005424:	08005964 	.word	0x08005964
 8005428:	0800596e 	.word	0x0800596e
 800542c:	00000000 	.word	0x00000000
 8005430:	08005189 	.word	0x08005189
 8005434:	0800596a 	.word	0x0800596a

08005438 <_printf_common>:
 8005438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800543c:	4616      	mov	r6, r2
 800543e:	4699      	mov	r9, r3
 8005440:	688a      	ldr	r2, [r1, #8]
 8005442:	690b      	ldr	r3, [r1, #16]
 8005444:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005448:	4293      	cmp	r3, r2
 800544a:	bfb8      	it	lt
 800544c:	4613      	movlt	r3, r2
 800544e:	6033      	str	r3, [r6, #0]
 8005450:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005454:	4607      	mov	r7, r0
 8005456:	460c      	mov	r4, r1
 8005458:	b10a      	cbz	r2, 800545e <_printf_common+0x26>
 800545a:	3301      	adds	r3, #1
 800545c:	6033      	str	r3, [r6, #0]
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	0699      	lsls	r1, r3, #26
 8005462:	bf42      	ittt	mi
 8005464:	6833      	ldrmi	r3, [r6, #0]
 8005466:	3302      	addmi	r3, #2
 8005468:	6033      	strmi	r3, [r6, #0]
 800546a:	6825      	ldr	r5, [r4, #0]
 800546c:	f015 0506 	ands.w	r5, r5, #6
 8005470:	d106      	bne.n	8005480 <_printf_common+0x48>
 8005472:	f104 0a19 	add.w	sl, r4, #25
 8005476:	68e3      	ldr	r3, [r4, #12]
 8005478:	6832      	ldr	r2, [r6, #0]
 800547a:	1a9b      	subs	r3, r3, r2
 800547c:	42ab      	cmp	r3, r5
 800547e:	dc26      	bgt.n	80054ce <_printf_common+0x96>
 8005480:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005484:	1e13      	subs	r3, r2, #0
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	bf18      	it	ne
 800548a:	2301      	movne	r3, #1
 800548c:	0692      	lsls	r2, r2, #26
 800548e:	d42b      	bmi.n	80054e8 <_printf_common+0xb0>
 8005490:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005494:	4649      	mov	r1, r9
 8005496:	4638      	mov	r0, r7
 8005498:	47c0      	blx	r8
 800549a:	3001      	adds	r0, #1
 800549c:	d01e      	beq.n	80054dc <_printf_common+0xa4>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	6922      	ldr	r2, [r4, #16]
 80054a2:	f003 0306 	and.w	r3, r3, #6
 80054a6:	2b04      	cmp	r3, #4
 80054a8:	bf02      	ittt	eq
 80054aa:	68e5      	ldreq	r5, [r4, #12]
 80054ac:	6833      	ldreq	r3, [r6, #0]
 80054ae:	1aed      	subeq	r5, r5, r3
 80054b0:	68a3      	ldr	r3, [r4, #8]
 80054b2:	bf0c      	ite	eq
 80054b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b8:	2500      	movne	r5, #0
 80054ba:	4293      	cmp	r3, r2
 80054bc:	bfc4      	itt	gt
 80054be:	1a9b      	subgt	r3, r3, r2
 80054c0:	18ed      	addgt	r5, r5, r3
 80054c2:	2600      	movs	r6, #0
 80054c4:	341a      	adds	r4, #26
 80054c6:	42b5      	cmp	r5, r6
 80054c8:	d11a      	bne.n	8005500 <_printf_common+0xc8>
 80054ca:	2000      	movs	r0, #0
 80054cc:	e008      	b.n	80054e0 <_printf_common+0xa8>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4652      	mov	r2, sl
 80054d2:	4649      	mov	r1, r9
 80054d4:	4638      	mov	r0, r7
 80054d6:	47c0      	blx	r8
 80054d8:	3001      	adds	r0, #1
 80054da:	d103      	bne.n	80054e4 <_printf_common+0xac>
 80054dc:	f04f 30ff 	mov.w	r0, #4294967295
 80054e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e4:	3501      	adds	r5, #1
 80054e6:	e7c6      	b.n	8005476 <_printf_common+0x3e>
 80054e8:	18e1      	adds	r1, r4, r3
 80054ea:	1c5a      	adds	r2, r3, #1
 80054ec:	2030      	movs	r0, #48	; 0x30
 80054ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054f2:	4422      	add	r2, r4
 80054f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054fc:	3302      	adds	r3, #2
 80054fe:	e7c7      	b.n	8005490 <_printf_common+0x58>
 8005500:	2301      	movs	r3, #1
 8005502:	4622      	mov	r2, r4
 8005504:	4649      	mov	r1, r9
 8005506:	4638      	mov	r0, r7
 8005508:	47c0      	blx	r8
 800550a:	3001      	adds	r0, #1
 800550c:	d0e6      	beq.n	80054dc <_printf_common+0xa4>
 800550e:	3601      	adds	r6, #1
 8005510:	e7d9      	b.n	80054c6 <_printf_common+0x8e>
	...

08005514 <_printf_i>:
 8005514:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005518:	7e0f      	ldrb	r7, [r1, #24]
 800551a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800551c:	2f78      	cmp	r7, #120	; 0x78
 800551e:	4691      	mov	r9, r2
 8005520:	4680      	mov	r8, r0
 8005522:	460c      	mov	r4, r1
 8005524:	469a      	mov	sl, r3
 8005526:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800552a:	d807      	bhi.n	800553c <_printf_i+0x28>
 800552c:	2f62      	cmp	r7, #98	; 0x62
 800552e:	d80a      	bhi.n	8005546 <_printf_i+0x32>
 8005530:	2f00      	cmp	r7, #0
 8005532:	f000 80d4 	beq.w	80056de <_printf_i+0x1ca>
 8005536:	2f58      	cmp	r7, #88	; 0x58
 8005538:	f000 80c0 	beq.w	80056bc <_printf_i+0x1a8>
 800553c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005540:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005544:	e03a      	b.n	80055bc <_printf_i+0xa8>
 8005546:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800554a:	2b15      	cmp	r3, #21
 800554c:	d8f6      	bhi.n	800553c <_printf_i+0x28>
 800554e:	a101      	add	r1, pc, #4	; (adr r1, 8005554 <_printf_i+0x40>)
 8005550:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005554:	080055ad 	.word	0x080055ad
 8005558:	080055c1 	.word	0x080055c1
 800555c:	0800553d 	.word	0x0800553d
 8005560:	0800553d 	.word	0x0800553d
 8005564:	0800553d 	.word	0x0800553d
 8005568:	0800553d 	.word	0x0800553d
 800556c:	080055c1 	.word	0x080055c1
 8005570:	0800553d 	.word	0x0800553d
 8005574:	0800553d 	.word	0x0800553d
 8005578:	0800553d 	.word	0x0800553d
 800557c:	0800553d 	.word	0x0800553d
 8005580:	080056c5 	.word	0x080056c5
 8005584:	080055ed 	.word	0x080055ed
 8005588:	0800567f 	.word	0x0800567f
 800558c:	0800553d 	.word	0x0800553d
 8005590:	0800553d 	.word	0x0800553d
 8005594:	080056e7 	.word	0x080056e7
 8005598:	0800553d 	.word	0x0800553d
 800559c:	080055ed 	.word	0x080055ed
 80055a0:	0800553d 	.word	0x0800553d
 80055a4:	0800553d 	.word	0x0800553d
 80055a8:	08005687 	.word	0x08005687
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	602a      	str	r2, [r5, #0]
 80055b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055bc:	2301      	movs	r3, #1
 80055be:	e09f      	b.n	8005700 <_printf_i+0x1ec>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	682b      	ldr	r3, [r5, #0]
 80055c4:	0607      	lsls	r7, r0, #24
 80055c6:	f103 0104 	add.w	r1, r3, #4
 80055ca:	6029      	str	r1, [r5, #0]
 80055cc:	d501      	bpl.n	80055d2 <_printf_i+0xbe>
 80055ce:	681e      	ldr	r6, [r3, #0]
 80055d0:	e003      	b.n	80055da <_printf_i+0xc6>
 80055d2:	0646      	lsls	r6, r0, #25
 80055d4:	d5fb      	bpl.n	80055ce <_printf_i+0xba>
 80055d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80055da:	2e00      	cmp	r6, #0
 80055dc:	da03      	bge.n	80055e6 <_printf_i+0xd2>
 80055de:	232d      	movs	r3, #45	; 0x2d
 80055e0:	4276      	negs	r6, r6
 80055e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055e6:	485a      	ldr	r0, [pc, #360]	; (8005750 <_printf_i+0x23c>)
 80055e8:	230a      	movs	r3, #10
 80055ea:	e012      	b.n	8005612 <_printf_i+0xfe>
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	6820      	ldr	r0, [r4, #0]
 80055f0:	1d19      	adds	r1, r3, #4
 80055f2:	6029      	str	r1, [r5, #0]
 80055f4:	0605      	lsls	r5, r0, #24
 80055f6:	d501      	bpl.n	80055fc <_printf_i+0xe8>
 80055f8:	681e      	ldr	r6, [r3, #0]
 80055fa:	e002      	b.n	8005602 <_printf_i+0xee>
 80055fc:	0641      	lsls	r1, r0, #25
 80055fe:	d5fb      	bpl.n	80055f8 <_printf_i+0xe4>
 8005600:	881e      	ldrh	r6, [r3, #0]
 8005602:	4853      	ldr	r0, [pc, #332]	; (8005750 <_printf_i+0x23c>)
 8005604:	2f6f      	cmp	r7, #111	; 0x6f
 8005606:	bf0c      	ite	eq
 8005608:	2308      	moveq	r3, #8
 800560a:	230a      	movne	r3, #10
 800560c:	2100      	movs	r1, #0
 800560e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005612:	6865      	ldr	r5, [r4, #4]
 8005614:	60a5      	str	r5, [r4, #8]
 8005616:	2d00      	cmp	r5, #0
 8005618:	bfa2      	ittt	ge
 800561a:	6821      	ldrge	r1, [r4, #0]
 800561c:	f021 0104 	bicge.w	r1, r1, #4
 8005620:	6021      	strge	r1, [r4, #0]
 8005622:	b90e      	cbnz	r6, 8005628 <_printf_i+0x114>
 8005624:	2d00      	cmp	r5, #0
 8005626:	d04b      	beq.n	80056c0 <_printf_i+0x1ac>
 8005628:	4615      	mov	r5, r2
 800562a:	fbb6 f1f3 	udiv	r1, r6, r3
 800562e:	fb03 6711 	mls	r7, r3, r1, r6
 8005632:	5dc7      	ldrb	r7, [r0, r7]
 8005634:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005638:	4637      	mov	r7, r6
 800563a:	42bb      	cmp	r3, r7
 800563c:	460e      	mov	r6, r1
 800563e:	d9f4      	bls.n	800562a <_printf_i+0x116>
 8005640:	2b08      	cmp	r3, #8
 8005642:	d10b      	bne.n	800565c <_printf_i+0x148>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	07de      	lsls	r6, r3, #31
 8005648:	d508      	bpl.n	800565c <_printf_i+0x148>
 800564a:	6923      	ldr	r3, [r4, #16]
 800564c:	6861      	ldr	r1, [r4, #4]
 800564e:	4299      	cmp	r1, r3
 8005650:	bfde      	ittt	le
 8005652:	2330      	movle	r3, #48	; 0x30
 8005654:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005658:	f105 35ff 	addle.w	r5, r5, #4294967295
 800565c:	1b52      	subs	r2, r2, r5
 800565e:	6122      	str	r2, [r4, #16]
 8005660:	f8cd a000 	str.w	sl, [sp]
 8005664:	464b      	mov	r3, r9
 8005666:	aa03      	add	r2, sp, #12
 8005668:	4621      	mov	r1, r4
 800566a:	4640      	mov	r0, r8
 800566c:	f7ff fee4 	bl	8005438 <_printf_common>
 8005670:	3001      	adds	r0, #1
 8005672:	d14a      	bne.n	800570a <_printf_i+0x1f6>
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	b004      	add	sp, #16
 800567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	f043 0320 	orr.w	r3, r3, #32
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	4833      	ldr	r0, [pc, #204]	; (8005754 <_printf_i+0x240>)
 8005688:	2778      	movs	r7, #120	; 0x78
 800568a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800568e:	6823      	ldr	r3, [r4, #0]
 8005690:	6829      	ldr	r1, [r5, #0]
 8005692:	061f      	lsls	r7, r3, #24
 8005694:	f851 6b04 	ldr.w	r6, [r1], #4
 8005698:	d402      	bmi.n	80056a0 <_printf_i+0x18c>
 800569a:	065f      	lsls	r7, r3, #25
 800569c:	bf48      	it	mi
 800569e:	b2b6      	uxthmi	r6, r6
 80056a0:	07df      	lsls	r7, r3, #31
 80056a2:	bf48      	it	mi
 80056a4:	f043 0320 	orrmi.w	r3, r3, #32
 80056a8:	6029      	str	r1, [r5, #0]
 80056aa:	bf48      	it	mi
 80056ac:	6023      	strmi	r3, [r4, #0]
 80056ae:	b91e      	cbnz	r6, 80056b8 <_printf_i+0x1a4>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	f023 0320 	bic.w	r3, r3, #32
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	2310      	movs	r3, #16
 80056ba:	e7a7      	b.n	800560c <_printf_i+0xf8>
 80056bc:	4824      	ldr	r0, [pc, #144]	; (8005750 <_printf_i+0x23c>)
 80056be:	e7e4      	b.n	800568a <_printf_i+0x176>
 80056c0:	4615      	mov	r5, r2
 80056c2:	e7bd      	b.n	8005640 <_printf_i+0x12c>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	6826      	ldr	r6, [r4, #0]
 80056c8:	6961      	ldr	r1, [r4, #20]
 80056ca:	1d18      	adds	r0, r3, #4
 80056cc:	6028      	str	r0, [r5, #0]
 80056ce:	0635      	lsls	r5, r6, #24
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	d501      	bpl.n	80056d8 <_printf_i+0x1c4>
 80056d4:	6019      	str	r1, [r3, #0]
 80056d6:	e002      	b.n	80056de <_printf_i+0x1ca>
 80056d8:	0670      	lsls	r0, r6, #25
 80056da:	d5fb      	bpl.n	80056d4 <_printf_i+0x1c0>
 80056dc:	8019      	strh	r1, [r3, #0]
 80056de:	2300      	movs	r3, #0
 80056e0:	6123      	str	r3, [r4, #16]
 80056e2:	4615      	mov	r5, r2
 80056e4:	e7bc      	b.n	8005660 <_printf_i+0x14c>
 80056e6:	682b      	ldr	r3, [r5, #0]
 80056e8:	1d1a      	adds	r2, r3, #4
 80056ea:	602a      	str	r2, [r5, #0]
 80056ec:	681d      	ldr	r5, [r3, #0]
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	2100      	movs	r1, #0
 80056f2:	4628      	mov	r0, r5
 80056f4:	f7fa fd4c 	bl	8000190 <memchr>
 80056f8:	b108      	cbz	r0, 80056fe <_printf_i+0x1ea>
 80056fa:	1b40      	subs	r0, r0, r5
 80056fc:	6060      	str	r0, [r4, #4]
 80056fe:	6863      	ldr	r3, [r4, #4]
 8005700:	6123      	str	r3, [r4, #16]
 8005702:	2300      	movs	r3, #0
 8005704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005708:	e7aa      	b.n	8005660 <_printf_i+0x14c>
 800570a:	6923      	ldr	r3, [r4, #16]
 800570c:	462a      	mov	r2, r5
 800570e:	4649      	mov	r1, r9
 8005710:	4640      	mov	r0, r8
 8005712:	47d0      	blx	sl
 8005714:	3001      	adds	r0, #1
 8005716:	d0ad      	beq.n	8005674 <_printf_i+0x160>
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	079b      	lsls	r3, r3, #30
 800571c:	d413      	bmi.n	8005746 <_printf_i+0x232>
 800571e:	68e0      	ldr	r0, [r4, #12]
 8005720:	9b03      	ldr	r3, [sp, #12]
 8005722:	4298      	cmp	r0, r3
 8005724:	bfb8      	it	lt
 8005726:	4618      	movlt	r0, r3
 8005728:	e7a6      	b.n	8005678 <_printf_i+0x164>
 800572a:	2301      	movs	r3, #1
 800572c:	4632      	mov	r2, r6
 800572e:	4649      	mov	r1, r9
 8005730:	4640      	mov	r0, r8
 8005732:	47d0      	blx	sl
 8005734:	3001      	adds	r0, #1
 8005736:	d09d      	beq.n	8005674 <_printf_i+0x160>
 8005738:	3501      	adds	r5, #1
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	9903      	ldr	r1, [sp, #12]
 800573e:	1a5b      	subs	r3, r3, r1
 8005740:	42ab      	cmp	r3, r5
 8005742:	dcf2      	bgt.n	800572a <_printf_i+0x216>
 8005744:	e7eb      	b.n	800571e <_printf_i+0x20a>
 8005746:	2500      	movs	r5, #0
 8005748:	f104 0619 	add.w	r6, r4, #25
 800574c:	e7f5      	b.n	800573a <_printf_i+0x226>
 800574e:	bf00      	nop
 8005750:	08005975 	.word	0x08005975
 8005754:	08005986 	.word	0x08005986

08005758 <memmove>:
 8005758:	4288      	cmp	r0, r1
 800575a:	b510      	push	{r4, lr}
 800575c:	eb01 0402 	add.w	r4, r1, r2
 8005760:	d902      	bls.n	8005768 <memmove+0x10>
 8005762:	4284      	cmp	r4, r0
 8005764:	4623      	mov	r3, r4
 8005766:	d807      	bhi.n	8005778 <memmove+0x20>
 8005768:	1e43      	subs	r3, r0, #1
 800576a:	42a1      	cmp	r1, r4
 800576c:	d008      	beq.n	8005780 <memmove+0x28>
 800576e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005776:	e7f8      	b.n	800576a <memmove+0x12>
 8005778:	4402      	add	r2, r0
 800577a:	4601      	mov	r1, r0
 800577c:	428a      	cmp	r2, r1
 800577e:	d100      	bne.n	8005782 <memmove+0x2a>
 8005780:	bd10      	pop	{r4, pc}
 8005782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800578a:	e7f7      	b.n	800577c <memmove+0x24>

0800578c <_sbrk_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d06      	ldr	r5, [pc, #24]	; (80057a8 <_sbrk_r+0x1c>)
 8005790:	2300      	movs	r3, #0
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fb fa34 	bl	8000c04 <_sbrk>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_sbrk_r+0x1a>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_sbrk_r+0x1a>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	200005b8 	.word	0x200005b8

080057ac <memcpy>:
 80057ac:	440a      	add	r2, r1
 80057ae:	4291      	cmp	r1, r2
 80057b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b4:	d100      	bne.n	80057b8 <memcpy+0xc>
 80057b6:	4770      	bx	lr
 80057b8:	b510      	push	{r4, lr}
 80057ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c2:	4291      	cmp	r1, r2
 80057c4:	d1f9      	bne.n	80057ba <memcpy+0xe>
 80057c6:	bd10      	pop	{r4, pc}

080057c8 <_realloc_r>:
 80057c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057cc:	4680      	mov	r8, r0
 80057ce:	4614      	mov	r4, r2
 80057d0:	460e      	mov	r6, r1
 80057d2:	b921      	cbnz	r1, 80057de <_realloc_r+0x16>
 80057d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057d8:	4611      	mov	r1, r2
 80057da:	f7ff bc49 	b.w	8005070 <_malloc_r>
 80057de:	b92a      	cbnz	r2, 80057ec <_realloc_r+0x24>
 80057e0:	f7ff fbda 	bl	8004f98 <_free_r>
 80057e4:	4625      	mov	r5, r4
 80057e6:	4628      	mov	r0, r5
 80057e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057ec:	f000 f81b 	bl	8005826 <_malloc_usable_size_r>
 80057f0:	4284      	cmp	r4, r0
 80057f2:	4607      	mov	r7, r0
 80057f4:	d802      	bhi.n	80057fc <_realloc_r+0x34>
 80057f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80057fa:	d812      	bhi.n	8005822 <_realloc_r+0x5a>
 80057fc:	4621      	mov	r1, r4
 80057fe:	4640      	mov	r0, r8
 8005800:	f7ff fc36 	bl	8005070 <_malloc_r>
 8005804:	4605      	mov	r5, r0
 8005806:	2800      	cmp	r0, #0
 8005808:	d0ed      	beq.n	80057e6 <_realloc_r+0x1e>
 800580a:	42bc      	cmp	r4, r7
 800580c:	4622      	mov	r2, r4
 800580e:	4631      	mov	r1, r6
 8005810:	bf28      	it	cs
 8005812:	463a      	movcs	r2, r7
 8005814:	f7ff ffca 	bl	80057ac <memcpy>
 8005818:	4631      	mov	r1, r6
 800581a:	4640      	mov	r0, r8
 800581c:	f7ff fbbc 	bl	8004f98 <_free_r>
 8005820:	e7e1      	b.n	80057e6 <_realloc_r+0x1e>
 8005822:	4635      	mov	r5, r6
 8005824:	e7df      	b.n	80057e6 <_realloc_r+0x1e>

08005826 <_malloc_usable_size_r>:
 8005826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800582a:	1f18      	subs	r0, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfbc      	itt	lt
 8005830:	580b      	ldrlt	r3, [r1, r0]
 8005832:	18c0      	addlt	r0, r0, r3
 8005834:	4770      	bx	lr
	...

08005838 <_init>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr

08005844 <_fini>:
 8005844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005846:	bf00      	nop
 8005848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800584a:	bc08      	pop	{r3}
 800584c:	469e      	mov	lr, r3
 800584e:	4770      	bx	lr
