
LED_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004904  08004904  00014904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800490c  0800490c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000008  08004914  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000514  20000014  08004920  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000528  08004920  00020528  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   000169a5  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002ffc  00000000  00000000  00036a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016d0  00000000  00000000  00039a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000116a  00000000  00000000  0003b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021b62  00000000  00000000  0003c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000159b8  00000000  00000000  0005ddc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d7376  00000000  00000000  0007377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005fc4  00000000  00000000  0014aaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006a  00000000  00000000  00150ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	080047f8 	.word	0x080047f8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	080047f8 	.word	0x080047f8

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b970 	b.w	8000474 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	460f      	mov	r7, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14a      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d965      	bls.n	800028e <__udivmoddi4+0xe2>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b143      	cbz	r3, 80001da <__udivmoddi4+0x2e>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	409f      	lsls	r7, r3
 80001d2:	fa20 f202 	lsr.w	r2, r0, r2
 80001d6:	4317      	orrs	r7, r2
 80001d8:	409c      	lsls	r4, r3
 80001da:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80001de:	fa1f f58c 	uxth.w	r5, ip
 80001e2:	fbb7 f1fe 	udiv	r1, r7, lr
 80001e6:	0c22      	lsrs	r2, r4, #16
 80001e8:	fb0e 7711 	mls	r7, lr, r1, r7
 80001ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80001f0:	fb01 f005 	mul.w	r0, r1, r5
 80001f4:	4290      	cmp	r0, r2
 80001f6:	d90a      	bls.n	800020e <__udivmoddi4+0x62>
 80001f8:	eb1c 0202 	adds.w	r2, ip, r2
 80001fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000200:	f080 811c 	bcs.w	800043c <__udivmoddi4+0x290>
 8000204:	4290      	cmp	r0, r2
 8000206:	f240 8119 	bls.w	800043c <__udivmoddi4+0x290>
 800020a:	3902      	subs	r1, #2
 800020c:	4462      	add	r2, ip
 800020e:	1a12      	subs	r2, r2, r0
 8000210:	b2a4      	uxth	r4, r4
 8000212:	fbb2 f0fe 	udiv	r0, r2, lr
 8000216:	fb0e 2210 	mls	r2, lr, r0, r2
 800021a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800021e:	fb00 f505 	mul.w	r5, r0, r5
 8000222:	42a5      	cmp	r5, r4
 8000224:	d90a      	bls.n	800023c <__udivmoddi4+0x90>
 8000226:	eb1c 0404 	adds.w	r4, ip, r4
 800022a:	f100 32ff 	add.w	r2, r0, #4294967295
 800022e:	f080 8107 	bcs.w	8000440 <__udivmoddi4+0x294>
 8000232:	42a5      	cmp	r5, r4
 8000234:	f240 8104 	bls.w	8000440 <__udivmoddi4+0x294>
 8000238:	4464      	add	r4, ip
 800023a:	3802      	subs	r0, #2
 800023c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000240:	1b64      	subs	r4, r4, r5
 8000242:	2100      	movs	r1, #0
 8000244:	b11e      	cbz	r6, 800024e <__udivmoddi4+0xa2>
 8000246:	40dc      	lsrs	r4, r3
 8000248:	2300      	movs	r3, #0
 800024a:	e9c6 4300 	strd	r4, r3, [r6]
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d908      	bls.n	8000268 <__udivmoddi4+0xbc>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80ed 	beq.w	8000436 <__udivmoddi4+0x28a>
 800025c:	2100      	movs	r1, #0
 800025e:	e9c6 0500 	strd	r0, r5, [r6]
 8000262:	4608      	mov	r0, r1
 8000264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000268:	fab3 f183 	clz	r1, r3
 800026c:	2900      	cmp	r1, #0
 800026e:	d149      	bne.n	8000304 <__udivmoddi4+0x158>
 8000270:	42ab      	cmp	r3, r5
 8000272:	d302      	bcc.n	800027a <__udivmoddi4+0xce>
 8000274:	4282      	cmp	r2, r0
 8000276:	f200 80f8 	bhi.w	800046a <__udivmoddi4+0x2be>
 800027a:	1a84      	subs	r4, r0, r2
 800027c:	eb65 0203 	sbc.w	r2, r5, r3
 8000280:	2001      	movs	r0, #1
 8000282:	4617      	mov	r7, r2
 8000284:	2e00      	cmp	r6, #0
 8000286:	d0e2      	beq.n	800024e <__udivmoddi4+0xa2>
 8000288:	e9c6 4700 	strd	r4, r7, [r6]
 800028c:	e7df      	b.n	800024e <__udivmoddi4+0xa2>
 800028e:	b902      	cbnz	r2, 8000292 <__udivmoddi4+0xe6>
 8000290:	deff      	udf	#255	; 0xff
 8000292:	fab2 f382 	clz	r3, r2
 8000296:	2b00      	cmp	r3, #0
 8000298:	f040 8090 	bne.w	80003bc <__udivmoddi4+0x210>
 800029c:	1a8a      	subs	r2, r1, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f fe8c 	uxth.w	lr, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002ac:	fb07 2015 	mls	r0, r7, r5, r2
 80002b0:	0c22      	lsrs	r2, r4, #16
 80002b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b6:	fb0e f005 	mul.w	r0, lr, r5
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 80cb 	bhi.w	8000464 <__udivmoddi4+0x2b8>
 80002ce:	4645      	mov	r5, r8
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	fb0e fe00 	mul.w	lr, lr, r0
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x14e>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x14c>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 80bb 	bhi.w	800046e <__udivmoddi4+0x2c2>
 80002f8:	4610      	mov	r0, r2
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000302:	e79f      	b.n	8000244 <__udivmoddi4+0x98>
 8000304:	f1c1 0720 	rsb	r7, r1, #32
 8000308:	408b      	lsls	r3, r1
 800030a:	fa22 fc07 	lsr.w	ip, r2, r7
 800030e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000312:	fa05 f401 	lsl.w	r4, r5, r1
 8000316:	fa20 f307 	lsr.w	r3, r0, r7
 800031a:	40fd      	lsrs	r5, r7
 800031c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000320:	4323      	orrs	r3, r4
 8000322:	fbb5 f8f9 	udiv	r8, r5, r9
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	fb09 5518 	mls	r5, r9, r8, r5
 800032e:	0c1c      	lsrs	r4, r3, #16
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	fb08 f50e 	mul.w	r5, r8, lr
 8000338:	42a5      	cmp	r5, r4
 800033a:	fa02 f201 	lsl.w	r2, r2, r1
 800033e:	fa00 f001 	lsl.w	r0, r0, r1
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f108 3aff 	add.w	sl, r8, #4294967295
 800034c:	f080 8088 	bcs.w	8000460 <__udivmoddi4+0x2b4>
 8000350:	42a5      	cmp	r5, r4
 8000352:	f240 8085 	bls.w	8000460 <__udivmoddi4+0x2b4>
 8000356:	f1a8 0802 	sub.w	r8, r8, #2
 800035a:	4464      	add	r4, ip
 800035c:	1b64      	subs	r4, r4, r5
 800035e:	b29d      	uxth	r5, r3
 8000360:	fbb4 f3f9 	udiv	r3, r4, r9
 8000364:	fb09 4413 	mls	r4, r9, r3, r4
 8000368:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800036c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f103 35ff 	add.w	r5, r3, #4294967295
 800037c:	d26c      	bcs.n	8000458 <__udivmoddi4+0x2ac>
 800037e:	45a6      	cmp	lr, r4
 8000380:	d96a      	bls.n	8000458 <__udivmoddi4+0x2ac>
 8000382:	3b02      	subs	r3, #2
 8000384:	4464      	add	r4, ip
 8000386:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800038a:	fba3 9502 	umull	r9, r5, r3, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	42ac      	cmp	r4, r5
 8000394:	46c8      	mov	r8, r9
 8000396:	46ae      	mov	lr, r5
 8000398:	d356      	bcc.n	8000448 <__udivmoddi4+0x29c>
 800039a:	d053      	beq.n	8000444 <__udivmoddi4+0x298>
 800039c:	b156      	cbz	r6, 80003b4 <__udivmoddi4+0x208>
 800039e:	ebb0 0208 	subs.w	r2, r0, r8
 80003a2:	eb64 040e 	sbc.w	r4, r4, lr
 80003a6:	fa04 f707 	lsl.w	r7, r4, r7
 80003aa:	40ca      	lsrs	r2, r1
 80003ac:	40cc      	lsrs	r4, r1
 80003ae:	4317      	orrs	r7, r2
 80003b0:	e9c6 7400 	strd	r7, r4, [r6]
 80003b4:	4618      	mov	r0, r3
 80003b6:	2100      	movs	r1, #0
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	f1c3 0120 	rsb	r1, r3, #32
 80003c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c4:	fa20 f201 	lsr.w	r2, r0, r1
 80003c8:	fa25 f101 	lsr.w	r1, r5, r1
 80003cc:	409d      	lsls	r5, r3
 80003ce:	432a      	orrs	r2, r5
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa1f fe8c 	uxth.w	lr, ip
 80003d8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003dc:	fb07 1510 	mls	r5, r7, r0, r1
 80003e0:	0c11      	lsrs	r1, r2, #16
 80003e2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80003e6:	fb00 f50e 	mul.w	r5, r0, lr
 80003ea:	428d      	cmp	r5, r1
 80003ec:	fa04 f403 	lsl.w	r4, r4, r3
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x258>
 80003f2:	eb1c 0101 	adds.w	r1, ip, r1
 80003f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80003fa:	d22f      	bcs.n	800045c <__udivmoddi4+0x2b0>
 80003fc:	428d      	cmp	r5, r1
 80003fe:	d92d      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000400:	3802      	subs	r0, #2
 8000402:	4461      	add	r1, ip
 8000404:	1b49      	subs	r1, r1, r5
 8000406:	b292      	uxth	r2, r2
 8000408:	fbb1 f5f7 	udiv	r5, r1, r7
 800040c:	fb07 1115 	mls	r1, r7, r5, r1
 8000410:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000414:	fb05 f10e 	mul.w	r1, r5, lr
 8000418:	4291      	cmp	r1, r2
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x282>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f105 38ff 	add.w	r8, r5, #4294967295
 8000424:	d216      	bcs.n	8000454 <__udivmoddi4+0x2a8>
 8000426:	4291      	cmp	r1, r2
 8000428:	d914      	bls.n	8000454 <__udivmoddi4+0x2a8>
 800042a:	3d02      	subs	r5, #2
 800042c:	4462      	add	r2, ip
 800042e:	1a52      	subs	r2, r2, r1
 8000430:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000434:	e738      	b.n	80002a8 <__udivmoddi4+0xfc>
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e708      	b.n	800024e <__udivmoddi4+0xa2>
 800043c:	4639      	mov	r1, r7
 800043e:	e6e6      	b.n	800020e <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e6fb      	b.n	800023c <__udivmoddi4+0x90>
 8000444:	4548      	cmp	r0, r9
 8000446:	d2a9      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000448:	ebb9 0802 	subs.w	r8, r9, r2
 800044c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000450:	3b01      	subs	r3, #1
 8000452:	e7a3      	b.n	800039c <__udivmoddi4+0x1f0>
 8000454:	4645      	mov	r5, r8
 8000456:	e7ea      	b.n	800042e <__udivmoddi4+0x282>
 8000458:	462b      	mov	r3, r5
 800045a:	e794      	b.n	8000386 <__udivmoddi4+0x1da>
 800045c:	4640      	mov	r0, r8
 800045e:	e7d1      	b.n	8000404 <__udivmoddi4+0x258>
 8000460:	46d0      	mov	r8, sl
 8000462:	e77b      	b.n	800035c <__udivmoddi4+0x1b0>
 8000464:	3d02      	subs	r5, #2
 8000466:	4462      	add	r2, ip
 8000468:	e732      	b.n	80002d0 <__udivmoddi4+0x124>
 800046a:	4608      	mov	r0, r1
 800046c:	e70a      	b.n	8000284 <__udivmoddi4+0xd8>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	e742      	b.n	80002fa <__udivmoddi4+0x14e>

08000474 <__aeabi_idiv0>:
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop

08000478 <set_LED>:
#define MAX_LED 72
uint8_t LED_Data[MAX_LED][4];

extern SPI_HandleTypeDef hspi1;

void set_LED(int led_num, int Green, int Red, int Blue){
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
 8000484:	603b      	str	r3, [r7, #0]
	LED_Data[led_num][0]=led_num;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	b2d9      	uxtb	r1, r3
 800048a:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <set_LED+0x58>)
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[led_num][1]=Green;
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	b2d9      	uxtb	r1, r3
 8000496:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <set_LED+0x58>)
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4413      	add	r3, r2
 800049e:	460a      	mov	r2, r1
 80004a0:	705a      	strb	r2, [r3, #1]
	LED_Data[led_num][2]=Red;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b2d9      	uxtb	r1, r3
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <set_LED+0x58>)
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	460a      	mov	r2, r1
 80004b0:	709a      	strb	r2, [r3, #2]
	LED_Data[led_num][3]=Blue;
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	b2d9      	uxtb	r1, r3
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <set_LED+0x58>)
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4413      	add	r3, r2
 80004be:	460a      	mov	r2, r1
 80004c0:	70da      	strb	r2, [r3, #3]
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000030 	.word	0x20000030

080004d4 <ws2812_spi>:

void ws2812_spi (int Green, int Red, int Blue){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08e      	sub	sp, #56	; 0x38
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
	uint32_t color = Green<<16 | Red<<8 | Blue;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	041a      	lsls	r2, r3, #16
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	021b      	lsls	r3, r3, #8
 80004e8:	431a      	orrs	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t sendData[24];

	int indx = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	637b      	str	r3, [r7, #52]	; 0x34

	for(int i=23;i>=0;i--){
 80004f4:	2317      	movs	r3, #23
 80004f6:	633b      	str	r3, [r7, #48]	; 0x30
 80004f8:	e01b      	b.n	8000532 <ws2812_spi+0x5e>
		if(((color>>i)&0x01)==1) sendData[indx++]=0b110; // to store 1
 80004fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80004fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80004fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	2b00      	cmp	r3, #0
 8000508:	d008      	beq.n	800051c <ws2812_spi+0x48>
 800050a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800050c:	1c5a      	adds	r2, r3, #1
 800050e:	637a      	str	r2, [r7, #52]	; 0x34
 8000510:	3338      	adds	r3, #56	; 0x38
 8000512:	443b      	add	r3, r7
 8000514:	2206      	movs	r2, #6
 8000516:	f803 2c24 	strb.w	r2, [r3, #-36]
 800051a:	e007      	b.n	800052c <ws2812_spi+0x58>
		else sendData[indx++]=0b100; // store 0
 800051c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	637a      	str	r2, [r7, #52]	; 0x34
 8000522:	3338      	adds	r3, #56	; 0x38
 8000524:	443b      	add	r3, r7
 8000526:	2204      	movs	r2, #4
 8000528:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(int i=23;i>=0;i--){
 800052c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800052e:	3b01      	subs	r3, #1
 8000530:	633b      	str	r3, [r7, #48]	; 0x30
 8000532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000534:	2b00      	cmp	r3, #0
 8000536:	dae0      	bge.n	80004fa <ws2812_spi+0x26>
	}

	HAL_SPI_Transmit(&hspi1, sendData, 24, 1000);
 8000538:	f107 0114 	add.w	r1, r7, #20
 800053c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000540:	2218      	movs	r2, #24
 8000542:	4803      	ldr	r0, [pc, #12]	; (8000550 <ws2812_spi+0x7c>)
 8000544:	f002 ff4a 	bl	80033dc <HAL_SPI_Transmit>
}
 8000548:	bf00      	nop
 800054a:	3738      	adds	r7, #56	; 0x38
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000150 	.word	0x20000150

08000554 <WS2812_Send>:

void WS2812_Send(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
	for(int i=0;i<MAX_LED;i++){
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	e016      	b.n	800058e <WS2812_Send+0x3a>
		ws2812_spi (LED_Data[i][1], LED_Data[i][2], LED_Data[i][3]);
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <WS2812_Send+0x50>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	785b      	ldrb	r3, [r3, #1]
 800056a:	4618      	mov	r0, r3
 800056c:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <WS2812_Send+0x50>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4413      	add	r3, r2
 8000574:	789b      	ldrb	r3, [r3, #2]
 8000576:	4619      	mov	r1, r3
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <WS2812_Send+0x50>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4413      	add	r3, r2
 8000580:	78db      	ldrb	r3, [r3, #3]
 8000582:	461a      	mov	r2, r3
 8000584:	f7ff ffa6 	bl	80004d4 <ws2812_spi>
	for(int i=0;i<MAX_LED;i++){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3301      	adds	r3, #1
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b47      	cmp	r3, #71	; 0x47
 8000592:	dde5      	ble.n	8000560 <WS2812_Send+0xc>
	}
	HAL_Delay(1);
 8000594:	2001      	movs	r0, #1
 8000596:	f000 fc89 	bl	8000eac <HAL_Delay>
}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000030 	.word	0x20000030

080005a8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4313      	orrs	r3, r2
 80005be:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fbde 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f85c 	bl	80006a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005e8:	f000 f8c8 	bl	800077c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f998 	bl	8000920 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f0:	f000 f920 	bl	8000834 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80005f4:	f000 f96c 	bl	80008d0 <MX_USB_PCD_Init>
  MX_SPI1_Init();
 80005f8:	f000 f8de 	bl	80007b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  for(int i=0;i<72;i++){
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	e008      	b.n	8000614 <main+0x3a>
	  set_LED(i, 0, 0, 0);
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	68f8      	ldr	r0, [r7, #12]
 800060a:	f7ff ff35 	bl	8000478 <set_LED>
  for(int i=0;i<72;i++){
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	3301      	adds	r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	2b47      	cmp	r3, #71	; 0x47
 8000618:	ddf3      	ble.n	8000602 <main+0x28>
  }

  WS2812_Send();
 800061a:	f7ff ff9b 	bl	8000554 <WS2812_Send>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i=0;i<72;i++){
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	e008      	b.n	8000636 <main+0x5c>
	  	  set_LED(i, 255, 0, 0);
 8000624:	2300      	movs	r3, #0
 8000626:	2200      	movs	r2, #0
 8000628:	21ff      	movs	r1, #255	; 0xff
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f7ff ff24 	bl	8000478 <set_LED>
	  for(int i=0;i<72;i++){
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	3301      	adds	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	2b47      	cmp	r3, #71	; 0x47
 800063a:	ddf3      	ble.n	8000624 <main+0x4a>
	  }
	  WS2812_Send();
 800063c:	f7ff ff8a 	bl	8000554 <WS2812_Send>
	  HAL_Delay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f000 fc32 	bl	8000eac <HAL_Delay>
	  for(int i=0;i<72;i++){
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	e008      	b.n	8000660 <main+0x86>
	  	  set_LED(i, 0, 255, 0);
 800064e:	2300      	movs	r3, #0
 8000650:	22ff      	movs	r2, #255	; 0xff
 8000652:	2100      	movs	r1, #0
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff0f 	bl	8000478 <set_LED>
	  for(int i=0;i<72;i++){
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	3301      	adds	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b47      	cmp	r3, #71	; 0x47
 8000664:	ddf3      	ble.n	800064e <main+0x74>
	  }
	  WS2812_Send();
 8000666:	f7ff ff75 	bl	8000554 <WS2812_Send>
	  HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f000 fc1d 	bl	8000eac <HAL_Delay>
	  for(int i=0;i<72;i++){
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	e008      	b.n	800068a <main+0xb0>
		  set_LED(i, 0, 0, 255);
 8000678:	23ff      	movs	r3, #255	; 0xff
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	f7ff fefa 	bl	8000478 <set_LED>
	  for(int i=0;i<72;i++){
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	3301      	adds	r3, #1
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2b47      	cmp	r3, #71	; 0x47
 800068e:	ddf3      	ble.n	8000678 <main+0x9e>
	  }
	  WS2812_Send();
 8000690:	f7ff ff60 	bl	8000554 <WS2812_Send>
	  HAL_Delay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000698:	f000 fc08 	bl	8000eac <HAL_Delay>
	  for(int i=0;i<72;i++){
 800069c:	e7bf      	b.n	800061e <main+0x44>
	...

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b09a      	sub	sp, #104	; 0x68
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2248      	movs	r2, #72	; 0x48
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f004 f875 	bl	800479e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c6:	4b2c      	ldr	r3, [pc, #176]	; (8000778 <SystemClock_Config+0xd8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <SystemClock_Config+0xd8>)
 80006d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <SystemClock_Config+0xd8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80006e2:	2327      	movs	r3, #39	; 0x27
 80006e4:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80006ec:	2300      	movs	r3, #0
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f6:	2301      	movs	r3, #1
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006fe:	2300      	movs	r3, #0
 8000700:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000702:	2360      	movs	r3, #96	; 0x60
 8000704:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800070a:	2301      	movs	r3, #1
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000712:	2319      	movs	r3, #25
 8000714:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800071a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV5;
 800071c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000720:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000726:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fb63 	bl	8001df8 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000738:	f000 f93a 	bl	80009b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800073c:	236f      	movs	r3, #111	; 0x6f
 800073e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2303      	movs	r3, #3
 8000742:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2101      	movs	r1, #1
 800075c:	4618      	mov	r0, r3
 800075e:	f001 febf 	bl	80024e0 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000768:	f000 f922 	bl	80009b0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800076c:	f002 fc7c 	bl	8003068 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000770:	bf00      	nop
 8000772:	3768      	adds	r7, #104	; 0x68
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	58000400 	.word	0x58000400

0800077c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2250      	movs	r2, #80	; 0x50
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f004 f808 	bl	800479e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000798:	2300      	movs	r3, #0
 800079a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079c:	463b      	mov	r3, r7
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 faec 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80007aa:	f000 f901 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_SPI1_Init+0x74>)
 80007be:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <MX_SPI1_Init+0x78>)
 80007c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_SPI1_Init+0x74>)
 80007c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_SPI1_Init+0x74>)
 80007cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <MX_SPI1_Init+0x74>)
 80007d4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_SPI1_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_SPI1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_SPI1_Init+0x74>)
 80007e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_SPI1_Init+0x74>)
 80007f0:	2210      	movs	r2, #16
 80007f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f4:	4b0d      	ldr	r3, [pc, #52]	; (800082c <MX_SPI1_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_SPI1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_SPI1_Init+0x74>)
 8000808:	2207      	movs	r2, #7
 800080a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_SPI1_Init+0x74>)
 8000814:	2208      	movs	r2, #8
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_SPI1_Init+0x74>)
 800081a:	f002 fd3c 	bl	8003296 <HAL_SPI_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000824:	f000 f8c4 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000150 	.word	0x20000150
 8000830:	40013000 	.word	0x40013000

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 800083a:	4a24      	ldr	r2, [pc, #144]	; (80008cc <MX_USART1_UART_Init+0x98>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800084c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000856:	2200      	movs	r2, #0
 8000858:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 800085c:	220c      	movs	r2, #12
 800085e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000880:	f003 f9ba 	bl	8003bf8 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800088a:	f000 f891 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 8000892:	f003 fe81 	bl	8004598 <HAL_UARTEx_SetTxFifoThreshold>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800089c:	f000 f888 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 80008a4:	f003 feb6 	bl	8004614 <HAL_UARTEx_SetRxFifoThreshold>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80008ae:	f000 f87f 	bl	80009b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USART1_UART_Init+0x94>)
 80008b4:	f003 fe37 	bl	8004526 <HAL_UARTEx_DisableFifoMode>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80008be:	f000 f877 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001b4 	.word	0x200001b4
 80008cc:	40013800 	.word	0x40013800

080008d0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USB_PCD_Init+0x48>)
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <MX_USB_PCD_Init+0x4c>)
 80008d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USB_PCD_Init+0x48>)
 80008dc:	2208      	movs	r2, #8
 80008de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_USB_PCD_Init+0x48>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USB_PCD_Init+0x48>)
 80008e8:	2202      	movs	r2, #2
 80008ea:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_USB_PCD_Init+0x48>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USB_PCD_Init+0x48>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_USB_PCD_Init+0x48>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USB_PCD_Init+0x48>)
 8000900:	2200      	movs	r2, #0
 8000902:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_USB_PCD_Init+0x48>)
 8000906:	f000 fdeb 	bl	80014e0 <HAL_PCD_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000910:	f000 f84e 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000248 	.word	0x20000248
 800091c:	40006800 	.word	0x40006800

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000934:	2004      	movs	r0, #4
 8000936:	f7ff fe37 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff fe34 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	2002      	movs	r0, #2
 8000942:	f7ff fe31 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2008      	movs	r0, #8
 8000948:	f7ff fe2e 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2123      	movs	r1, #35	; 0x23
 8000950:	4814      	ldr	r0, [pc, #80]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000952:	f000 fdad 	bl	80014b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	2310      	movs	r3, #16
 8000958:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4810      	ldr	r0, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x88>)
 8000968:	f000 fc32 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800096c:	2323      	movs	r3, #35	; 0x23
 800096e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4619      	mov	r1, r3
 8000980:	4808      	ldr	r0, [pc, #32]	; (80009a4 <MX_GPIO_Init+0x84>)
 8000982:	f000 fc25 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	4619      	mov	r1, r3
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_GPIO_Init+0x8c>)
 8000998:	f000 fc1a 	bl	80011d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099c:	bf00      	nop
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	48000400 	.word	0x48000400
 80009a8:	48000800 	.word	0x48000800
 80009ac:	48000c00 	.word	0x48000c00

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>

080009ba <LL_AHB2_GRP1_EnableClock>:
{
 80009ba:	b480      	push	{r7}
 80009bc:	b085      	sub	sp, #20
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4013      	ands	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80009f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a10:	68fb      	ldr	r3, [r7, #12]
}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b085      	sub	sp, #20
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a2a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a42:	68fb      	ldr	r3, [r7, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2005      	movs	r0, #5
 8000a5a:	f000 fb26 	bl	80010aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a5e:	2005      	movs	r0, #5
 8000a60:	f000 fb3d 	bl	80010de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <HAL_SPI_MspInit+0x6c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d11f      	bne.n	8000aca <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a8a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a8e:	f7ff ffc6 	bl	8000a1e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	2001      	movs	r0, #1
 8000a94:	f7ff ff91 	bl	80009ba <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8000a98:	2382      	movs	r3, #130	; 0x82
 8000a9a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fb8b 	bl	80011d0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2022      	movs	r0, #34	; 0x22
 8000ac0:	f000 faf3 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ac4:	2022      	movs	r0, #34	; 0x22
 8000ac6:	f000 fb0a 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40013000 	.word	0x40013000

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b09c      	sub	sp, #112	; 0x70
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2250      	movs	r2, #80	; 0x50
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 fe50 	bl	800479e <memset>
  if(huart->Instance==USART1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <HAL_UART_MspInit+0x84>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d124      	bne.n	8000b52 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	4618      	mov	r0, r3
 8000b16:	f002 f931 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff ff46 	bl	80009b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b28:	f7ff ff79 	bl	8000a1e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff ff44 	bl	80009ba <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b32:	23c0      	movs	r3, #192	; 0xc0
 8000b34:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b42:	2307      	movs	r3, #7
 8000b44:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <HAL_UART_MspInit+0x88>)
 8000b4e:	f000 fb3f 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3770      	adds	r7, #112	; 0x70
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40013800 	.word	0x40013800
 8000b60:	48000400 	.word	0x48000400

08000b64 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b09c      	sub	sp, #112	; 0x70
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2250      	movs	r2, #80	; 0x50
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 fe0a 	bl	800479e <memset>
  if(hpcd->Instance==USB)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <HAL_PCD_MspInit+0xa8>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d136      	bne.n	8000c02 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b98:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8000b9a:	2318      	movs	r3, #24
 8000b9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8000b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ba2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8000ba4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8000baa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8000bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000bb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000bba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbc:	f107 030c 	add.w	r3, r7, #12
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 f8db 	bl	8002d7c <HAL_RCCEx_PeriphCLKConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8000bcc:	f7ff fef0 	bl	80009b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff fef2 	bl	80009ba <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000bd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000be8:	230a      	movs	r3, #10
 8000bea:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf6:	f000 faeb 	bl	80011d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000bfa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000bfe:	f7ff fef5 	bl	80009ec <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3770      	adds	r7, #112	; 0x70
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40006800 	.word	0x40006800

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f8fa 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <SPI1_IRQHandler+0x10>)
 8000c7a:	f002 fd25 	bl	80036c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000150 	.word	0x20000150

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000c8c:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <SystemInit+0x98>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <SystemInit+0x98>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ca6:	f043 0301 	orr.w	r3, r3, #1
 8000caa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000cb4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <SystemInit+0x9c>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cd2:	f023 0305 	bic.w	r3, r3, #5
 8000cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce6:	f023 0301 	bic.w	r3, r3, #1
 8000cea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <SystemInit+0xa0>)
 8000cf4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <SystemInit+0xa0>)
 8000cfc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	faf6fefb 	.word	0xfaf6fefb
 8000d28:	22041000 	.word	0x22041000

08000d2c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000d2c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d30:	3304      	adds	r3, #4

08000d32 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d32:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d34:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000d36:	d3f9      	bcc.n	8000d2c <CopyDataInit>
  bx lr
 8000d38:	4770      	bx	lr

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000d3a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000d3c:	3004      	adds	r0, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000d3e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>
  bx lr
 8000d42:	4770      	bx	lr

08000d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d48:	f7ff ff9e 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000d4c:	480b      	ldr	r0, [pc, #44]	; (8000d7c <LoopForever+0x6>)
 8000d4e:	490c      	ldr	r1, [pc, #48]	; (8000d80 <LoopForever+0xa>)
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <LoopForever+0xe>)
 8000d52:	2300      	movs	r3, #0
 8000d54:	f7ff ffed 	bl	8000d32 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d58:	480b      	ldr	r0, [pc, #44]	; (8000d88 <LoopForever+0x12>)
 8000d5a:	490c      	ldr	r1, [pc, #48]	; (8000d8c <LoopForever+0x16>)
 8000d5c:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <LoopForever+0x1a>)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f7ff ffe7 	bl	8000d32 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000d64:	480b      	ldr	r0, [pc, #44]	; (8000d94 <LoopForever+0x1e>)
 8000d66:	490c      	ldr	r1, [pc, #48]	; (8000d98 <LoopForever+0x22>)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f7ff ffe8 	bl	8000d3e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d6e:	f003 fd1f 	bl	80047b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d72:	f7ff fc32 	bl	80005da <main>

08000d76 <LoopForever>:

LoopForever:
  b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   r0, =_estack
 8000d78:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000014 	.word	0x20000014
 8000d84:	08004914 	.word	0x08004914
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000d88:	20030000 	.word	0x20030000
 8000d8c:	20030000 	.word	0x20030000
 8000d90:	08004920 	.word	0x08004920
  INIT_BSS _sbss, _ebss
 8000d94:	20000014 	.word	0x20000014
 8000d98:	20000528 	.word	0x20000528

08000d9c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_Init+0x3c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_Init+0x3c>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f96c 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f80f 	bl	8000de0 <HAL_InitTick>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	71fb      	strb	r3, [r7, #7]
 8000dcc:	e001      	b.n	8000dd2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dce:	f7ff fe3f 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	58004000 	.word	0x58004000

08000de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_InitTick+0x6c>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d024      	beq.n	8000e3e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000df4:	f001 fd22 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_InitTick+0x6c>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e04:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f974 	bl	80010fa <HAL_SYSTICK_Config>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10f      	bne.n	8000e38 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	d809      	bhi.n	8000e32 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	f04f 30ff 	mov.w	r0, #4294967295
 8000e26:	f000 f940 	bl	80010aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <HAL_InitTick+0x70>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	73fb      	strb	r3, [r7, #15]
 8000e36:	e004      	b.n	8000e42 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	73fb      	strb	r3, [r7, #15]
 8000e3c:	e001      	b.n	8000e42 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	2000000c 	.word	0x2000000c

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000010 	.word	0x20000010
 8000e78:	20000524 	.word	0x20000524

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000524 	.word	0x20000524

08000e94 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_GetTickPrio+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff ffe2 	bl	8000e7c <HAL_GetTick>
 8000eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d005      	beq.n	8000ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_Delay+0x44>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4413      	add	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed2:	bf00      	nop
 8000ed4:	f7ff ffd2 	bl	8000e7c <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d8f7      	bhi.n	8000ed4 <HAL_Delay+0x28>
  {
  }
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	20000010 	.word	0x20000010

08000ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f26:	4a04      	ldr	r2, [pc, #16]	; (8000f38 <__NVIC_SetPriorityGrouping+0x44>)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	60d3      	str	r3, [r2, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	3714      	adds	r7, #20
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <__NVIC_GetPriorityGrouping+0x18>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0a1b      	lsrs	r3, r3, #8
 8000f46:	f003 0307 	and.w	r3, r3, #7
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	db0b      	blt.n	8000f82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	f003 021f 	and.w	r2, r3, #31
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <__NVIC_EnableIRQ+0x38>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	095b      	lsrs	r3, r3, #5
 8000f78:	2001      	movs	r0, #1
 8000f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100

08000f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db0a      	blt.n	8000fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	490c      	ldr	r1, [pc, #48]	; (8000fe0 <__NVIC_SetPriority+0x4c>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	0112      	lsls	r2, r2, #4
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fbc:	e00a      	b.n	8000fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4908      	ldr	r1, [pc, #32]	; (8000fe4 <__NVIC_SetPriority+0x50>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	3b04      	subs	r3, #4
 8000fcc:	0112      	lsls	r2, r2, #4
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	761a      	strb	r2, [r3, #24]
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	; 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	2b04      	cmp	r3, #4
 8001004:	bf28      	it	cs
 8001006:	2304      	movcs	r3, #4
 8001008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3304      	adds	r3, #4
 800100e:	2b06      	cmp	r3, #6
 8001010:	d902      	bls.n	8001018 <NVIC_EncodePriority+0x30>
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3b03      	subs	r3, #3
 8001016:	e000      	b.n	800101a <NVIC_EncodePriority+0x32>
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	f04f 32ff 	mov.w	r2, #4294967295
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	401a      	ands	r2, r3
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43d9      	mvns	r1, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	4313      	orrs	r3, r2
         );
}
 8001042:	4618      	mov	r0, r3
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff8e 	bl	8000f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff29 	bl	8000ef4 <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff40 	bl	8000f3c <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff90 	bl	8000fe8 <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff5f 	bl	8000f94 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff33 	bl	8000f58 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa4 	bl	8001050 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b02      	cmp	r3, #2
 8001128:	d005      	beq.n	8001136 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2204      	movs	r2, #4
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e047      	b.n	80011c6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 020e 	bic.w	r2, r2, #14
 8001144:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	f003 021c 	and.w	r2, r3, #28
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	2101      	movs	r1, #1
 8001174:	fa01 f202 	lsl.w	r2, r1, r2
 8001178:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001182:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00c      	beq.n	80011a6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001196:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800119a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	4798      	blx	r3
    }
  }
  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e14c      	b.n	800147a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 813e 	beq.w	8001474 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x40>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 0201 	and.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d017      	beq.n	80012ae <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d123      	bne.n	8001302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	08da      	lsrs	r2, r3, #3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3208      	adds	r2, #8
 80012c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0307 	and.w	r3, r3, #7
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	08da      	lsrs	r2, r3, #3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3208      	adds	r2, #8
 80012fc:	6939      	ldr	r1, [r7, #16]
 80012fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	4013      	ands	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0203 	and.w	r2, r3, #3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8098 	beq.w	8001474 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001344:	4a54      	ldr	r2, [pc, #336]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800136e:	d019      	beq.n	80013a4 <HAL_GPIO_Init+0x1d4>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a4a      	ldr	r2, [pc, #296]	; (800149c <HAL_GPIO_Init+0x2cc>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d013      	beq.n	80013a0 <HAL_GPIO_Init+0x1d0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x2d0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00d      	beq.n	800139c <HAL_GPIO_Init+0x1cc>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2d4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d007      	beq.n	8001398 <HAL_GPIO_Init+0x1c8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <HAL_GPIO_Init+0x2d8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_GPIO_Init+0x1c4>
 8001390:	2304      	movs	r3, #4
 8001392:	e008      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 8001394:	2307      	movs	r3, #7
 8001396:	e006      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 8001398:	2303      	movs	r3, #3
 800139a:	e004      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 800139c:	2302      	movs	r3, #2
 800139e:	e002      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <HAL_GPIO_Init+0x1d6>
 80013a4:	2300      	movs	r3, #0
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	f002 0203 	and.w	r2, r2, #3
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	4093      	lsls	r3, r2
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013b6:	4938      	ldr	r1, [pc, #224]	; (8001498 <HAL_GPIO_Init+0x2c8>)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c4:	4b39      	ldr	r3, [pc, #228]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013e8:	4a30      	ldr	r2, [pc, #192]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 800141a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 8001448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800146c:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <HAL_GPIO_Init+0x2dc>)
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa22 f303 	lsr.w	r3, r2, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	f47f aeab 	bne.w	80011e0 <HAL_GPIO_Init+0x10>
  }
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40010000 	.word	0x40010000
 800149c:	48000400 	.word	0x48000400
 80014a0:	48000800 	.word	0x48000800
 80014a4:	48000c00 	.word	0x48000c00
 80014a8:	48001000 	.word	0x48001000
 80014ac:	58000800 	.word	0x58000800

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e0c0      	b.n	8001674 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fb2c 	bl	8000b64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f003 f907 	bl	800472c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	e03e      	b.n	80015a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001524:	7bfa      	ldrb	r2, [r7, #15]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	3311      	adds	r3, #17
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	440b      	add	r3, r1
 8001546:	3310      	adds	r3, #16
 8001548:	7bfa      	ldrb	r2, [r7, #15]
 800154a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	3313      	adds	r3, #19
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001560:	7bfa      	ldrb	r2, [r7, #15]
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	3320      	adds	r3, #32
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001574:	7bfa      	ldrb	r2, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3324      	adds	r3, #36	; 0x24
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	791b      	ldrb	r3, [r3, #4]
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3bb      	bcc.n	8001524 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
 80015b0:	e044      	b.n	800163c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	440b      	add	r3, r1
 80015d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80015da:	7bfa      	ldrb	r2, [r7, #15]
 80015dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015de:	7bfa      	ldrb	r2, [r7, #15]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	440b      	add	r3, r1
 80015ec:	f203 1353 	addw	r3, r3, #339	; 0x153
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800160a:	7bfa      	ldrb	r2, [r7, #15]
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	3301      	adds	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	791b      	ldrb	r3, [r3, #4]
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	429a      	cmp	r2, r3
 8001644:	d3b5      	bcc.n	80015b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6818      	ldr	r0, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3304      	adds	r3, #4
 800164e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001652:	f003 f886 	bl	8004762 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7a9b      	ldrb	r3, [r3, #10]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d102      	bne.n	8001672 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 f805 	bl	800167c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016d4:	4b05      	ldr	r3, [pc, #20]	; (80016ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80016da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	58000400 	.word	0x58000400

080016f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_PWREx_GetVoltageRange+0x18>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	58000400 	.word	0x58000400

0800170c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800171a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800171e:	d101      	bne.n	8001724 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800177e:	d101      	bne.n	8001784 <LL_RCC_HSE_IsReady+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_RCC_HSE_IsReady+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80017b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80017d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017de:	d101      	bne.n	80017e4 <LL_RCC_HSI_IsReady+0x18>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <LL_RCC_HSI_IsReady+0x1a>
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80017f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180a:	4313      	orrs	r3, r2
 800180c:	604b      	str	r3, [r1, #4]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001826:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b02      	cmp	r3, #2
 8001870:	d101      	bne.n	8001876 <LL_RCC_HSI48_IsReady+0x18>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <LL_RCC_HSI48_IsReady+0x1a>
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d6:	f043 0304 	orr.w	r3, r3, #4
 80018da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f8:	f023 0304 	bic.w	r3, r3, #4
 80018fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800190e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b02      	cmp	r3, #2
 800191c:	d101      	bne.n	8001922 <LL_RCC_LSE_IsReady+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_RCC_LSE_IsReady+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001958:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001960:	f023 0301 	bic.w	r3, r3, #1
 8001964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b02      	cmp	r3, #2
 8001984:	d101      	bne.n	800198a <LL_RCC_LSI1_IsReady+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_RCC_LSI1_IsReady+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019c8:	f023 0304 	bic.w	r3, r3, #4
 80019cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d101      	bne.n	80019f2 <LL_RCC_LSI2_IsReady+0x18>
 80019ee:	2301      	movs	r3, #1
 80019f0:	e000      	b.n	80019f4 <LL_RCC_LSI2_IsReady+0x1a>
 80019f2:	2300      	movs	r3, #0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	021b      	lsls	r3, r3, #8
 8001a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6013      	str	r3, [r2, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d101      	bne.n	8001a7e <LL_RCC_MSI_IsReady+0x16>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <LL_RCC_MSI_IsReady+0x18>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	600b      	str	r3, [r1, #0]
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2bb0      	cmp	r3, #176	; 0xb0
 8001ac8:	d901      	bls.n	8001ace <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001aca:	23b0      	movs	r3, #176	; 0xb0
 8001acc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001ace:	687b      	ldr	r3, [r7, #4]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	021b      	lsls	r3, r3, #8
 8001af2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001af6:	4313      	orrs	r3, r2
 8001af8:	604b      	str	r3, [r1, #4]
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f023 0203 	bic.w	r2, r3, #3
 8001b18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	608b      	str	r3, [r1, #8]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b083      	sub	sp, #12
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	608b      	str	r3, [r1, #8]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c3c:	011b      	lsls	r3, r3, #4
 8001c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cac:	6013      	str	r3, [r2, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cca:	d101      	bne.n	8001cd0 <LL_RCC_PLL_IsReady+0x18>
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e000      	b.n	8001cd2 <LL_RCC_PLL_IsReady+0x1a>
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0303 	and.w	r3, r3, #3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d50:	d101      	bne.n	8001d56 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d76:	d101      	bne.n	8001d7c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d90:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d101      	bne.n	8001da2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001dae:	b480      	push	{r7}
 8001db0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dc0:	d101      	bne.n	8001dc6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001de4:	d101      	bne.n	8001dea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df8:	b590      	push	{r4, r7, lr}
 8001dfa:	b08d      	sub	sp, #52	; 0x34
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e363      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 808d 	beq.w	8001f32 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e18:	f7ff fe89 	bl	8001b2e <LL_RCC_GetSysClkSource>
 8001e1c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e1e:	f7ff ff82 	bl	8001d26 <LL_RCC_PLL_GetMainSource>
 8001e22:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d005      	beq.n	8001e36 <HAL_RCC_OscConfig+0x3e>
 8001e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	d147      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d144      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e347      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001e46:	f7ff fe34 	bl	8001ab2 <LL_RCC_MSI_GetRange>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d914      	bls.n	8001e7a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	4618      	mov	r0, r3
 8001e56:	f000 fd31 	bl	80028bc <RCC_SetFlashLatencyFromMSIRange>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e336      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fe0e 	bl	8001a8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fe32 	bl	8001adc <LL_RCC_MSI_SetCalibTrimming>
 8001e78:	e013      	b.n	8001ea2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe03 	bl	8001a8a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe27 	bl	8001adc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fd12 	bl	80028bc <RCC_SetFlashLatencyFromMSIRange>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e317      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001ea2:	f000 fccb 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4aa4      	ldr	r2, [pc, #656]	; (800213c <HAL_RCC_OscConfig+0x344>)
 8001eaa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001eac:	4ba4      	ldr	r3, [pc, #656]	; (8002140 <HAL_RCC_OscConfig+0x348>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ff95 	bl	8000de0 <HAL_InitTick>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d039      	beq.n	8001f30 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e308      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01e      	beq.n	8001f06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ec8:	f7ff fdb0 	bl	8001a2c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ecc:	f7fe ffd6 	bl	8000e7c <HAL_GetTick>
 8001ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed4:	f7fe ffd2 	bl	8000e7c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e2f5      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001ee6:	f7ff fdbf 	bl	8001a68 <LL_RCC_MSI_IsReady>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f1      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fdc8 	bl	8001a8a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fdec 	bl	8001adc <LL_RCC_MSI_SetCalibTrimming>
 8001f04:	e015      	b.n	8001f32 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f06:	f7ff fda0 	bl	8001a4a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ffb7 	bl	8000e7c <HAL_GetTick>
 8001f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f12:	f7fe ffb3 	bl	8000e7c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e2d6      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001f24:	f7ff fda0 	bl	8001a68 <LL_RCC_MSI_IsReady>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f1      	bne.n	8001f12 <HAL_RCC_OscConfig+0x11a>
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001f30:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d047      	beq.n	8001fce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3e:	f7ff fdf6 	bl	8001b2e <LL_RCC_GetSysClkSource>
 8001f42:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f44:	f7ff feef 	bl	8001d26 <LL_RCC_PLL_GetMainSource>
 8001f48:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x164>
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d108      	bne.n	8001f68 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d134      	bne.n	8001fce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e2b4      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_OscConfig+0x180>
 8001f72:	f7ff fbdd 	bl	8001730 <LL_RCC_HSE_Enable>
 8001f76:	e001      	b.n	8001f7c <HAL_RCC_OscConfig+0x184>
 8001f78:	f7ff fbe9 	bl	800174e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d012      	beq.n	8001faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe ff7a 	bl	8000e7c <HAL_GetTick>
 8001f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7fe ff76 	bl	8000e7c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e299      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001f9e:	f7ff fbe5 	bl	800176c <LL_RCC_HSE_IsReady>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f1      	beq.n	8001f8c <HAL_RCC_OscConfig+0x194>
 8001fa8:	e011      	b.n	8001fce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe ff67 	bl	8000e7c <HAL_GetTick>
 8001fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb2:	f7fe ff63 	bl	8000e7c <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b64      	cmp	r3, #100	; 0x64
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e286      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001fc4:	f7ff fbd2 	bl	800176c <LL_RCC_HSE_IsReady>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f1      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d04c      	beq.n	8002074 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fda:	f7ff fda8 	bl	8001b2e <LL_RCC_GetSysClkSource>
 8001fde:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe0:	f7ff fea1 	bl	8001d26 <LL_RCC_PLL_GetMainSource>
 8001fe4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x200>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d10e      	bne.n	8002010 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d10b      	bne.n	8002010 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e266      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fbf1 	bl	80017f0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800200e:	e031      	b.n	8002074 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d019      	beq.n	800204c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	f7ff fbba 	bl	8001790 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7fe ff2e 	bl	8000e7c <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7fe ff2a 	bl	8000e7c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e24d      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002036:	f7ff fbc9 	bl	80017cc <LL_RCC_HSI_IsReady>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f1      	beq.n	8002024 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fbd3 	bl	80017f0 <LL_RCC_HSI_SetCalibTrimming>
 800204a:	e013      	b.n	8002074 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204c:	f7ff fbaf 	bl	80017ae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe ff14 	bl	8000e7c <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002058:	f7fe ff10 	bl	8000e7c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e233      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800206a:	f7ff fbaf 	bl	80017cc <LL_RCC_HSI_IsReady>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f1      	bne.n	8002058 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a3 	beq.w	80021d4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d076      	beq.n	8002184 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d046      	beq.n	8002130 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80020a2:	f7ff fc66 	bl	8001972 <LL_RCC_LSI1_IsReady>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d113      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80020ac:	f7ff fc3f 	bl	800192e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020b0:	f7fe fee4 	bl	8000e7c <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80020b8:	f7fe fee0 	bl	8000e7c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e203      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80020ca:	f7ff fc52 	bl	8001972 <LL_RCC_LSI1_IsReady>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f1      	beq.n	80020b8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80020d4:	f7ff fc5f 	bl	8001996 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fed0 	bl	8000e7c <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80020e0:	f7fe fecc 	bl	8000e7c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e1ef      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80020f2:	f7ff fc72 	bl	80019da <LL_RCC_LSI2_IsReady>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f1      	beq.n	80020e0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fc7c 	bl	80019fe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002106:	f7ff fc23 	bl	8001950 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210a:	f7fe feb7 	bl	8000e7c <HAL_GetTick>
 800210e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002112:	f7fe feb3 	bl	8000e7c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e1d6      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002124:	f7ff fc25 	bl	8001972 <LL_RCC_LSI1_IsReady>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f1      	bne.n	8002112 <HAL_RCC_OscConfig+0x31a>
 800212e:	e051      	b.n	80021d4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002130:	f7ff fbfd 	bl	800192e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe fea2 	bl	8000e7c <HAL_GetTick>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800213a:	e00c      	b.n	8002156 <HAL_RCC_OscConfig+0x35e>
 800213c:	20000008 	.word	0x20000008
 8002140:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002144:	f7fe fe9a 	bl	8000e7c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e1bd      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002156:	f7ff fc0c 	bl	8001972 <LL_RCC_LSI1_IsReady>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f1      	beq.n	8002144 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002160:	f7ff fc2a 	bl	80019b8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002166:	f7fe fe89 	bl	8000e7c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b03      	cmp	r3, #3
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1ac      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002178:	f7ff fc2f 	bl	80019da <LL_RCC_LSI2_IsReady>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f1      	bne.n	8002166 <HAL_RCC_OscConfig+0x36e>
 8002182:	e027      	b.n	80021d4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002184:	f7ff fc18 	bl	80019b8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe fe78 	bl	8000e7c <HAL_GetTick>
 800218c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002190:	f7fe fe74 	bl	8000e7c <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b03      	cmp	r3, #3
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e197      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80021a2:	f7ff fc1a 	bl	80019da <LL_RCC_LSI2_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f1      	bne.n	8002190 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80021ac:	f7ff fbd0 	bl	8001950 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7fe fe64 	bl	8000e7c <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021b8:	f7fe fe60 	bl	8000e7c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e183      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80021ca:	f7ff fbd2 	bl	8001972 <LL_RCC_LSI1_IsReady>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f1      	bne.n	80021b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d05b      	beq.n	8002298 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e0:	4ba7      	ldr	r3, [pc, #668]	; (8002480 <HAL_RCC_OscConfig+0x688>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d114      	bne.n	8002216 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80021ec:	f7ff fa70 	bl	80016d0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f0:	f7fe fe44 	bl	8000e7c <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fe40 	bl	8000e7c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e163      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220a:	4b9d      	ldr	r3, [pc, #628]	; (8002480 <HAL_RCC_OscConfig+0x688>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d102      	bne.n	8002224 <HAL_RCC_OscConfig+0x42c>
 800221e:	f7ff fb30 	bl	8001882 <LL_RCC_LSE_Enable>
 8002222:	e00c      	b.n	800223e <HAL_RCC_OscConfig+0x446>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b05      	cmp	r3, #5
 800222a:	d104      	bne.n	8002236 <HAL_RCC_OscConfig+0x43e>
 800222c:	f7ff fb4b 	bl	80018c6 <LL_RCC_LSE_EnableBypass>
 8002230:	f7ff fb27 	bl	8001882 <LL_RCC_LSE_Enable>
 8002234:	e003      	b.n	800223e <HAL_RCC_OscConfig+0x446>
 8002236:	f7ff fb35 	bl	80018a4 <LL_RCC_LSE_Disable>
 800223a:	f7ff fb55 	bl	80018e8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d014      	beq.n	8002270 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002246:	f7fe fe19 	bl	8000e7c <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800224c:	e00a      	b.n	8002264 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe fe15 	bl	8000e7c <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e136      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002264:	f7ff fb51 	bl	800190a <LL_RCC_LSE_IsReady>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0ef      	beq.n	800224e <HAL_RCC_OscConfig+0x456>
 800226e:	e013      	b.n	8002298 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002270:	f7fe fe04 	bl	8000e7c <HAL_GetTick>
 8002274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002276:	e00a      	b.n	800228e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe fe00 	bl	8000e7c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e121      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800228e:	f7ff fb3c 	bl	800190a <LL_RCC_LSE_IsReady>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d1ef      	bne.n	8002278 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d02c      	beq.n	80022fe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d014      	beq.n	80022d6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022ac:	f7ff fab5 	bl	800181a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fde4 	bl	8000e7c <HAL_GetTick>
 80022b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022b8:	f7fe fde0 	bl	8000e7c <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e103      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80022ca:	f7ff fac8 	bl	800185e <LL_RCC_HSI48_IsReady>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f1      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4c0>
 80022d4:	e013      	b.n	80022fe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022d6:	f7ff fab1 	bl	800183c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022da:	f7fe fdcf 	bl	8000e7c <HAL_GetTick>
 80022de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022e2:	f7fe fdcb 	bl	8000e7c <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e0ee      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80022f4:	f7ff fab3 	bl	800185e <LL_RCC_HSI48_IsReady>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f1      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	2b00      	cmp	r3, #0
 8002304:	f000 80e4 	beq.w	80024d0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002308:	f7ff fc11 	bl	8001b2e <LL_RCC_GetSysClkSource>
 800230c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	2b02      	cmp	r3, #2
 800231c:	f040 80b4 	bne.w	8002488 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	429a      	cmp	r2, r3
 800232c:	d123      	bne.n	8002376 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d11c      	bne.n	8002376 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002348:	429a      	cmp	r2, r3
 800234a:	d114      	bne.n	8002376 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d10d      	bne.n	8002376 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d05d      	beq.n	8002432 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d058      	beq.n	800242e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0a1      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800238e:	f7ff fc84 	bl	8001c9a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002392:	f7fe fd73 	bl	8000e7c <HAL_GetTick>
 8002396:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fd6f 	bl	8000e7c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e092      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ef      	bne.n	800239a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCC_OscConfig+0x68c>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023cc:	4311      	orrs	r1, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023d2:	0212      	lsls	r2, r2, #8
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023da:	4311      	orrs	r1, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023e6:	430a      	orrs	r2, r1
 80023e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023f0:	f7ff fc44 	bl	8001c7c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002404:	f7fe fd3a 	bl	8000e7c <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe fd36 	bl	8000e7c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e059      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ef      	beq.n	800240c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242c:	e050      	b.n	80024d0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e04f      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d147      	bne.n	80024d0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002440:	f7ff fc1c 	bl	8001c7c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002454:	f7fe fd12 	bl	8000e7c <HAL_GetTick>
 8002458:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fd0e 	bl	8000e7c <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e031      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0ef      	beq.n	800245c <HAL_RCC_OscConfig+0x664>
 800247c:	e028      	b.n	80024d0 <HAL_RCC_OscConfig+0x6d8>
 800247e:	bf00      	nop
 8002480:	58000400 	.word	0x58000400
 8002484:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b0c      	cmp	r3, #12
 800248c:	d01e      	beq.n	80024cc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248e:	f7ff fc04 	bl	8001c9a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fcf3 	bl	8000e7c <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249a:	f7fe fcef 	bl	8000e7c <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e012      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1ef      	bne.n	800249a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80024ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024be:	68da      	ldr	r2, [r3, #12]
 80024c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_OscConfig+0x6e4>)
 80024c6:	4013      	ands	r3, r2
 80024c8:	60cb      	str	r3, [r1, #12]
 80024ca:	e001      	b.n	80024d0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3734      	adds	r7, #52	; 0x34
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd90      	pop	{r4, r7, pc}
 80024da:	bf00      	nop
 80024dc:	eefefffc 	.word	0xeefefffc

080024e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e12d      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f4:	4b98      	ldr	r3, [pc, #608]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d91b      	bls.n	800253a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002502:	4b95      	ldr	r3, [pc, #596]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0207 	bic.w	r2, r3, #7
 800250a:	4993      	ldr	r1, [pc, #588]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	4313      	orrs	r3, r2
 8002510:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002512:	f7fe fcb3 	bl	8000e7c <HAL_GetTick>
 8002516:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002518:	e008      	b.n	800252c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800251a:	f7fe fcaf 	bl	8000e7c <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d901      	bls.n	800252c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e111      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252c:	4b8a      	ldr	r3, [pc, #552]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d1ef      	bne.n	800251a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fafb 	bl	8001b46 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002550:	f7fe fc94 	bl	8000e7c <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002558:	f7fe fc90 	bl	8000e7c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0f2      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800256a:	f7ff fbe8 	bl	8001d3e <LL_RCC_IsActiveFlag_HPRE>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f1      	beq.n	8002558 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff faf2 	bl	8001b6e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800258a:	f7fe fc77 	bl	8000e7c <HAL_GetTick>
 800258e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002590:	e008      	b.n	80025a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002592:	f7fe fc73 	bl	8000e7c <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0d5      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80025a4:	f7ff fbdd 	bl	8001d62 <LL_RCC_IsActiveFlag_C2HPRE>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f1      	beq.n	8002592 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d016      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff faeb 	bl	8001b9a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025c4:	f7fe fc5a 	bl	8000e7c <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025ca:	e008      	b.n	80025de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80025cc:	f7fe fc56 	bl	8000e7c <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e0b8      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80025de:	f7ff fbd3 	bl	8001d88 <LL_RCC_IsActiveFlag_SHDHPRE>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f1      	beq.n	80025cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d016      	beq.n	8002622 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fae5 	bl	8001bc8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025fe:	f7fe fc3d 	bl	8000e7c <HAL_GetTick>
 8002602:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002606:	f7fe fc39 	bl	8000e7c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e09b      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002618:	f7ff fbc9 	bl	8001dae <LL_RCC_IsActiveFlag_PPRE1>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f1      	beq.n	8002606 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d017      	beq.n	800265e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff fadb 	bl	8001bf0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800263a:	f7fe fc1f 	bl	8000e7c <HAL_GetTick>
 800263e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002642:	f7fe fc1b 	bl	8000e7c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e07d      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002654:	f7ff fbbd 	bl	8001dd2 <LL_RCC_IsActiveFlag_PPRE2>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f1      	beq.n	8002642 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d043      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d106      	bne.n	8002680 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002672:	f7ff f87b 	bl	800176c <LL_RCC_HSE_IsReady>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d11e      	bne.n	80026ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e067      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d106      	bne.n	8002696 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002688:	f7ff fb16 	bl	8001cb8 <LL_RCC_PLL_IsReady>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d113      	bne.n	80026ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e05c      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d106      	bne.n	80026ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800269e:	f7ff f9e3 	bl	8001a68 <LL_RCC_MSI_IsReady>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d108      	bne.n	80026ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e051      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80026ac:	f7ff f88e 	bl	80017cc <LL_RCC_HSI_IsReady>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e04a      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fa21 	bl	8001b06 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c4:	f7fe fbda 	bl	8000e7c <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fbd6 	bl	8000e7c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e036      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	f7ff fa24 	bl	8001b2e <LL_RCC_GetSysClkSource>
 80026e6:	4602      	mov	r2, r0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d1ec      	bne.n	80026cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d21b      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f023 0207 	bic.w	r2, r3, #7
 8002708:	4913      	ldr	r1, [pc, #76]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002710:	f7fe fbb4 	bl	8000e7c <HAL_GetTick>
 8002714:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	e008      	b.n	800272a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002718:	f7fe fbb0 	bl	8000e7c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e012      	b.n	8002750 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_ClockConfig+0x278>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d1ef      	bne.n	8002718 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002738:	f000 f880 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800273c:	4603      	mov	r3, r0
 800273e:	4a07      	ldr	r2, [pc, #28]	; (800275c <HAL_RCC_ClockConfig+0x27c>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002742:	f7fe fba7 	bl	8000e94 <HAL_GetTickPrio>
 8002746:	4603      	mov	r3, r0
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fb49 	bl	8000de0 <HAL_InitTick>
 800274e:	4603      	mov	r3, r0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	58004000 	.word	0x58004000
 800275c:	20000008 	.word	0x20000008

08002760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002766:	f7ff f9e2 	bl	8001b2e <LL_RCC_GetSysClkSource>
 800276a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d10a      	bne.n	8002788 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002772:	f7ff f99e 	bl	8001ab2 <LL_RCC_MSI_GetRange>
 8002776:	4603      	mov	r3, r0
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a2b      	ldr	r2, [pc, #172]	; (800282c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	e04b      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d102      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800278e:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e045      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b08      	cmp	r3, #8
 8002798:	d10a      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800279a:	f7fe ffb7 	bl	800170c <LL_RCC_HSE_IsEnabledDiv2>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d102      	bne.n	80027aa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80027a4:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e03a      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <HAL_RCC_GetSysClockFreq+0xd8>)
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e037      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80027b0:	f7ff fab9 	bl	8001d26 <LL_RCC_PLL_GetMainSource>
 80027b4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d003      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x64>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d003      	beq.n	80027ca <HAL_RCC_GetSysClockFreq+0x6a>
 80027c2:	e00d      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_GetSysClockFreq+0xd0>)
 80027c6:	60bb      	str	r3, [r7, #8]
        break;
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80027ca:	f7fe ff9f 	bl	800170c <LL_RCC_HSE_IsEnabledDiv2>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d102      	bne.n	80027da <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_RCC_GetSysClockFreq+0xd4>)
 80027d6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80027d8:	e00d      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <HAL_RCC_GetSysClockFreq+0xd8>)
 80027dc:	60bb      	str	r3, [r7, #8]
        break;
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80027e0:	f7ff f967 	bl	8001ab2 <LL_RCC_MSI_GetRange>
 80027e4:	4603      	mov	r3, r0
 80027e6:	091b      	lsrs	r3, r3, #4
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	4a0f      	ldr	r2, [pc, #60]	; (800282c <HAL_RCC_GetSysClockFreq+0xcc>)
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	60bb      	str	r3, [r7, #8]
        break;
 80027f4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80027f6:	f7ff fa71 	bl	8001cdc <LL_RCC_PLL_GetN>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	fb03 f402 	mul.w	r4, r3, r2
 8002802:	f7ff fa84 	bl	8001d0e <LL_RCC_PLL_GetDivider>
 8002806:	4603      	mov	r3, r0
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	3301      	adds	r3, #1
 800280c:	fbb4 f4f3 	udiv	r4, r4, r3
 8002810:	f7ff fa71 	bl	8001cf6 <LL_RCC_PLL_GetR>
 8002814:	4603      	mov	r3, r0
 8002816:	0f5b      	lsrs	r3, r3, #29
 8002818:	3301      	adds	r3, #1
 800281a:	fbb4 f3f3 	udiv	r3, r4, r3
 800281e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002820:	68fb      	ldr	r3, [r7, #12]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	bf00      	nop
 800282c:	0800489c 	.word	0x0800489c
 8002830:	00f42400 	.word	0x00f42400
 8002834:	003d0900 	.word	0x003d0900
 8002838:	007a1200 	.word	0x007a1200

0800283c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b598      	push	{r3, r4, r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002840:	f7ff ff8e 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8002844:	4604      	mov	r4, r0
 8002846:	f7ff f9e7 	bl	8001c18 <LL_RCC_GetAHBPrescaler>
 800284a:	4603      	mov	r3, r0
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	4a03      	ldr	r2, [pc, #12]	; (8002860 <HAL_RCC_GetHCLKFreq+0x24>)
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd98      	pop	{r3, r4, r7, pc}
 8002860:	0800483c 	.word	0x0800483c

08002864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002864:	b598      	push	{r3, r4, r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002868:	f7ff ffe8 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800286c:	4604      	mov	r4, r0
 800286e:	f7ff f9ed 	bl	8001c4c <LL_RCC_GetAPB1Prescaler>
 8002872:	4603      	mov	r3, r0
 8002874:	0a1b      	lsrs	r3, r3, #8
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <HAL_RCC_GetPCLK1Freq+0x28>)
 800287c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd98      	pop	{r3, r4, r7, pc}
 800288c:	0800487c 	.word	0x0800487c

08002890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002890:	b598      	push	{r3, r4, r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002894:	f7ff ffd2 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002898:	4604      	mov	r4, r0
 800289a:	f7ff f9e3 	bl	8001c64 <LL_RCC_GetAPB2Prescaler>
 800289e:	4603      	mov	r3, r0
 80028a0:	0adb      	lsrs	r3, r3, #11
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd98      	pop	{r3, r4, r7, pc}
 80028b8:	0800487c 	.word	0x0800487c

080028bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2bb0      	cmp	r3, #176	; 0xb0
 80028c8:	d903      	bls.n	80028d2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e007      	b.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	4a11      	ldr	r2, [pc, #68]	; (8002920 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80028dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80028e2:	f7ff f9a5 	bl	8001c30 <LL_RCC_GetAHB4Prescaler>
 80028e6:	4603      	mov	r3, r0
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80028f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4a0a      	ldr	r2, [pc, #40]	; (8002928 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	0c9c      	lsrs	r4, r3, #18
 8002906:	f7fe fef3 	bl	80016f0 <HAL_PWREx_GetVoltageRange>
 800290a:	4603      	mov	r3, r0
 800290c:	4619      	mov	r1, r3
 800290e:	4620      	mov	r0, r4
 8002910:	f000 f80c 	bl	800292c <RCC_SetFlashLatency>
 8002914:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	bf00      	nop
 8002920:	0800489c 	.word	0x0800489c
 8002924:	0800483c 	.word	0x0800483c
 8002928:	431bde83 	.word	0x431bde83

0800292c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b093      	sub	sp, #76	; 0x4c
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002936:	4b37      	ldr	r3, [pc, #220]	; (8002a14 <RCC_SetFlashLatency+0xe8>)
 8002938:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800293c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800293e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002942:	4a35      	ldr	r2, [pc, #212]	; (8002a18 <RCC_SetFlashLatency+0xec>)
 8002944:	f107 031c 	add.w	r3, r7, #28
 8002948:	ca07      	ldmia	r2, {r0, r1, r2}
 800294a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <RCC_SetFlashLatency+0xf0>)
 8002950:	f107 040c 	add.w	r4, r7, #12
 8002954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002956:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800295a:	2300      	movs	r3, #0
 800295c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002964:	d11a      	bne.n	800299c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002966:	2300      	movs	r3, #0
 8002968:	643b      	str	r3, [r7, #64]	; 0x40
 800296a:	e013      	b.n	8002994 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800296c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	3348      	adds	r3, #72	; 0x48
 8002972:	443b      	add	r3, r7
 8002974:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	429a      	cmp	r2, r3
 800297c:	d807      	bhi.n	800298e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800297e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3348      	adds	r3, #72	; 0x48
 8002984:	443b      	add	r3, r7
 8002986:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800298a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800298c:	e020      	b.n	80029d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800298e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002990:	3301      	adds	r3, #1
 8002992:	643b      	str	r3, [r7, #64]	; 0x40
 8002994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002996:	2b03      	cmp	r3, #3
 8002998:	d9e8      	bls.n	800296c <RCC_SetFlashLatency+0x40>
 800299a:	e019      	b.n	80029d0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800299c:	2300      	movs	r3, #0
 800299e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029a0:	e013      	b.n	80029ca <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80029a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	3348      	adds	r3, #72	; 0x48
 80029a8:	443b      	add	r3, r7
 80029aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d807      	bhi.n	80029c4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80029b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	3348      	adds	r3, #72	; 0x48
 80029ba:	443b      	add	r3, r7
 80029bc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80029c0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80029c2:	e005      	b.n	80029d0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	3301      	adds	r3, #1
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d9e8      	bls.n	80029a2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <RCC_SetFlashLatency+0xf4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0207 	bic.w	r2, r3, #7
 80029d8:	4911      	ldr	r1, [pc, #68]	; (8002a20 <RCC_SetFlashLatency+0xf4>)
 80029da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80029e0:	f7fe fa4c 	bl	8000e7c <HAL_GetTick>
 80029e4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80029e6:	e008      	b.n	80029fa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80029e8:	f7fe fa48 	bl	8000e7c <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e007      	b.n	8002a0a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80029fa:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <RCC_SetFlashLatency+0xf4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1ef      	bne.n	80029e8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	374c      	adds	r7, #76	; 0x4c
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd90      	pop	{r4, r7, pc}
 8002a12:	bf00      	nop
 8002a14:	08004810 	.word	0x08004810
 8002a18:	08004820 	.word	0x08004820
 8002a1c:	0800482c 	.word	0x0800482c
 8002a20:	58004000 	.word	0x58004000

08002a24 <LL_RCC_LSE_IsEnabled>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <LL_RCC_LSE_IsEnabled+0x18>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <LL_RCC_LSE_IsEnabled+0x1a>
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_RCC_LSE_IsReady>:
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f003 0302 	and.w	r3, r3, #2
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d101      	bne.n	8002a60 <LL_RCC_LSE_IsReady+0x18>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <LL_RCC_LSE_IsReady+0x1a>
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_MSI_EnablePLLMode>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8002a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7a:	f043 0304 	orr.w	r3, r3, #4
 8002a7e:	6013      	str	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_RCC_SetRFWKPClockSource>:
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_RCC_SetSMPSClockSource>:
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	f023 0203 	bic.w	r2, r3, #3
 8002ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_RCC_SetSMPSPrescaler>:
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_RCC_SetUSARTClockSource>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <LL_RCC_SetLPUARTClockSource>:
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <LL_RCC_SetI2CClockSource>:
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b76:	43db      	mvns	r3, r3
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_SetLPTIMClockSource>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0c1b      	lsrs	r3, r3, #16
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	401a      	ands	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_RCC_SetSAIClockSource>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002be0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_RCC_SetRNGClockSource>:
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <LL_RCC_SetCLK48ClockSource>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_RCC_SetUSBClockSource>:
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ffe3 	bl	8002c24 <LL_RCC_SetCLK48ClockSource>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <LL_RCC_SetADCClockSource>:
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_RCC_SetRTCClockSource>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_RCC_GetRTCClockSource>:
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_RCC_ForceBackupDomainReset>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <LL_RCC_ReleaseBackupDomainReset>:
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_RCC_PLLSAI1_Enable>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_RCC_PLLSAI1_Disable>:
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d4c:	6013      	str	r3, [r2, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_RCC_PLLSAI1_IsReady>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d6a:	d101      	bne.n	8002d70 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002d84:	2300      	movs	r3, #0
 8002d86:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d034      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002da0:	d021      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002da2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002da6:	d81b      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002da8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dac:	d01d      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002dae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002db2:	d815      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00b      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dbc:	d110      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dce:	e00d      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f94d 	bl	8003074 <RCCEx_PLLSAI1_ConfigNP>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002dde:	e005      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]
        break;
 8002de4:	e002      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002de6:	bf00      	nop
 8002de8:	e000      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002dea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dec:	7ffb      	ldrb	r3, [r7, #31]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fee8 	bl	8002bcc <LL_RCC_SetSAIClockSource>
 8002dfc:	e001      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfe:	7ffb      	ldrb	r3, [r7, #31]
 8002e00:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d046      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e0e:	f7ff ff56 	bl	8002cbe <LL_RCC_GetRTCClockSource>
 8002e12:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d03c      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002e1e:	f7fe fc57 	bl	80016d0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff30 	bl	8002c92 <LL_RCC_SetRTCClockSource>
 8002e32:	e02e      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e3c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002e3e:	f7ff ff4b 	bl	8002cd8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002e42:	f7ff ff5a 	bl	8002cfa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002e54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002e5e:	f7ff fde1 	bl	8002a24 <LL_RCC_LSE_IsEnabled>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d114      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e68:	f7fe f808 	bl	8000e7c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe f804 	bl	8000e7c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d902      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	77fb      	strb	r3, [r7, #31]
              break;
 8002e86:	e004      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002e88:	f7ff fdde 	bl	8002a48 <LL_RCC_LSE_IsReady>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d1ee      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002e92:	7ffb      	ldrb	r3, [r7, #31]
 8002e94:	77bb      	strb	r3, [r7, #30]
 8002e96:	e001      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e98:	7ffb      	ldrb	r3, [r7, #31]
 8002e9a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d004      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fe2a 	bl	8002b06 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d004      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fe35 	bl	8002b32 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d004      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fe5d 	bl	8002b98 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0320 	and.w	r3, r3, #32
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fe52 	bl	8002b98 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fe2a 	bl	8002b5e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fe1f 	bl	8002b5e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d022      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fe8d 	bl	8002c50 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f4e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f58:	d10b      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f8e3 	bl	800312a <RCCEx_PLLSAI1_ConfigNQ>
 8002f64:	4603      	mov	r3, r0
 8002f66:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02b      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d008      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f90:	d003      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fe2a 	bl	8002bf8 <LL_RCC_SetRNGClockSource>
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7ff fe21 	bl	8002bf8 <LL_RCC_SetRNGClockSource>
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f7ff fe34 	bl	8002c24 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d022      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fe3d 	bl	8002c66 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ff4:	d107      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003004:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800300e:	d10b      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3304      	adds	r3, #4
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f8e3 	bl	80031e0 <RCCEx_PLLSAI1_ConfigNR>
 800301a:	4603      	mov	r3, r0
 800301c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800301e:	7ffb      	ldrb	r3, [r7, #31]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003024:	7ffb      	ldrb	r3, [r7, #31]
 8003026:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fd26 	bl	8002a8a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fd45 	bl	8002ade <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fd2c 	bl	8002ab6 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800305e:	7fbb      	ldrb	r3, [r7, #30]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3720      	adds	r7, #32
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800306c:	f7ff fcfe 	bl	8002a6c <LL_RCC_MSI_EnablePLLMode>
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}

08003074 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003080:	f7ff fe5b 	bl	8002d3a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003084:	f7fd fefa 	bl	8000e7c <HAL_GetTick>
 8003088:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800308a:	e009      	b.n	80030a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800308c:	f7fd fef6 	bl	8000e7c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d902      	bls.n	80030a0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	73fb      	strb	r3, [r7, #15]
      break;
 800309e:	e004      	b.n	80030aa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80030a0:	f7ff fe5a 	bl	8002d58 <LL_RCC_PLLSAI1_IsReady>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d137      	bne.n	8003120 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	021b      	lsls	r3, r3, #8
 80030c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c4:	4313      	orrs	r3, r2
 80030c6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030da:	4313      	orrs	r3, r2
 80030dc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80030de:	f7ff fe1d 	bl	8002d1c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e2:	f7fd fecb 	bl	8000e7c <HAL_GetTick>
 80030e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030e8:	e009      	b.n	80030fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030ea:	f7fd fec7 	bl	8000e7c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d902      	bls.n	80030fe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	73fb      	strb	r3, [r7, #15]
        break;
 80030fc:	e004      	b.n	8003108 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80030fe:	f7ff fe2b 	bl	8002d58 <LL_RCC_PLLSAI1_IsReady>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d1f0      	bne.n	80030ea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d108      	bne.n	8003120 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800310e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311c:	4313      	orrs	r3, r2
 800311e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b084      	sub	sp, #16
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003136:	f7ff fe00 	bl	8002d3a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800313a:	f7fd fe9f 	bl	8000e7c <HAL_GetTick>
 800313e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003140:	e009      	b.n	8003156 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003142:	f7fd fe9b 	bl	8000e7c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d902      	bls.n	8003156 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e004      	b.n	8003160 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003156:	f7ff fdff 	bl	8002d58 <LL_RCC_PLLSAI1_IsReady>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1f0      	bne.n	8003142 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d137      	bne.n	80031d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800317a:	4313      	orrs	r3, r2
 800317c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800317e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003190:	4313      	orrs	r3, r2
 8003192:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003194:	f7ff fdc2 	bl	8002d1c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003198:	f7fd fe70 	bl	8000e7c <HAL_GetTick>
 800319c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800319e:	e009      	b.n	80031b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031a0:	f7fd fe6c 	bl	8000e7c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d902      	bls.n	80031b4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	73fb      	strb	r3, [r7, #15]
        break;
 80031b2:	e004      	b.n	80031be <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80031b4:	f7ff fdd0 	bl	8002d58 <LL_RCC_PLLSAI1_IsReady>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d1f0      	bne.n	80031a0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d108      	bne.n	80031d6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80031c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d2:	4313      	orrs	r3, r2
 80031d4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031ec:	f7ff fda5 	bl	8002d3a <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031f0:	f7fd fe44 	bl	8000e7c <HAL_GetTick>
 80031f4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031f6:	e009      	b.n	800320c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031f8:	f7fd fe40 	bl	8000e7c <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d902      	bls.n	800320c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	73fb      	strb	r3, [r7, #15]
      break;
 800320a:	e004      	b.n	8003216 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800320c:	f7ff fda4 	bl	8002d58 <LL_RCC_PLLSAI1_IsReady>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d137      	bne.n	800328c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003230:	4313      	orrs	r3, r2
 8003232:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003246:	4313      	orrs	r3, r2
 8003248:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800324a:	f7ff fd67 	bl	8002d1c <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324e:	f7fd fe15 	bl	8000e7c <HAL_GetTick>
 8003252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003254:	e009      	b.n	800326a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003256:	f7fd fe11 	bl	8000e7c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d902      	bls.n	800326a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	73fb      	strb	r3, [r7, #15]
        break;
 8003268:	e004      	b.n	8003274 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800326a:	f7ff fd75 	bl	8002d58 <LL_RCC_PLLSAI1_IsReady>
 800326e:	4603      	mov	r3, r0
 8003270:	2b01      	cmp	r3, #1
 8003272:	d1f0      	bne.n	8003256 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d108      	bne.n	800328c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003288:	4313      	orrs	r3, r2
 800328a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800328c:	7bfb      	ldrb	r3, [r7, #15]
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e095      	b.n	80033d4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d108      	bne.n	80032c2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b8:	d009      	beq.n	80032ce <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	61da      	str	r2, [r3, #28]
 80032c0:	e005      	b.n	80032ce <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fd fbbd 	bl	8000a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2202      	movs	r2, #2
 80032f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003304:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800330e:	d902      	bls.n	8003316 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e002      	b.n	800331c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003324:	d007      	beq.n	8003336 <HAL_SPI_Init+0xa0>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	ea42 0103 	orr.w	r1, r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0204 	and.w	r2, r3, #4
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80033b2:	ea42 0103 	orr.w	r1, r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b088      	sub	sp, #32
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	603b      	str	r3, [r7, #0]
 80033e8:	4613      	mov	r3, r2
 80033ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_SPI_Transmit+0x22>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e15f      	b.n	80036be <HAL_SPI_Transmit+0x2e2>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003406:	f7fd fd39 	bl	8000e7c <HAL_GetTick>
 800340a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b01      	cmp	r3, #1
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800341c:	2302      	movs	r3, #2
 800341e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003420:	e148      	b.n	80036b4 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_SPI_Transmit+0x52>
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003432:	e13f      	b.n	80036b4 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2203      	movs	r2, #3
 8003438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	88fa      	ldrh	r2, [r7, #6]
 800344c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	88fa      	ldrh	r2, [r7, #6]
 8003452:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	d10f      	bne.n	80034a0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d007      	beq.n	80034be <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034c6:	d94f      	bls.n	8003568 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_Transmit+0xfa>
 80034d0:	8afb      	ldrh	r3, [r7, #22]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d142      	bne.n	800355c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	881a      	ldrh	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	1c9a      	adds	r2, r3, #2
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034fa:	e02f      	b.n	800355c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	d112      	bne.n	8003530 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	881a      	ldrh	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351a:	1c9a      	adds	r2, r3, #2
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800352e:	e015      	b.n	800355c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003530:	f7fd fca4 	bl	8000e7c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	429a      	cmp	r2, r3
 800353e:	d803      	bhi.n	8003548 <HAL_SPI_Transmit+0x16c>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d102      	bne.n	800354e <HAL_SPI_Transmit+0x172>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800355a:	e0ab      	b.n	80036b4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1ca      	bne.n	80034fc <HAL_SPI_Transmit+0x120>
 8003566:	e080      	b.n	800366a <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_SPI_Transmit+0x19a>
 8003570:	8afb      	ldrh	r3, [r7, #22]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d174      	bne.n	8003660 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d912      	bls.n	80035a6 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	881a      	ldrh	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	1c9a      	adds	r2, r3, #2
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b02      	subs	r3, #2
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a4:	e05c      	b.n	8003660 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	7812      	ldrb	r2, [r2, #0]
 80035b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035cc:	e048      	b.n	8003660 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d12b      	bne.n	8003634 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d912      	bls.n	800360c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	881a      	ldrh	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	1c9a      	adds	r2, r3, #2
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b02      	subs	r3, #2
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	87da      	strh	r2, [r3, #62]	; 0x3e
 800360a:	e029      	b.n	8003660 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	7812      	ldrb	r2, [r2, #0]
 8003618:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003632:	e015      	b.n	8003660 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003634:	f7fd fc22 	bl	8000e7c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d803      	bhi.n	800364c <HAL_SPI_Transmit+0x270>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d102      	bne.n	8003652 <HAL_SPI_Transmit+0x276>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800365e:	e029      	b.n	80036b4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1b1      	bne.n	80035ce <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 fa5c 	bl	8003b2c <SPI_EndRxTxTransaction>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e003      	b.n	80036b4 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10e      	bne.n	8003708 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d009      	beq.n	8003708 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	4798      	blx	r3
    return;
 8003706:	e0ce      	b.n	80038a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_SPI_IRQHandler+0x5e>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
    return;
 8003724:	e0bf      	b.n	80038a6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <HAL_SPI_IRQHandler+0x7e>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003736:	2b00      	cmp	r3, #0
 8003738:	d105      	bne.n	8003746 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80b0 	beq.w	80038a6 <HAL_SPI_IRQHandler+0x1de>
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80aa 	beq.w	80038a6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b03      	cmp	r3, #3
 8003766:	d011      	beq.n	800378c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	f043 0204 	orr.w	r2, r3, #4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	e00b      	b.n	80037a4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
        return;
 80037a2:	e080      	b.n	80038a6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d014      	beq.n	80037d8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b2:	f043 0201 	orr.w	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80037ba:	2300      	movs	r3, #0
 80037bc:	60fb      	str	r3, [r7, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e6:	f043 0208 	orr.w	r2, r3, #8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003800:	2b00      	cmp	r3, #0
 8003802:	d04f      	beq.n	80038a4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003812:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_SPI_IRQHandler+0x168>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d034      	beq.n	800389a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0203 	bic.w	r2, r2, #3
 800383e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003844:	2b00      	cmp	r3, #0
 8003846:	d011      	beq.n	800386c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_SPI_IRQHandler+0x1e4>)
 800384e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fc5c 	bl	8001112 <HAL_DMA_Abort_IT>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003864:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	2b00      	cmp	r3, #0
 8003872:	d016      	beq.n	80038a2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	4a0c      	ldr	r2, [pc, #48]	; (80038ac <HAL_SPI_IRQHandler+0x1e4>)
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003880:	4618      	mov	r0, r3
 8003882:	f7fd fc46 	bl	8001112 <HAL_DMA_Abort_IT>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003898:	e003      	b.n	80038a2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f808 	bl	80038b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80038a0:	e000      	b.n	80038a4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80038a2:	bf00      	nop
    return;
 80038a4:	bf00      	nop
  }
}
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	080038c5 	.word	0x080038c5

080038b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f7ff ffe5 	bl	80038b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003900:	f7fd fabc 	bl	8000e7c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	4413      	add	r3, r2
 800390e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003910:	f7fd fab4 	bl	8000e7c <HAL_GetTick>
 8003914:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	015b      	lsls	r3, r3, #5
 800391c:	0d1b      	lsrs	r3, r3, #20
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	fb02 f303 	mul.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003926:	e054      	b.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d050      	beq.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003930:	f7fd faa4 	bl	8000e7c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	429a      	cmp	r2, r3
 800393e:	d902      	bls.n	8003946 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d13d      	bne.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003954:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d111      	bne.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003968:	d004      	beq.n	8003974 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d107      	bne.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003982:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398c:	d10f      	bne.n	80039ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e017      	b.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d19b      	bne.n	8003928 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000008 	.word	0x20000008

08003a00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08a      	sub	sp, #40	; 0x28
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
 8003a0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a12:	f7fd fa33 	bl	8000e7c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a22:	f7fd fa2b 	bl	8000e7c <HAL_GetTick>
 8003a26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a30:	4b3d      	ldr	r3, [pc, #244]	; (8003b28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	00da      	lsls	r2, r3, #3
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	0d1b      	lsrs	r3, r3, #20
 8003a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a42:	fb02 f303 	mul.w	r3, r2, r3
 8003a46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a48:	e060      	b.n	8003b0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a50:	d107      	bne.n	8003a62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d050      	beq.n	8003b0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a6a:	f7fd fa07 	bl	8000e7c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d902      	bls.n	8003a80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d13d      	bne.n	8003afc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a98:	d111      	bne.n	8003abe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa2:	d004      	beq.n	8003aae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aac:	d107      	bne.n	8003abe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003abc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ac6:	d10f      	bne.n	8003ae8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e010      	b.n	8003b1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4013      	ands	r3, r2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d196      	bne.n	8003a4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3728      	adds	r7, #40	; 0x28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000008 	.word	0x20000008

08003b2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f7ff ff5b 	bl	8003a00 <SPI_WaitFifoStateUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d007      	beq.n	8003b60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b54:	f043 0220 	orr.w	r2, r3, #32
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e027      	b.n	8003bb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	2200      	movs	r2, #0
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff fec0 	bl	80038f0 <SPI_WaitFlagStateUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d007      	beq.n	8003b86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b7a:	f043 0220 	orr.w	r2, r3, #32
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e014      	b.n	8003bb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f7ff ff34 	bl	8003a00 <SPI_WaitFifoStateUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba2:	f043 0220 	orr.w	r2, r3, #32
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e000      	b.n	8003bb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <LL_RCC_GetUSARTClockSource>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4013      	ands	r3, r2
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_RCC_GetLPUARTClockSource>:
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4013      	ands	r3, r2
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e042      	b.n	8003c90 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7fc ff5b 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2224      	movs	r2, #36	; 0x24
 8003c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa50 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f825 	bl	8003c98 <UART_SetConfig>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e01b      	b.n	8003c90 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 facf 	bl	800422c <UART_CheckIdleState>
 8003c8e:	4603      	mov	r3, r0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c9c:	b08c      	sub	sp, #48	; 0x30
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4baf      	ldr	r3, [pc, #700]	; (8003f84 <UART_SetConfig+0x2ec>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	6812      	ldr	r2, [r2, #0]
 8003cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4aa4      	ldr	r2, [pc, #656]	; (8003f88 <UART_SetConfig+0x2f0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d00:	4313      	orrs	r3, r2
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	6812      	ldr	r2, [r2, #0]
 8003d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d18:	430b      	orrs	r3, r1
 8003d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	f023 010f 	bic.w	r1, r3, #15
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a95      	ldr	r2, [pc, #596]	; (8003f8c <UART_SetConfig+0x2f4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d125      	bne.n	8003d88 <UART_SetConfig+0xf0>
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	f7ff ff3b 	bl	8003bb8 <LL_RCC_GetUSARTClockSource>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d81b      	bhi.n	8003d80 <UART_SetConfig+0xe8>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0xb8>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	08003d69 	.word	0x08003d69
 8003d5c:	08003d79 	.word	0x08003d79
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d66:	e042      	b.n	8003dee <UART_SetConfig+0x156>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6e:	e03e      	b.n	8003dee <UART_SetConfig+0x156>
 8003d70:	2304      	movs	r3, #4
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d76:	e03a      	b.n	8003dee <UART_SetConfig+0x156>
 8003d78:	2308      	movs	r3, #8
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7e:	e036      	b.n	8003dee <UART_SetConfig+0x156>
 8003d80:	2310      	movs	r3, #16
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d86:	e032      	b.n	8003dee <UART_SetConfig+0x156>
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a7e      	ldr	r2, [pc, #504]	; (8003f88 <UART_SetConfig+0x2f0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d12a      	bne.n	8003de8 <UART_SetConfig+0x150>
 8003d92:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003d96:	f7ff ff1f 	bl	8003bd8 <LL_RCC_GetLPUARTClockSource>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da0:	d01a      	beq.n	8003dd8 <UART_SetConfig+0x140>
 8003da2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da6:	d81b      	bhi.n	8003de0 <UART_SetConfig+0x148>
 8003da8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dac:	d00c      	beq.n	8003dc8 <UART_SetConfig+0x130>
 8003dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db2:	d815      	bhi.n	8003de0 <UART_SetConfig+0x148>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <UART_SetConfig+0x128>
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dbc:	d008      	beq.n	8003dd0 <UART_SetConfig+0x138>
 8003dbe:	e00f      	b.n	8003de0 <UART_SetConfig+0x148>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc6:	e012      	b.n	8003dee <UART_SetConfig+0x156>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dce:	e00e      	b.n	8003dee <UART_SetConfig+0x156>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd6:	e00a      	b.n	8003dee <UART_SetConfig+0x156>
 8003dd8:	2308      	movs	r3, #8
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dde:	e006      	b.n	8003dee <UART_SetConfig+0x156>
 8003de0:	2310      	movs	r3, #16
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de6:	e002      	b.n	8003dee <UART_SetConfig+0x156>
 8003de8:	2310      	movs	r3, #16
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <UART_SetConfig+0x2f0>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	f040 8097 	bne.w	8003f28 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d823      	bhi.n	8003e4a <UART_SetConfig+0x1b2>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <UART_SetConfig+0x170>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e3b 	.word	0x08003e3b
 8003e1c:	08003e4b 	.word	0x08003e4b
 8003e20:	08003e4b 	.word	0x08003e4b
 8003e24:	08003e4b 	.word	0x08003e4b
 8003e28:	08003e43 	.word	0x08003e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7fe fd1a 	bl	8002864 <HAL_RCC_GetPCLK1Freq>
 8003e30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e32:	e010      	b.n	8003e56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b56      	ldr	r3, [pc, #344]	; (8003f90 <UART_SetConfig+0x2f8>)
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e38:	e00d      	b.n	8003e56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7fe fc91 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8003e3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e40:	e009      	b.n	8003e56 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e48:	e005      	b.n	8003e56 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 812b 	beq.w	80040b4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	4a4c      	ldr	r2, [pc, #304]	; (8003f94 <UART_SetConfig+0x2fc>)
 8003e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d305      	bcc.n	8003e8e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d903      	bls.n	8003e96 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e94:	e10e      	b.n	80040b4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e98:	2200      	movs	r2, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	60fa      	str	r2, [r7, #12]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	; (8003f94 <UART_SetConfig+0x2fc>)
 8003ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	2200      	movs	r2, #0
 8003eac:	603b      	str	r3, [r7, #0]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003eb8:	f7fc f960 	bl	800017c <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	020b      	lsls	r3, r1, #8
 8003ece:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ed2:	0202      	lsls	r2, r0, #8
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	6849      	ldr	r1, [r1, #4]
 8003ed8:	0849      	lsrs	r1, r1, #1
 8003eda:	2000      	movs	r0, #0
 8003edc:	460c      	mov	r4, r1
 8003ede:	4605      	mov	r5, r0
 8003ee0:	eb12 0804 	adds.w	r8, r2, r4
 8003ee4:	eb43 0905 	adc.w	r9, r3, r5
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	469a      	mov	sl, r3
 8003ef0:	4693      	mov	fp, r2
 8003ef2:	4652      	mov	r2, sl
 8003ef4:	465b      	mov	r3, fp
 8003ef6:	4640      	mov	r0, r8
 8003ef8:	4649      	mov	r1, r9
 8003efa:	f7fc f93f 	bl	800017c <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4613      	mov	r3, r2
 8003f04:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0c:	d308      	bcc.n	8003f20 <UART_SetConfig+0x288>
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f14:	d204      	bcs.n	8003f20 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6a3a      	ldr	r2, [r7, #32]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	e0c9      	b.n	80040b4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f26:	e0c5      	b.n	80040b4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f30:	d16d      	bne.n	800400e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003f32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f36:	3b01      	subs	r3, #1
 8003f38:	2b07      	cmp	r3, #7
 8003f3a:	d82d      	bhi.n	8003f98 <UART_SetConfig+0x300>
 8003f3c:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0x2ac>)
 8003f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f42:	bf00      	nop
 8003f44:	08003f65 	.word	0x08003f65
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f99 	.word	0x08003f99
 8003f50:	08003f73 	.word	0x08003f73
 8003f54:	08003f99 	.word	0x08003f99
 8003f58:	08003f99 	.word	0x08003f99
 8003f5c:	08003f99 	.word	0x08003f99
 8003f60:	08003f7b 	.word	0x08003f7b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe fc94 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8003f68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f6a:	e01b      	b.n	8003fa4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f6c:	4b08      	ldr	r3, [pc, #32]	; (8003f90 <UART_SetConfig+0x2f8>)
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f70:	e018      	b.n	8003fa4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f72:	f7fe fbf5 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8003f76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f78:	e014      	b.n	8003fa4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f80:	e010      	b.n	8003fa4 <UART_SetConfig+0x30c>
 8003f82:	bf00      	nop
 8003f84:	cfff69f3 	.word	0xcfff69f3
 8003f88:	40008000 	.word	0x40008000
 8003f8c:	40013800 	.word	0x40013800
 8003f90:	00f42400 	.word	0x00f42400
 8003f94:	080048dc 	.word	0x080048dc
      default:
        pclk = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8084 	beq.w	80040b4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	4a4b      	ldr	r2, [pc, #300]	; (80040e0 <UART_SetConfig+0x448>)
 8003fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fbe:	005a      	lsls	r2, r3, #1
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	441a      	add	r2, r3
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	2b0f      	cmp	r3, #15
 8003fd6:	d916      	bls.n	8004006 <UART_SetConfig+0x36e>
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fde:	d212      	bcs.n	8004006 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f023 030f 	bic.w	r3, r3, #15
 8003fe8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	8bfb      	ldrh	r3, [r7, #30]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	8bfa      	ldrh	r2, [r7, #30]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	e056      	b.n	80040b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800400c:	e052      	b.n	80040b4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800400e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004012:	3b01      	subs	r3, #1
 8004014:	2b07      	cmp	r3, #7
 8004016:	d822      	bhi.n	800405e <UART_SetConfig+0x3c6>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <UART_SetConfig+0x388>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004041 	.word	0x08004041
 8004024:	08004049 	.word	0x08004049
 8004028:	0800405f 	.word	0x0800405f
 800402c:	0800404f 	.word	0x0800404f
 8004030:	0800405f 	.word	0x0800405f
 8004034:	0800405f 	.word	0x0800405f
 8004038:	0800405f 	.word	0x0800405f
 800403c:	08004057 	.word	0x08004057
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004040:	f7fe fc26 	bl	8002890 <HAL_RCC_GetPCLK2Freq>
 8004044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004046:	e010      	b.n	800406a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004048:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <UART_SetConfig+0x44c>)
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800404c:	e00d      	b.n	800406a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800404e:	f7fe fb87 	bl	8002760 <HAL_RCC_GetSysClockFreq>
 8004052:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004054:	e009      	b.n	800406a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800405a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800405c:	e005      	b.n	800406a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800405e:	2300      	movs	r3, #0
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004068:	bf00      	nop
    }

    if (pclk != 0U)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	2b00      	cmp	r3, #0
 800406e:	d021      	beq.n	80040b4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <UART_SetConfig+0x448>)
 8004076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800407a:	461a      	mov	r2, r3
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	085b      	lsrs	r3, r3, #1
 8004088:	441a      	add	r2, r3
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004092:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2b0f      	cmp	r3, #15
 8004098:	d909      	bls.n	80040ae <UART_SetConfig+0x416>
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d205      	bcs.n	80040ae <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60da      	str	r2, [r3, #12]
 80040ac:	e002      	b.n	80040b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	2201      	movs	r2, #1
 80040c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2200      	movs	r2, #0
 80040c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3730      	adds	r7, #48	; 0x30
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	080048dc 	.word	0x080048dc
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01a      	beq.n	80041fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e6:	d10a      	bne.n	80041fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b098      	sub	sp, #96	; 0x60
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800423c:	f7fc fe1e 	bl	8000e7c <HAL_GetTick>
 8004240:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d12f      	bne.n	80042b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f88e 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d022      	beq.n	80042b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
 800428a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800428e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e6      	bne.n	800426a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e063      	b.n	8004378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d149      	bne.n	8004352 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	2200      	movs	r2, #0
 80042c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f857 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d03c      	beq.n	8004352 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	623b      	str	r3, [r7, #32]
   return(result);
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
 80042f8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e6      	bne.n	80042d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3308      	adds	r3, #8
 8004310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	60fb      	str	r3, [r7, #12]
   return(result);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	64bb      	str	r3, [r7, #72]	; 0x48
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3308      	adds	r3, #8
 8004328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800432a:	61fa      	str	r2, [r7, #28]
 800432c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432e:	69b9      	ldr	r1, [r7, #24]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	617b      	str	r3, [r7, #20]
   return(result);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1e5      	bne.n	800430a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e012      	b.n	8004378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3758      	adds	r7, #88	; 0x58
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004390:	e04f      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d04b      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fc fd6f 	bl	8000e7c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e04e      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d037      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b80      	cmp	r3, #128	; 0x80
 80043c6:	d034      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2b40      	cmp	r3, #64	; 0x40
 80043cc:	d031      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d110      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f838 	bl	800445a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2208      	movs	r2, #8
 80043ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e029      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440c:	d111      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f81e 	bl	800445a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e00f      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	429a      	cmp	r2, r3
 800444e:	d0a0      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445a:	b480      	push	{r7}
 800445c:	b095      	sub	sp, #84	; 0x54
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
 8004482:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e3      	bne.n	8004494 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d118      	bne.n	8004506 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	f023 0310 	bic.w	r3, r3, #16
 80044e8:	647b      	str	r3, [r7, #68]	; 0x44
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6979      	ldr	r1, [r7, #20]
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e6      	bne.n	80044d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	675a      	str	r2, [r3, #116]	; 0x74
}
 800451a:	bf00      	nop
 800451c:	3754      	adds	r7, #84	; 0x54
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_UARTEx_DisableFifoMode+0x16>
 8004538:	2302      	movs	r3, #2
 800453a:	e027      	b.n	800458c <HAL_UARTEx_DisableFifoMode+0x66>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800456a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e02d      	b.n	800460c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	; 0x24
 80045bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f84f 	bl	8004690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004628:	2302      	movs	r3, #2
 800462a:	e02d      	b.n	8004688 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f811 	bl	8004690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800469c:	2b00      	cmp	r3, #0
 800469e:	d108      	bne.n	80046b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046b0:	e031      	b.n	8004716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046b2:	2308      	movs	r3, #8
 80046b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046b6:	2308      	movs	r3, #8
 80046b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	0e5b      	lsrs	r3, r3, #25
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	0f5b      	lsrs	r3, r3, #29
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046da:	7bbb      	ldrb	r3, [r7, #14]
 80046dc:	7b3a      	ldrb	r2, [r7, #12]
 80046de:	4911      	ldr	r1, [pc, #68]	; (8004724 <UARTEx_SetNbDataToProcess+0x94>)
 80046e0:	5c8a      	ldrb	r2, [r1, r2]
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80046e6:	7b3a      	ldrb	r2, [r7, #12]
 80046e8:	490f      	ldr	r1, [pc, #60]	; (8004728 <UARTEx_SetNbDataToProcess+0x98>)
 80046ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
 80046fa:	7b7a      	ldrb	r2, [r7, #13]
 80046fc:	4909      	ldr	r1, [pc, #36]	; (8004724 <UARTEx_SetNbDataToProcess+0x94>)
 80046fe:	5c8a      	ldrb	r2, [r1, r2]
 8004700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004704:	7b7a      	ldrb	r2, [r7, #13]
 8004706:	4908      	ldr	r1, [pc, #32]	; (8004728 <UARTEx_SetNbDataToProcess+0x98>)
 8004708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800470a:	fb93 f3f2 	sdiv	r3, r3, r2
 800470e:	b29a      	uxth	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004716:	bf00      	nop
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	080048f4 	.word	0x080048f4
 8004728:	080048fc 	.word	0x080048fc

0800472c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004734:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8004738:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	b29b      	uxth	r3, r3
 8004746:	43db      	mvns	r3, r3
 8004748:	b29b      	uxth	r3, r3
 800474a:	4013      	ands	r3, r2
 800474c:	b29a      	uxth	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	60f8      	str	r0, [r7, #12]
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <memset>:
 800479e:	4402      	add	r2, r0
 80047a0:	4603      	mov	r3, r0
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d100      	bne.n	80047a8 <memset+0xa>
 80047a6:	4770      	bx	lr
 80047a8:	f803 1b01 	strb.w	r1, [r3], #1
 80047ac:	e7f9      	b.n	80047a2 <memset+0x4>
	...

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	4d0d      	ldr	r5, [pc, #52]	; (80047e8 <__libc_init_array+0x38>)
 80047b4:	4c0d      	ldr	r4, [pc, #52]	; (80047ec <__libc_init_array+0x3c>)
 80047b6:	1b64      	subs	r4, r4, r5
 80047b8:	10a4      	asrs	r4, r4, #2
 80047ba:	2600      	movs	r6, #0
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	4d0b      	ldr	r5, [pc, #44]	; (80047f0 <__libc_init_array+0x40>)
 80047c2:	4c0c      	ldr	r4, [pc, #48]	; (80047f4 <__libc_init_array+0x44>)
 80047c4:	f000 f818 	bl	80047f8 <_init>
 80047c8:	1b64      	subs	r4, r4, r5
 80047ca:	10a4      	asrs	r4, r4, #2
 80047cc:	2600      	movs	r6, #0
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	0800490c 	.word	0x0800490c
 80047ec:	0800490c 	.word	0x0800490c
 80047f0:	0800490c 	.word	0x0800490c
 80047f4:	08004910 	.word	0x08004910

080047f8 <_init>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	bf00      	nop
 80047fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fe:	bc08      	pop	{r3}
 8004800:	469e      	mov	lr, r3
 8004802:	4770      	bx	lr

08004804 <_fini>:
 8004804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004806:	bf00      	nop
 8004808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800480a:	bc08      	pop	{r3}
 800480c:	469e      	mov	lr, r3
 800480e:	4770      	bx	lr
